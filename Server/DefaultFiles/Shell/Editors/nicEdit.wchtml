<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
"http://www.w3.org/TR/html4/strict.dtd">
<html>
   <head>

<!-- This code is released under the LGPL, See /Docs/license.wchtml -->

      <meta http-equiv="X-UA-Compatible" content="chrome=1">
      <? Scripts(/API/nicEdit.js, /API/Prototype.js, /API/File.js, <? $_GET["FileName"] ?>?Method=GetJavascriptWrapper&assignToVariable=TextFile, /API/Url.js, /API/Comet/CometProtocol.js) ?>
      <link href="/Pages/objectcloud.css" type="text/css" rel="stylesheet" />
      <link href="/API/proto.menu.css" type="text/css" rel="stylesheet" />
      <script>

         var unsaved = false;
         var editor = null;

         function updateTitle()
         {
            document.title = "nicEdit: " + $("titleInput").value + (unsaved ? "*" : "");
         }

         var stopResizing = false;

         // Resizes the inputs when the window size changes
         function doResize()
         {
            // hack to stop IE from crashing
            if (stopResizing)
               return;

            if (null != editor)
               editor.removeInstance('textarea');

            var filenameInput = $("filenameInput");

            // find the margin
            var margin = filenameInput.cumulativeOffset().left;

            var windowHeight = window.innerHeight;
				
            var textarea = $("textarea");
            var textareaTop = textarea.cumulativeOffset().top;

            var desiredHeight = windowHeight - textareaTop - margin - $("browserBar").getHeight();

            var filenameInputWidth = document.viewport.getWidth() - (5 * margin);
				
            try
            {				
               textarea.style.height = desiredHeight + "px";
            }
            catch (exception)
            {
               textarea.style.offsetHeight = desiredHeight;
               textarea.style.width = filenameInputWidth;
               stopResizing = true;
            }

            var filenameInput = $("filenameInput");
            filenameInput.setStyle({"width": filenameInputWidth + "px"});

            var titleInput = $("titleInput");
            var replyPermissionsLink = $("ReplyPermissionsLink");
            var titleInputWidth = filenameInputWidth - replyPermissionsLink.getWidth() - titleInput.cumulativeOffset().left - 10

            titleInput.setStyle({"width": titleInputWidth + "px"});

            var margin = 10;

            if (window.innerWidth <= 418)
               margin = 60;
            else if (window.innerWidth <= 770)
               margin = 35;

            editor = new nicEditor(
            {
               fullPanel: true,
               maxHeight: desiredHeight - margin,
               onSave : save,
               style: "contents"
            }).panelInstance(
               'textarea',
               {
                  hasPanel: true,
                  style: "contents"
               });


            editor.addEvent('key', onkeyup);
         }

         // Keep track of filename changes.  If the filename changes, then it might need to be created
         var filenameChanged = false;

         function onFilenameChanged()
         {
            filenameChanged = true;
         }

         var LastSavedText = null;
			
         function save(content, id, instance)
         {
            var filename = $("filenameInput").value;
				
            if (filenameChanged)
            {
               // This is a new file, create it
               // An assumption is that the folder path is valid...

               var dirAndFile = File.SplitFullPath(filename);

               File.Open(
                  dirAndFile.Directory,
                  {},
                  function(dirWrapper)
                  {
                     dirWrapper.CreateFile(
                        dirAndFile.Filename,
                        "text",
                        false,
                        {},
                        function(textFileWrapper) 
                        {
                           // Saving is finished through recursion
                           TextFile = textFileWrapper;
                           filenameChanged = false;
                           save(content, id, instance);
                        });
                  });
            }
            else
            {
               var textToWrite = "<div>" + $("titleInput").value + "</div>" + content;

               LastSavedText = textToWrite;

               // This file already exists, just update it
               TextFile.WriteAll(
                  textToWrite,
                  function(transport)
                  {
                     unsaved = false;
                     updateTitle();
                     alert(transport.responseText);
                  });
            }
         }

         function onkeyup()
         {
            unsaved = true;
            updateTitle();
         }

         window.onbeforeunload = function()
         {
            if (unsaved)
               return "Changes to " + $("filenameInput").value + " are unsaved!  Are you sure you want to close Weco and loose the changes?";
         }

         // Connect back to the server to get COMET updates when the page changes
         CP_QualityReliable.connect(
            Url.decode('<? $_GET["FileName"] ?>') + '?ChannelEndpoint=ChangingEvent',
            {
               handleIncomingData: function(data)
               {
                  if (data != LastSavedText)
                     alert("This file has been edited in another window.  Saving will erase the new changes");
                  else
                     LastSavedText = null;
               }
            });
      </script>
   </head>
   <body onresize="doResize()" style="overflow: hidden; margin: 0px"><div style="margin: 10px">
      <? WebComponent("/Shell/Legacy/PromptForChromeFrame.webcomponent") ?>
      <? WebComponent("/Pages/navbar.webcomponent") ?>
      <input 
         type="text" 
         name="filename" 
         id="filenameInput" 
         value="<? $_GET["FileName"] ?>" 
         onchange="onFilenameChanged()" />

      Title: <input 
         type="text" 
         name="title" 
         id="titleInput" 
         onchange="onkeyup()" />

      <a
         href="/Shell/Communication/ReplyPermissions.wchtml?FileName=<? $_GET["FileName"] ?>"
         id="ReplyPermissionsLink"
         target="_blank">
      Reply Permissions</a>

      <input type="hidden" id="textfromserver" value="<? WebComponent($_GET["FileName"] . "?Method=ReadAll&EncodeFor=HTML") ?>" />

      <div class="contents">
         <div class="contents" style="width: 100%;" id="textarea"></div>
      </div>
		
      <script>
         updateTitle();

         bkLib.onDomLoaded(function() 
         {
            var textFromServerInput = $("textfromserver");
            var textarea = $("textarea");
            textarea.innerHTML = textFromServerInput.value;
            textFromServerInput.remove();

            var childElements = textarea.childElements();

            if (childElements.length > 0)
            {
               $("titleInput").value = childElements[0].innerHTML;
               childElements[0].remove();
               updateTitle();
            }

            doResize();
         });
      </script></div>
      <div id="browserBar"><? WebComponent("/Shell/Navigation/SocialBar.webcomponent") ?></div>
   </body>
</html>