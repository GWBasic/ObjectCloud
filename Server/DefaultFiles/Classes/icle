var version = base.GetVersion();

// This is the more complicated way to set and upgrade a database schema...
// ..............................
// TODO:  Condense after writing documentation

// Constructor
if (null == version)
   lockMe(function()
   {
      callAsOwner(function()
      {
         // Need to double-check in case someone else built the DB...
         version = base.GetVersion();
         if (null == version)
         {
            base.PostQuery("create table Notification (notificationId INTEGER PRIMARY KEY, timeStamp not null, state, sender not null, objectUrl not null, title not null, documentType not null, messageSummary not null)");

            base.SetVersion(0);
            version = 0;
         }
      });
   });

// Upgrading
if (version < 0.001)
   lockMe(function()
   {
      callAsOwner(function()
      {
         // Need to double-check in case someone else built the DB...
         version = base.GetVersion();
         if (version < 0.1)
         {
            base.PostQuery("create table ChangeData (notificationId INTEGER PRIMARY KEY, changeData not null)");

            base.SetVersion(0.1);
            version = 0.1;
         }
      });
   });

// And this is the E-Z way!
// ...............................
setSchema(
[
   {"Version": 0.002, "Query": "create table Sender (openId not null, senderToken, recipientToken)"},
   {"Version": 0.003, "Query": "create table Token (openId not null, token not null, created)"},
   {"Version": 0.004, "Query": "create table Blocked (openIdorDomain not null)"},
   {
      "Version": 0.005,
      "Query":
         "create table ObjectState (objectUrl not null, objectState not null);" +
         "create table Deleted (objectUrl not null, openId not null)"
   }
]);

// setSchema can be called multiple times.  For schemas that have a lot of versions,
// the more complicated technique can look for very old versions and use setSchema,
// and then a final setSchema can be used for more recent versions.

