{"Title":"Release Notes","Contents":"<h1>March 20, 2012: 1.0 alpha 6-1Latex gloves keeps your hands clean while editing</h1><p>Added a latex editor that supports COMET.</p><p>Fixed a problem preventing the edit link from displaying properly.</p><h1>December 27, 2010: 1.0 alpha:6-0 Don't linger around the sockets or you'll lose your memory</h1><p>Fixed problems with lingering sockets that were causing stability issues. Touched up documentation to reflect more accurate contact information.</p><h1>December 8, 2010: &#160;1.0 alpha:5-2 HasExited is false</h1><p>This release is primarily to work around a bug in Mono 2.8.1: <a xmlns=\"http://www.w3.org/1999/xhtml\" href=\"https://bugzilla.novell.com/show_bug.cgi?id=657852\">https://bugzilla.novell.com/show_bug.cgi?id=657852</a>&#160;The workaround is to disable ProcessKiller.exe. The Javascript sub processes automatically kill themselves when ObjectCloud.exe ends because their input streams close.</p><p>In addition, this contains the following minor fixes:</p><p></p><ul><li>HTTP Keepalive improvements</li><li>Refactored the User API to better support external identities through plugins</li><li>Gave every user a private friends group</li><li>Prevented re-entrant cache cleanups after multiple garbage collections</li></ul><p></p><h1>November 14, 2010: &#160;1.0 alpha:5-1 Give me some cache with a timestamp</h1><p>Overhaul of the RAM cache and minor bug fixes:</p><p></p><ul><li>Fixed some typos and broken links in the documentation</li><li>Fixed empty dialog boxes when AJAX errors would occur</li><li>Reworked linking and loading permissions from linked files</li><li>Fixed a potential&#160;synchronization&#160;error that could occur when creating the root directory</li><li>Fixed some potential&#160;synchronization&#160;issues in low-level database connection management</li></ul><p></p><h1>October 25, 2010: &#160;1.0 alpha:5-0 A mass migration of particles that come in waves</h1><p>Our (almost) 1-year release!</p><p>Updated the <span class=\"Apple-style-span\" style=\"font-weight: normal; font-size: medium; \"><a xmlns=\"http://www.w3.org/1999/xhtml\" href=\"/Docs/Specs/Particle.page\">particle spec</a></span><span class=\"Apple-style-span\" style=\"font-weight: normal; font-size: medium; \">&#160;to behave more like a distributed social network. This primarily entailed updating the protocol to send notifications on a per-server instead of a per-recipient basis. Removed references to concurrent document editing. Added ability to handle replies and avatars in a secure manner.</span></p><p>Refactored the notification system to behave more like a social network. Concurrent document editing is gone. See&#160;<a xmlns=\"http://www.w3.org/1999/xhtml\" href=\"/DefaultTemplate/particle.oc\">/DefaultTemplate/particle.oc</a>.</p><p>Redesigned ObjectCloud's look and feel.</p><p>Rewrote and/or updated most of the documentation.</p><p>Moved more pages from the old webcomponent system to the templating system.</p><p>Made <a xmlns=\"http://www.w3.org/1999/xhtml\" href=\"/DefaultTemplate\">/DefaultTemplate</a>&#160;behave more like a folder designed for system operator customizations. Added better&#160;separation&#160;between presentation and logic by keeping html and components in <a xmlns=\"http://www.w3.org/1999/xhtml\" href=\"/DefaultTemplate\">/DefaultTemplate</a>&#160;and Javascript in&#160;<a xmlns=\"http://www.w3.org/1999/xhtml\" href=\"/Shell\">/Shell</a>.</p><h1>September 1, 2010: &#160;1.0 alpha:4-2 Give the garbage collector a pointer so it doesn't have to work so hard</h1><p>Lots of optimizations.</p><p>Attempted to speed up a locking issue with files that do not have a javascript class</p><p>Added support for .ocjs files. &#160;These are server-side Javascript files that aren't mixed with HTML.</p><p>Added support for evaluating templates from within server-side Javascript and returning their results.</p><p>Continued optimizing the cache.</p><p>Optimized loading Javascript. &#160;Static Javascript files are now merged into a single minimized Javascript file that's loaded on a single HTTP request.</p><span class=\"Apple-style-span\" style=\"font-weight: normal; font-size: 16px; \"><h1 style=\"font-size: 1.5em; font-weight: bold; \">August 4, 2010: &#160;1.0 alpha:4-1 It doesn't matter how much cache you have, you still need to collect the garbage</h1></span><p>Re-designed the RAM cache to (theoretically) be more&#160;efficient. &#160;A drawback to this version of the RAM cache is that all memory management happens on its own sub thread.</p><p>Added the concept of \"busy\" to the server. &#160;\"Busy\" occurs when worker threads have large queues of work. &#160;When the server is \"busy,\" it will queue requests but wait until it is no longer \"busy\" in order to serve them.</p><p>Fixed some issues with socket handling where ObjectCloud wouldn't close the socket if the client didn't support keepalive.</p><p>Switched to non-blocking socket handling.</p><p>Now the&#160;maximum&#160;amount of request threads is configurable. &#160;By default, it is two per core. &#160;Additional requests are queued.</p><p>Created a driver for Node.js. &#160;This allows for using the same API in Node that is available to in-browser Javascript. &#160;This driver is very early, and writes a lot of debugging information to the console. &#160;See&#160;<a href=\"http://appfeeds.repositoryhosting.com/hg_public/appfeeds/objectcloud/file/4a7a4ec9397f/Node\" title=\"\" target=\"\">http://appfeeds.repositoryhosting.com/hg_public/appfeeds/objectcloud/file/4a7a4ec9397f/Node</a></p><p>There appears to be an issue where ObjectCloud accepts in incoming socket, but the socket doesn't actually reach ObjectCloud code. &#160;This is seen on Macintosh under Mono, but is not reproducible in Windows.</p><p>Known bugs: &#160;The javascript sub process has a memory management issue. &#160;It will gradually increase memory usage until ObjectCloud resets the process. &#160;Using server-side Javascript for performance-critical operations is discouraged.</p><h1 style=\"font-size: 1.5em; font-weight: bold; \">July 18, 2010: &#160;1.0 alpha:4-0&#160;Uptemplate to the extensible mark</h1><p>Created an XML-based templating system. &#160;Some early specs are visible in&#160;<a href=\"/Docs/Specs/Templating%20System.page\" title=\"\" target=\"\" style=\"color: rgb(68, 68, 119); \">/Docs/Specs/Templating System.page</a>. &#160;The templating system is designed to be designer friendly and improve performance of server-side page generation. &#160;A few parts of ObjectCloud are converted over to the template system, but most of ObjectCloud still uses the WebComponent and server-side Javascript system. &#160;With a few minor exceptions, pages based on the WebComponent system or server-side Javascript are deprecated and will slowly be replaced.</p><p>Re-organized the layout to start moving the appearance and configuration away from system-level files. &#160;This allows for developing custom versions of ObjectCloud while still using pages from ObjectCloud.</p><h1>June 18, 2010: &#160;1.0 alpha:3-2&#160;Interlocking the cache queue for a speedy compilation of Javascript bytecode</h1><p>This release is much faster then the previous release.</p><p>Altered the Javascript sub process so that it compiles all Javascript, including eval statements, to Java bytecode. &#160;This bytecode is saved to disk and re-used as-needed.</p><p>Removed and replaced runtime-generated Javascript with pre-compiled Javascript and better use of Rhino's API.</p><p>Updated some underlying data structures to use lock-free queues and stacks, thus improving CPU utilization.</p><p>Updated ObjectCloud's RAM cache to use lock-free queues, thus eliminating locking. &#160;Also altered the cache to poll memory use and clean itself up less frequently, thus significantly improving CPU utilization.</p><h2>Known bugs:</h2><p><b>Compiled Javascript is not cleaned up</b>. &#160;Whenever a Javascript sub process&#160;encounters&#160;new Javascript, it compiles it to Java bytecode and saves the compiled script as a&#160;.compiledJS in ObjectCloud's directory. &#160;These are never cleaned up. &#160;This can be problematic when developing server-side Javascript, as each iteration of source code will result in an unused&#160;.compiledJS file. &#160;The solution is to periodically delete all&#160;.compiledJS files in ObjectCloud's directory, as the Javascript sub-process will re-generate these files as-needed. &#160;These files can be deleted while the server is running.</p><h1>May 14, 2010: &#160;1.0 alpha:3-1&#160;A high thread count is only desirable in a fancy hotel room</h1><p>Enhanced communication between the child processes that host server-side Javascript and the parent ObjectCloud process. &#160;This makes things a little speedier, and eliminates situations where ObjectCloud hangs in a livelock.</p><p>Fixed file uploading.</p><h1>April 30, 2010: &#160;1.0 alpha:3-0 Many well-defined processes lead to java-chip ice cream</h1><p>Major overhaul of the server-side Javascript engine. &#160;Replaced Rhino converted to a .Net dll with a multi-process system that compiles and interprets server-side Javascript in Java sub processes. &#160;Currently, each server-side Javascript \"class\" has its own isolated process. &#160;Rhino + Java were chosen for deployment simplicity.</p><p>Fixed an annoying bug where, after renaming a file, its Javascript wrapper still referred to the old filename.</p><p>Added some enhancements to groups' web APIs.</p><p></p><h1>March 22, 2010: &#160;1.0 alpha:2-2&#160;Keeping it simple for the lesser general public</h1><p>Switched the&#160;license&#160;to SimPL. &#160;See&#160;<a href=\"/Docs/license.wchtml\" title=\"\" target=\"\">/Docs/license.wchtml</a> for more information.<br/></p><p>Various bug fixes, tweaks, and other changes that make it easier to replace ObjectCloud's SQLite-based file system with a proprietary replacement. &#160;These primarily are concentrated around how ObjectCloud works with Spring.</p><p>Now using the latest Spring.Net and Common.Logging frameworks.</p><p>Added some lower-level support for profile pics and profile public metadata.</p><p>Updated the group functionality to be declared in C# instead of server-side Javascript. &#160;This is untested.</p><p>Fixed some issues with regard to relationships and permissions.</p><h1>February 4, 2010: &#160;1.0 alpha:2-1&#160;A mean end of circadia</h1><p>Revised the history page.<br/></p><p>Added support for loading plugins at runtime through Spring files.</p><p>Minor API changes and unit test tweaks.</p><h1>January 20, 2010: 1.0, alpha:2-0 Camber in the cucumber</h1><p>Enhanced server-side Javascript to allow for some server-side rendering of HTML, and scripting.</p><p>Re-worked the Javascript APIs for both server-side and browser-side Javascript to pass all arguments in a single Javascript object. &#160;This allows the AJAX API to evolve without breaking old code.</p><p>Removed the Prototype&#160;dependency&#160;from the browser-side Javascript API. &#160;This allows ObjectCloud to work with frameworks that would conflict or replace Prototype.</p><p>Implemented pages for groups.</p><p>Implemented the ability to specify that a group is personal, private, or public. &#160;A personal group is for one's own personal use and isn't meant to be publicly visible. &#160;(IE, the members don't know that they're part of a group.) &#160;A private group is visible to all members, but only the owner can control membership. &#160;A public group is visible to everyone and everyone can join.</p><p>Implemented some caching of query results for certain queries that are run numerous times when hosting a static file that uses a lot of web components. &#160;This dramatically makes ObjectCloud faster. &#160;Specifically, the queries that determine what groups a user is in, and what permission a user has to a file, are now cached in RAM.</p><h1>December 8, 2009: 1.0, alpha:1-2 The glory is all gummy</h1><p>Disabled the social bar on all known mobile platforms<br/></p><p>Re-wrote the cache to be less susceptible to deadlocking, and to require less worker threads to keep the caches clean.</p><p>Implemented an algorithm to keep cached objects in memory longer, and only to release unused objects as memory use increases.</p><p>Fixed indexing issues in the session manager that caused it to run slowly.&#160; <span style=\"font-style: italic;\">(Note:&#160; The upgrade process will end all existing sessions!)</span><br/></p><p>Replaced usage of the C# lock keyword with a timed lock that defaults to 10 seconds.&#160; This is useful in tracking down deadlocks.&#160; Also added a timeout for long-running database operations.<br/></p><p>Added the blogum system to have a better blog / forum.</p><p>Added ability to reply to any .page file.</p><p>Updated the API to support named permissions on functions.<br/></p><p>Updated the API to allow named relationships among files in a directory.<br/></p><p>Added ability to expose underlying web-accessible methods when an object is wrapped with JavaScript.&#160; This is disabled by default for security reasons.</p><h2>Known issues</h2>\n<p>Deleting files that have a SQLite database aren't being cleaned up\ncorrectly, nor are they closing their open connections to the database.</p><h1>November 25, 2009:&#160;1.0, alpha:1-2 Jint' Ses Ion's in Dex with the Rhino</h1><p>Fixed some minor issues with the Social Bar that were preventing it from showing up unless someone was already present.</p><p>Fixed an issue where the database connection was closed while a long-running query ran.</p><p>Added indexes to many different object times.&#160; This significantly improves the logger's performance.&#160; This should mitigate an issue where ObjectCloud would become unresponsive while cleaning its logs.</p><p>Fixed potential null reference exception when re-using a socket in HTTP streaming mode.</p><h1>November 17, 2009: 1.0 alpha:1-1 Peas and Ketchup</h1><p>Introduced Comet features, including automatic refresh of a view of a directory if it's modified in another window, automatic refresh of a page if it's modified in another window, and the Social Bar.</p><h1>October 30, 2009:&#160; 1.0, alpha:1-0 Can I have a cookie from the HttpListener?</h1><p>Initial release<br/></p>"}