{"Title":"Adding a File Type to ObjectCloud","Contents":"\u003Cp>\u003Ca href=\"about.page\">About ObjectCloud\u003C/a>\u003C/p>\u003Cp>For each kind of file that ObjectCloud supports, it needs to be able to tell the browser how to view and edit the file. &nbsp;Some times, ObjectCloud can just send the file to the browser, and with the addition of some data called a \u003Ca target=\"_blank\" title=\"\" href=\"http://en.wikipedia.org/wiki/MIME_type\">MIME type\u003C/a>, the browser knows how to handle it. &nbsp;Other times, ObjectCloud needs to include HTML and Javascript that the browser uses to display or edit the file.\u003C/p>\u003Cp>For example, if ObjectCloud just \u003Ca target=\"_blank\" title=\"\" href=\"/Docs/add%20file%20type.page?Method=ReadAll\">sends a .page file without instructions on how to view it, the browser will display something somewhat ugly\u003C/a>.&nbsp; Likewise, if the \u003Ca target=\"_blank\" title=\"\" href=\"/Docs/add%20file%20type.page?MimeOverride=text/plain\">MIME type is incorrect, the browser might not correctly handle the included HTML and Javascript\u003C/a>.\u003C/p>\u003Cp style=\"margin-left: 40px;\">\u003Cspan style=\"font-weight: bold;\">Note\u003C/span>:&nbsp; \u003Cspan style=\"font-style: italic;\">When requesting a file, you can always override the MIME type by including the MimeOverride=GET parameter in the URL\u003C/span>.\u003Cbr>\u003C/p>This page explains how to configure ObjectCloud to handle additional file types.&nbsp; It also explains how to add additional file types to the \"Create New File\" functionality shown when viewing a directory.\u003Cbr>\u003Ch1>Actions\u003C/h1>\u003Cp>The primary way to configure ObjectCloud to handle a new file type is to declare the file type's actions.&nbsp; The action, which is usually a GET argument in the URL, describes what the user is trying to do with the file; and therefore the kinds of instructions that ObjectCloud must provide to the browser.&nbsp; For example:\u003C/p>\u003Cul>\u003Cli>\u003Cspan style=\"font-weight: bold;\">http://myserver/mydirectory/myfile.xyz?\u003Cspan style=\"background-color: rgb(255, 255, 51);\">Action=View\u003C/span>\u003C/span> : The user wishes to view the file\u003Cbr>\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">http://myserver/mydirectory/myfile.xyz?\u003Cspan style=\"background-color: rgb(255, 255, 51);\">Action=Edit\u003C/span>\u003C/span> : The user wishes to edit the file\u003Cbr>\u003C/li>\u003C/ul>\u003Cp>You might be thinking, \"what happens when the \"Action\" argument is omitted?\"&nbsp; Most of the time, ObjectCloud defaults to the View action, although there are some advanced situations when a different action is used.&nbsp; (One example is when specifying an Index file in a directory.)&nbsp; In addition, \"Action\" is not needed if the URL contains a \"Method\" GET argument.&nbsp; (This is explained shortly)\u003Cbr>\u003C/p>\u003Ch2>How Actions Work\u003C/h2>\u003Cp>All actions are stored in the following folders:\u003C/p>\u003Cul>\u003Cli>\u003Ca target=\"_blank\" title=\"\" href=\"/Shell/Actions/ByExtension\">/Shell/Actions/ByExtension\u003C/a>:&nbsp; For files that have an extension.&nbsp; (.txt, .html ...)\u003C/li>\u003Cli>\u003Ca target=\"_blank\" title=\"\" href=\"/Shell/Actions/ByType\">/Shell/Actions/ByType\u003C/a>:&nbsp; For files that do not have an extension.&nbsp; Each core file type has different actions depending on what kind of data is stored.\u003Cbr>\u003C/li>\u003C/ul>\u003Cp>Most of the time, you will add or modify actions in the \u003Ca target=\"_blank\" title=\"\" href=\"../Shell/Actions/ByExtension\">/Shell/Actions/ByExtension\u003C/a> folder.&nbsp; For example, actions for a .txt file are specified in \u003Ca target=\"_blank\" title=\"\" href=\"/Shell/Actions/ByExtension/text\">/Shell/Actions/ByExtension/text\u003C/a>, and actions for a .png file are stored in \u003Ca target=\"_blank\" title=\"\" href=\"/Shell/Actions/ByExtension/png\">/Shell/Actions/ByExtension/png\u003C/a>.\u003Cbr>\u003C/p>\u003Cp>If you looked closely at the action declarations for both text and png, you'd see the following values for the \"View\" action:\u003C/p>\u003Cul>\u003Cli>\u003Cspan style=\"font-weight: bold;\">Text\u003C/span>:&nbsp; [Target]?Method=ReadAll&amp;[Arguments], text/plain\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">Png\u003C/span>:  [Target]?Method=ReadAll&amp;[Arguments], image/png\u003C/li>\u003C/ul>\u003Cp>What's happening?&nbsp; Under the hood, when ObjectCloud performs the View action, it behaves as if the URL specified was really the one specified in the View action, with some replacements made.&nbsp; When it returns data to the browser, it uses the MIME type included after the comma.&nbsp; The following replacements are supported:\u003C/p>\u003Cul>\u003Cli>[Target]:&nbsp; The actual requested file.\u003C/li>\u003Cli>[Arguments]:&nbsp; All additional GET arguments.\u003Cbr>\u003C/li>\u003C/ul>\u003Cp>Therefore, the following URLs would translate to:\u003C/p>\u003Cul>\u003Cli>/myfiles/mytext.text -&gt; /myfiles/mytext.txt?Method=ReadAll\u003C/li>\u003Cli>/myfiles/myimage.png -&gt; /myfiles/mytext.png?Method=ReadAll\u003C/li>\u003C/ul>\u003Cp>Furthermore, /myfiles/mytext.text gets a MIME type of text/plain and /myfiles/myimage.png gets a MIME type of image/png.\u003C/p>\u003Cp style=\"margin-left: 40px;\">\u003Cspan style=\"font-weight: bold;\">Note\u003C/span>:&nbsp; \u003Cspan style=\"font-style: italic;\">You might be wondering what the \"Method=ReadAll\" is.&nbsp; If you've gone through the \u003C/span>\u003Ca style=\"font-style: italic;\" target=\"\" title=\"\" href=\"/Docs/simple%20storage%20walkthrough.page\">simple storage walkthrough\u003C/a>\u003Cspan style=\"font-style: italic;\">, you'll remember that ObjectCloud borrows from Object-Oriented programming in that each file is really a persistent object on the server.&nbsp; As a result, you think of a text file's \"View\" action as saying to the server, \"When a request comes in to view a text file, just call its ReadAll method and return the results with the 'text/plain' MIME type.\"\u003C/span>\u003C/p>\u003Cp>Sometimes, Actions can call other files.&nbsp; This is the case when editing a text file.&nbsp; For example, the Javascript needed to edit a text file is stored in \u003Ca target=\"_blank\" title=\"\" href=\"/Shell/Editors/Weco.wchtml?Method=ReadAll\">/Shell/Editors/Weco.wchtml\u003C/a>.&nbsp; Weco.wchtml uses WebComponents to load the file that it's editing.&nbsp; Therefore, a text file's edit action must return Weco.wchtml.&nbsp; This is accomplished by passing the file being edited as an argument to Weco in the action.&nbsp; Thus with the following edit action for a text file:\u003C/p>\u003Cpre style=\"margin-left: 40px;\">/Shell/Editors/Weco.wchtml\u003Cspan style=\"background-color: rgb(255, 255, 51);\">?FileName=[Target]\u003C/span>\u003C/pre>\u003Cp>The following url translates to:\u003C/p>\u003Cul>\u003Cli>/myfiles/mytext.txt?Action=Edit -&gt; /Shell/Editors/Weco.wchtml?FileName=/myfiles/mytext.txt\u003Cbr>\u003C/li>\u003C/ul>\u003Ch2>Permissions and Overrides\u003Cbr>\u003C/h2>\u003Cp>Some minimal permission enforcement is provided with Actions, although its primary focus is on providing a smooth user experience.&nbsp; The \u003Ca target=\"_blank\" title=\"\" href=\"/Shell/Actions/ActionPermissions\">/Shell/Actions/ActionPermissions\u003C/a> file dictates the minimum permission needed to perform an action.&nbsp; If a user doesn't have the minimum permission needed to perform the action, they will see \u003Ca target=\"_blank\" title=\"\" href=\"/Shell/UserManagers/PermissionDenied.wchtml\">/Shell/UserManagers/PermissionDenied.wchtml\u003C/a> instead of the desired action.\u003C/p>\u003Cp>For example, the following is shown if a user tries to view \u003Ca target=\"_blank\" title=\"\" href=\"/Users/root\">/Users/root\u003C/a> but doesn't have Read permission:\u003C/p>\u003Cp>\u003Cimg alt=\"\" src=\"/Docs/add%20file%20type/permission%20denied.png\" align=\"none\">\u003C/p>\u003Cp>However, Action permissions are insecure.&nbsp; They primarily shield the user from seeing ugly, incomprehensible, or inconvenient error messages.&nbsp; (For example, without enforcing permissions at the Action level, a user could start editing a text file, make changes, and then see an error when clicking save.)&nbsp; For debugging purposes, it's possible to disable Action permissions by appending BypassActionPermission=true to the URL as a GET argument:\u003C/p>\u003Cp>\u003Cimg alt=\"\" src=\"/Docs/add%20file%20type/bypassing%20permission.png\" align=\"none\">\u003C/p>\u003Cp>Without Action permission enforcement, the page appears to work, but there are some incomprehensible errors.\u003C/p>\u003Cp style=\"margin-left: 40px;\">\u003Cspan style=\"font-weight: bold; background-color: rgb(255, 255, 51);\">Warning\u003C/span>\u003Cspan style=\"background-color: rgb(255, 255, 51);\">:&nbsp; Do not rely on Action permission enforcement for true security!&nbsp; You must make sure that you correctly grant read and write permissions.&nbsp; A malicious user can send HTTP requests to ObjectCloud without a web browser!&nbsp; For example, a user can create their own call to foo.text's WriteAll method without being able to see the editor.\u003C/span>\u003Cbr>\u003C/p>\u003Ch1>Add Create New File Support\u003C/h1>\u003Cp>You might wish to allow other users to create new files as they navigate ObjectCloud's file system.&nbsp; To do this, you must provide a template for ObjectCloud to copy, you need to edit \u003Ca target=\"_blank\" title=\"\" href=\"/Shell/Navigation/Directory.json?Action=Edit\">/Shell/Navigation/Directory.json\u003C/a>\u003C/p>\u003Cp>Template files are placed in \u003Ca target=\"_blank\" title=\"\" href=\"/Templates\">/Templates\u003C/a>.\u003C/p>\u003Cp>When editing \u003Ca target=\"_blank\" title=\"\" href=\"../Shell/Navigation/Directory.json?Action=Edit\">/Shell/Navigation/Directory.json\u003C/a>, you will see a JSON array.&nbsp; Add an object for your file type that has the following fields:\u003C/p>\u003Cul>\u003Cli>\u003Cspan style=\"font-weight: bold;\">Template\u003C/span>:&nbsp; The location of the template file\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">Extension\u003C/span>:&nbsp; The extension that ObjectCloud will provide when creating the file\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">Display\u003C/span>:&nbsp; The name that ObjectCloud displays\u003C/li>\u003C/ul>\u003Ca href=\"about.page\">About ObjectCloud\u003C/a>\n"}