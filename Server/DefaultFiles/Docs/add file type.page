{"Title":"Adding a File Type to ObjectCloud","Contents":"<p>For each kind of file that ObjectCloud supports, it needs to be able to tell the browser how to view and edit the file. Some times, ObjectCloud can just send the file to the browser, and with the addition of some data called a <a target=\"_blank\" title=\"\" href=\"http://en.wikipedia.org/wiki/MIME_type\">MIME type</a>, the browser knows how to handle it. &#160;Other times, ObjectCloud needs to include HTML and Javascript that the browser uses to display or edit the file.</p><p>For example, if ObjectCloud just <a target=\"_blank\" title=\"\" href=\"/Docs/add%20file%20type.page?Method=ReadAll\">sends a .page file without instructions on how to view it, the browser will display something somewhat ugly</a>.&#160; Likewise, if the <a target=\"_blank\" title=\"\" href=\"/Docs/add%20file%20type.page?MimeOverride=text/plain\">MIME type is incorrect, the browser might not correctly handle the included HTML and Javascript</a>.</p><p style=\"margin-left: 40px;\"><span style=\"font-weight: bold;\">Note</span>:&#160; <span style=\"font-style: italic;\">When requesting a file, you can always override the MIME type by including the MimeOverride=GET parameter in the URL</span>.<br/></p>This page explains how to configure ObjectCloud to handle additional file types.&#160; It also explains how to add additional file types to the \"Create New File\" functionality shown when viewing a directory.<br/><h1>Actions</h1><p>The primary way to configure ObjectCloud to handle a new file type is to declare the file type's actions.&#160; The action, which is usually a GET argument in the URL, describes what the user is trying to do with the file; and therefore the kinds of instructions that ObjectCloud must provide to the browser.&#160; For example:</p><ul><li><span style=\"font-weight: bold;\">http://myserver/mydirectory/myfile.xyz?<span style=\"background-color: rgb(255, 255, 51);\">Action=View</span></span> : The user wishes to view the file<br/></li><li><span style=\"font-weight: bold;\">http://myserver/mydirectory/myfile.xyz?<span style=\"background-color: rgb(255, 255, 51);\">Action=Edit</span></span> : The user wishes to edit the file<br/></li></ul><p>You might be thinking, \"what happens when the \"Action\" argument is omitted?\"&#160; Most of the time, ObjectCloud defaults to the View action, although there are some advanced situations when a different action is used.&#160; (One example is when specifying an Index file in a directory.)&#160; In addition, \"Action\" is not needed if the URL contains a \"Method\" GET argument.&#160; (This is explained shortly)<br/></p><h2>How Actions Work</h2><p>All actions are stored in the following folders:</p><ul><li><a target=\"_blank\" title=\"\" href=\"/Actions/ByExtension\">/Actions/ByExtension</a>:&#160; For files that have an extension.&#160; (.txt, .html ...)</li><li><a target=\"_blank\" title=\"\" href=\"/Actions/ByType\">/Actions/ByType</a>:&#160; For files that do not have an extension.&#160; Each core file type has different actions depending on what kind of data is stored.<br/></li></ul><p>Most of the time, you will add or modify actions in the <a target=\"_blank\" title=\"\" href=\"/Actions/ByExtension\">/Actions/ByExtension</a> folder.&#160; For example, actions for a .txt file are specified in <a target=\"_blank\" title=\"\" href=\"/Actions/ByExtension/text\">/Actions/ByExtension/text</a>, and actions for a .png file are stored in <a target=\"_blank\" title=\"\" href=\"/Actions/ByExtension/png\">/Actions/ByExtension/png</a>.<br/></p><p>If you looked closely at the action declarations for both text and png, you'd see the following values for the \"View\" action:</p><ul><li><span style=\"font-weight: bold;\">Text</span>:&#160; [Target]?Method=ReadAll&amp;[Arguments], text/plain</li><li><span style=\"font-weight: bold;\">Png</span>:  [Target]?Method=ReadAll&amp;[Arguments], image/png</li></ul><p>What's happening?&#160; Under the hood, when ObjectCloud performs the View action, it behaves as if the URL specified was really the one specified in the View action, with some replacements made.&#160; When it returns data to the browser, it uses the MIME type included after the comma.&#160; The following replacements are supported:</p><ul><li>[Target]:&#160; The actual requested file.</li><li>[Arguments]:&#160; All additional GET arguments.<br/></li></ul><p>Therefore, the following URLs would translate to:</p><ul><li>/myfiles/mytext.text -&gt; /myfiles/mytext.txt?Method=ReadAll</li><li>/myfiles/myimage.png -&gt; /myfiles/mytext.png?Method=ReadAll</li></ul><p>Furthermore, /myfiles/mytext.text gets a MIME type of text/plain and /myfiles/myimage.png gets a MIME type of image/png.</p><p style=\"margin-left: 40px;\"><span style=\"font-weight: bold;\">Note</span>:&#160; <span style=\"font-style: italic;\">You might be wondering what the \"Method=ReadAll\" is.&#160; If you've gone through the </span><a style=\"font-style: italic;\" target=\"\" title=\"\" href=\"/Docs/simple%20storage%20walkthrough.page\">simple storage walkthrough</a><span style=\"font-style: italic;\">, you'll remember that ObjectCloud borrows from Object-Oriented programming in that each file is really a persistent object on the server.&#160; As a result, you think of a text file's \"View\" action as saying to the server, \"When a request comes in to view a text file, just call its ReadAll method and return the results with the 'text/plain' MIME type.\"</span></p><p>Sometimes, Actions can call other files.&#160; This is the case when editing a text file.&#160; For example, the Javascript needed to edit a text file is stored in <a target=\"_blank\" title=\"\" href=\"/Shell/Editors/Weco.wchtml?Method=ReadAll\">/Shell/Editors/Weco.wchtml</a>.&#160; Weco.wchtml uses WebComponents to load the file that it's editing.&#160; Therefore, a text file's edit action must return Weco.wchtml.&#160; This is accomplished by passing the file being edited as an argument to Weco in the action.&#160; Thus with the following edit action for a text file:</p><pre style=\"margin-left: 40px;\">/Shell/Editors/Weco.wchtml<span style=\"background-color: rgb(255, 255, 51);\">?FileName=[Target]</span></pre><p>The following url translates to:</p><ul><li>/myfiles/mytext.txt?Action=Edit -&gt; /Shell/Editors/Weco.wchtml?FileName=/myfiles/mytext.txt<br/></li></ul><h2>Permissions and Overrides<br/></h2><p>Some minimal permission enforcement is provided with Actions, although its primary focus is on providing a smooth user experience.&#160; The <a target=\"_blank\" title=\"\" href=\"/Actions/ActionPermissions\">/Actions/ActionPermissions</a> file dictates the minimum permission needed to perform an action.&#160; If a user doesn't have the minimum permission needed to perform the action, they will see<a xmlns=\"http://www.w3.org/1999/xhtml\" href=\"/DefaultTemplate/permissiondenied.oc\">/DefaultTemplate/permissiondenied.oc</a>&#160;instead of the desired action.</p><p>For example, the following is shown if a user tries to view <a target=\"_blank\" title=\"\" href=\"/Users/root\">/Users/root</a> but doesn't have Read permission:</p><p><img alt=\"\" src=\"/Docs/add%20file%20type/permission%20denied.png\" align=\"none\"/></p><p>However, Action permissions are insecure.&#160; They primarily shield the user from seeing ugly, incomprehensible, or inconvenient error messages.&#160; (For example, without enforcing permissions at the Action level, a user could start editing a text file, make changes, and then see an error when clicking save.)&#160; For debugging purposes, it's possible to disable Action permissions by appending BypassActionPermission=true to the URL as a GET argument:</p><p><img alt=\"\" src=\"/Docs/add%20file%20type/bypassing%20permission.png\" align=\"none\"/></p><p>Without Action permission enforcement, the page appears to work, but there are some incomprehensible errors.</p><p style=\"margin-left: 40px;\"><span style=\"font-weight: bold; background-color: rgb(255, 255, 51);\">Warning</span><span style=\"background-color: rgb(255, 255, 51);\">:&#160; Do not rely on Action permission enforcement for true security!&#160; You must make sure that you correctly grant read and write permissions.&#160; A malicious user can send HTTP requests to ObjectCloud without a web browser!&#160; For example, a user can create their own call to foo.text's WriteAll method without being able to see the editor.</span><br/></p><h1>Add Create New File Support</h1><p>You might wish to allow other users to create new files as they navigate ObjectCloud's file system.&#160; To do this, you must provide a template for ObjectCloud to copy, you need to edit <a target=\"_blank\" title=\"\" href=\"/Shell/Navigation/Directory.json?Action=Edit\">/Shell/Navigation/Directory.json</a></p><p>Template files are placed in <a target=\"_blank\" title=\"\" href=\"/Templates\">/Templates</a>.</p><p>When editing <a target=\"_blank\" title=\"\" href=\"../Shell/Navigation/Directory.json?Action=Edit\">/Shell/Navigation/Directory.json</a>, you will see a JSON array.&#160; Add an object for your file type that has the following fields:</p><ul><li><span style=\"font-weight: bold;\">Template</span>:&#160; The location of the template file</li><li><span style=\"font-weight: bold;\">Extension</span>:&#160; The extension that ObjectCloud will provide when creating the file</li><li><span style=\"font-weight: bold;\">Display</span>:&#160; The name that ObjectCloud displays</li></ul>"}