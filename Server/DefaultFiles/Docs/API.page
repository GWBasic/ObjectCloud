{"Title":"ObjectCloud's Javascript AJAX API","Contents":"\n\u003Cp>ObjectCloud automatically wraps all of its AJAX calls in Javascript. &nbsp;This is to relieve the developer of AJAX's tedium and allow the developer to concentrate on the task at hand. &nbsp;The generated Javascript tends to use JSON, and places arguments into a single JSON object so that older code isn't broken by adding or moving method arguments.\u003C/p>\u003Cp>Each base object type has differing methods. &nbsp;\u003Ca href=\"/Docs/API/Overview.wchtml\" title=\"\" target=\"\">The documentation for each object type is available online.\u003C/a> &nbsp;It is automatically generated each time ObjectCloud is compiled, although some details are incomplete.\u003C/p>\u003Cp>Currently, documentation for server-side Javascript APIs isn't generated. &nbsp;It can be inferred by inspecting the source code in \u003Ca href=\"/Classes\" title=\"\" target=\"\">/Classes\u003C/a>.\u003C/p>\u003Cp>Due to the semantics of the web, a variety of calling conventions are used. &nbsp;The calling conventions are grouped by their base HTTP method.\u003C/p>\u003Cp>The generated Javascript APIs are available in both&nbsp;asynchronous&nbsp;(AJAX) and&nbsp;synchronous&nbsp;(SJAX) versions in both the browser and for server-side JavaScript. &nbsp;For in-browser Javascript,&nbsp;the&nbsp;asynchronous&nbsp;versions are&nbsp;recommended&nbsp;as the&nbsp;synchronous&nbsp;versions will block the browser and make it appear to be unresponsive. &nbsp;For server-side Javascript, the&nbsp;synchronous&nbsp;functions will be easier to work with. &nbsp;Although the asynchronous API is present for server-side Javascript, its use is discouraged as it behaves in a&nbsp;synchronous&nbsp;manner and its behavior may change in the future.\u003C/p>\u003Cp>The&nbsp;synchronous&nbsp;version of all API functions have the \"_Sync\" postfix.\u003C/p>\u003Cmeta charset=\"utf-8\">\u003Ca name=\"GET\">\u003C/a>\u003Ch1>GET\u003C/h1>\u003Cp>In HTTP, GET calls do not change data on the server. &nbsp;GET methods merely return data and can be called many times without changing or impacting data on the server.\u003C/p>\u003Ch2>\u003Cspan class=\"Apple-style-span\" style=\"font-weight: normal; font-size: 16px; \">\u003C/span>\u003C/h2>\u003Ch2 style=\"font-size: 1.25em; font-weight: bold;\">GET\u003C/h2>\u003Cmeta charset=\"utf-8\">\u003Ch3 style=\"font-size: 1.1em; font-weight: bold; \">(Asynchronous)\u003C/h3>\u003Cp>Javascript AJAX methods that use the GET calling convention typically take no arguments. &nbsp;When calling a GET method from Javascript, arguments are passed in the following order:\u003C/p>\u003Cp>\u003C/p>\u003Col>\u003Cli>\u003Cb>Get Arguments\u003C/b>: &nbsp;This is usually an empty object; it's present to allow API changes without breaking old code.\u003C/li>\u003Cli>\u003Cb>Success Callback\u003C/b>: &nbsp;Called if the server returns a status code between 200 and 299\u003C/li>\u003Cli>\u003Cb>Failure Callback\u003C/b>: &nbsp;Called if the server returns any other status code\u003C/li>\u003Cli>\u003Cb>Url Postfix\u003C/b>: &nbsp;This postfix is appended to the AJAX requests URL. &nbsp;It is typically&nbsp;omitted, except in fringe cases where ObjectCloud's default behavior requires tuning.\u003C/li>\u003C/ol>Example:\u003Cp>\u003C/p>\u003Cblockquote>\u003Cpre>nameValuePairs.GetAll(\n   {},  // (An empty object is used to allow easy refactoring of the server-side API)\n   function(fromServer) // This is called on success\n   {\n      // do something with fromServer\n   },\n   function(ajaxTransport) // This is called if there is a failure\n   {\n      alert(ajaxTransport.responseText);\n   });  // The URL Postfix is omitted because it's not used\u003C/pre>\u003Cp>\u003Cb>Note\u003C/b>: &nbsp;\u003Ci>If the success or failure callbacks are omitted, a default callback will be used. &nbsp;This is a message box. &nbsp;Thus, if the failure callback is omitted and an error occurs, the user will see the server's error message. &nbsp;This message is not internationalized and will be in English for the&nbsp;foreseeable&nbsp;future.\u003C/i>\u003C/p>\u003C/blockquote>\u003Ca name=\"GET_application_x_www_form_urlencoded\">\u003C/a>\u003Cmeta charset=\"utf-8\">\u003Ch3 style=\"font-size: 1.1em; font-weight: bold; \">(Synchronous)\u003C/h3>\u003Cp>Javascript SJAX methods that use the GET calling convention typically take no arguments. &nbsp;When calling a GET method from Javascript, arguments are passed in the following order:\u003C/p>\u003Cp>\u003C/p>\u003Col>\u003Cli>\u003Cb>Get Arguments\u003C/b>: &nbsp;This is usually an empty object; it's present to allow API changes without breaking old code.\u003C/li>\u003Cli>\u003Cb>Url Postfix\u003C/b>: &nbsp;This postfix is appended to the AJAX requests URL. &nbsp;It is typically&nbsp;omitted, except in fringe cases where ObjectCloud's default behavior requires tuning.\u003Cbr>\u003C/li>\u003C/ol>\u003Cp>All GET SJAX functions will return the result as a value that Javascript can handle, or throw an exception if there is an error. &nbsp;In the event of an error, the source&nbsp;XMLHttpRequest is thrown as an exception.\u003C/p>Example:\u003Cp>\u003C/p>\u003Cblockquote>\u003Cpre>var pairs = nameValuePairs.GetAll_Sync(\n   {},  // (An empty object is used to allow easy refactoring of the server-side API)\n   });  // The URL Postfix is omitted because it's not used\u003C/pre>\u003C/blockquote>\u003Ca name=\"GET_application_x_www_form_urlencoded\">\u003C/a>\u003Ch3>\u003Cspan class=\"Apple-style-span\" style=\"font-size: 20px; \">GET_application_x_www_form_urlencoded\u003C/span>\u003Cbr>\u003C/h3>\u003Cmeta charset=\"utf-8\">\u003Ch3 style=\"font-size: 1.1em; font-weight: bold; \">(Asynchronous)\u003C/h3>\u003Cp>Javascript AJAX methods that use the GET_application_x_www_form_urlencoded calling convention take arguments as a JSON object. &nbsp;When calling a GET_application_x_www_form_urlencoded method from Javascript, arguments are passed in the following order:\u003C/p>\u003Cp>\u003C/p>\u003Col>\u003Cli>\u003Cb>Get Arguments\u003C/b>: &nbsp;A JSON object with each argument as a named value.\u003C/li>\u003Cli>\u003Cb>Success Callback\u003C/b>: &nbsp;Called if the server returns a status code between 200 and 299\u003C/li>\u003Cli>\u003Cb>Failure Callback\u003C/b>: &nbsp;Called if the server returns any other status code\u003C/li>\u003Cli>\u003Cb>Url Postfix\u003C/b>: &nbsp;This postfix is appended to the AJAX requests URL. &nbsp;It is typically&nbsp;omitted, except in fringe cases where ObjectCloud's default behavior requires tuning.\u003C/li>\u003C/ol>Example:\u003Cp>\u003C/p>\u003Cblockquote>\u003Cpre>myDirectory.ListNewestFiles(\n   {\n      maxToReturn: 123\n   },\n   function(filesFromServer) // This is called on success\n   {\n      // do something with filesFromServer\n   },\n   function(ajaxTransport) // This is called if there is a failure\n   {\n      alert(ajaxTransport.responseText);\n   });  // The URL Postfix is omitted because it's not used\u003C/pre>\u003C/blockquote>\u003Cblockquote>\u003Cp>\u003Cb>Note\u003C/b>: &nbsp;\u003Ci>If the success or failure callbacks are omitted, a default callback will be used. &nbsp;This is a message box. &nbsp;Thus, if the failure callback is omitted and an error occurs, the user will see the server's error message. &nbsp;This message is not internationalized and will be in English for the&nbsp;foreseeable&nbsp;future.\u003C/i>\u003C/p>\u003C/blockquote>\u003Cmeta charset=\"utf-8\">\u003Ch3 style=\"font-size: 1.1em; font-weight: bold; \">(Synchronous)\u003C/h3>\u003Cp>Javascript SJAX methods that use the GET_application_x_www_form_urlencoded calling convention take arguments as a JSON object. &nbsp;When calling a GET_application_x_www_form_urlencoded method from Javascript, arguments are passed in the following order:\u003C/p>\u003Cp>\u003C/p>\u003Col>\u003Cli>\u003Cb>Get Arguments\u003C/b>: &nbsp;A JSON object with each argument as a named value.\u003C/li>\u003Cli>\u003Cb>Url Postfix\u003C/b>: &nbsp;This postfix is appended to the AJAX requests URL. &nbsp;It is typically&nbsp;omitted, except in fringe cases where ObjectCloud's default behavior requires tuning.\u003Cbr>\u003C/li>\u003C/ol>\u003Cmeta charset=\"utf-8\">\u003Cp>All GET SJAX functions will return the result as a value that Javascript can handle, or throw an exception if there is an error. &nbsp;In the event of an error, the source&nbsp;XMLHttpRequest is thrown as an exception.\u003C/p>Example:\u003Cp>\u003C/p>\u003Cblockquote>\u003Cpre>var files = myDirectory.ListNewestFiles(\n   {\n      maxToReturn: 123\n   });  // The URL Postfix is omitted because it's not used\u003C/pre>\u003C/blockquote>\u003Ch3>\u003Cspan class=\"Apple-style-span\" style=\"font-size: 24px; \">POST\u003C/span>\u003Cbr>\u003C/h3>\u003Cp>In HTTP, POST calls can change data on the server. &nbsp;Care must be used when calling an AJAX method that uses the POST HTTP method because it could impact data on the server.\u003C/p>\u003Ca name=\"POST_application_x_www_form_urlencoded\">\u003C/a>\u003Ch2>POST_application_x_www_form_urlencoded\u003C/h2>\u003Cmeta charset=\"utf-8\">\u003Ch3 style=\"font-size: 1.1em; font-weight: bold; \">(Asynchronous)\u003C/h3>\u003Cp>\u003C/p>\u003Cp>Javascript AJAX methods that use the POST_application_x_www_form_urlencoded calling convention take arguments as a JSON object. &nbsp;When calling a POST_application_x_www_form_urlencoded method from Javascript, arguments are passed in the following order:\u003C/p>\u003Cp>\u003C/p>\u003Col>\u003Cli>\u003Cb>Post Arguments\u003C/b>: &nbsp;A JSON object with each argument as a named value.\u003C/li>\u003Cli>\u003Cb>Success Callback\u003C/b>: &nbsp;Called if the server returns a status code between 200 and 299\u003C/li>\u003Cli>\u003Cb>Failure Callback\u003C/b>: &nbsp;Called if the server returns any other status code\u003C/li>\u003Cli>\u003Cb>Url Postfix\u003C/b>: &nbsp;This postfix is appended to the AJAX requests URL. &nbsp;It is typically&nbsp;omitted, except in fringe cases where ObjectCloud's default behavior requires tuning.\u003C/li>\u003C/ol>Example:\u003Cp>\u003C/p>\u003Cblockquote class=\"webkit-indent-blockquote\" style=\"border-top-width: medium; border-right-width: medium; border-bottom-width: medium; border-left-width: medium; border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; border-color: initial; margin-top: 0pt; margin-right: 0pt; margin-bottom: 0pt; margin-left: 40px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \">\u003Cpre>myDirectory.DeleteFile(\n   {\n      FileName: \"filetodelete.page\"\n   },\n   function(response) // This is called on success\n   {\n      alert(response);\n   },\n   function(ajaxTransport) // This is called if there is a failure\n   {\n      alert(ajaxTransport.responseText);\n   });  // The URL Postfix is omitted because it's not used\u003C/pre>\u003C/blockquote>\u003Cpre>\u003Cspan class=\"Apple-style-span\" style=\"font-family: Times; white-space: normal; font-size: 16px; \">\u003Cb>Note\u003C/b>: &nbsp;\u003Ci>If the success or failure callbacks are omitted, a default callback will be used. &nbsp;This is a message box. &nbsp;Thus, if the failure callback is omitted and an error occurs, the user will see the server's error message. &nbsp;This message is not internationalized and will be in English for the&nbsp;foreseeable&nbsp;future.\u003C/i>\u003C/span>\u003Cbr>\u003C/pre>\u003Cp>\u003C/p>\u003Cp>\u003C/p>\u003Ca name=\"POST_string\">\u003C/a>\u003Cmeta charset=\"utf-8\">\u003Ch3 style=\"font-size: 1.1em; font-weight: bold; \">(Synchronous)\u003C/h3>\u003Cp>\u003C/p>\u003Cp>Javascript SJAX methods that use the POST_application_x_www_form_urlencoded calling convention take arguments as a JSON object. &nbsp;When calling a POST_application_x_www_form_urlencoded method from Javascript, arguments are passed in the following order:\u003C/p>\u003Cp>\u003C/p>\u003Col>\u003Cli>\u003Cb>Post Arguments\u003C/b>: &nbsp;A JSON object with each argument as a named value.\u003C/li>\u003Cli>\u003Cb>Url Postfix\u003C/b>: &nbsp;This postfix is appended to the AJAX requests URL. &nbsp;It is typically&nbsp;omitted, except in fringe cases where ObjectCloud's default behavior requires tuning.\u003Cbr>\u003C/li>\u003C/ol>\u003Cmeta charset=\"utf-8\">\u003Cp>All POST SJAX functions will return the result as a value that Javascript can handle, or throw an exception if there is an error. &nbsp;In the event of an error, the source&nbsp;XMLHttpRequest is thrown as an exception. &nbsp;In some cases, where the post function merely returns an indication of success.\u003C/p>Example:\u003Cp>\u003C/p>\u003Cblockquote class=\"webkit-indent-blockquote\" style=\"border-top-width: medium; border-right-width: medium; border-bottom-width: medium; border-left-width: medium; border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; border-color: initial; margin-top: 0pt; margin-right: 0pt; margin-bottom: 0pt; margin-left: 40px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \">\u003Cfont class=\"Apple-style-span\" face=\"monospace\" size=\"3\">\u003Cspan class=\"Apple-style-span\" style=\"font-size: 13px; white-space: pre;\">try\n{\n   myDirectory.DeleteFile_Sync(\n      {\n         FileName: \"filetodelete.page\"\n      });  // The URL Postfix is omitted because it's not used\n}\ncatch (exception)\n{\n   // handle exception\n}\u003C/span>\u003C/font>\u003C/blockquote>\u003Cblockquote class=\"webkit-indent-blockquote\" style=\"border-top-width: medium; border-right-width: medium; border-bottom-width: medium; border-left-width: medium; border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; border-color: initial; margin-top: 0pt; margin-right: 0pt; margin-bottom: 0pt; margin-left: 40px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \">\u003Cfont class=\"Apple-style-span\" face=\"monospace\" size=\"3\">\u003Cspan class=\"Apple-style-span\" style=\"font-size: 13px; white-space: pre;\">\u003Cbr>\u003C/span>\u003C/font>\u003C/blockquote>\u003Cspan class=\"Apple-style-span\" style=\"font-size: 20px; font-weight: bold; \">POST_string\u003C/span>\u003Cdiv>\u003Cmeta charset=\"utf-8\">\u003Ch3 style=\"font-size: 1.1em; font-weight: bold; \">(Asynchronous)\u003C/h3>\u003Cdiv>\u003Cp>Javascript AJAX methods that use the&nbsp;Javascript AJAX methods that use the POST_string calling convention take a single string as an argument. &nbsp;This string is the POST payload of the HTTP request. &nbsp;When calling a GET_application_x_www_form_urlencoded method from Javascript, arguments are passed in the following order:\u003C/p>\u003Cp>\u003C/p>\u003Col>\u003Cli>\u003Cb>String\u003C/b>: &nbsp;The string that is the HTTP payload.\u003C/li>\u003Cli>\u003Cb>Success Callback\u003C/b>: &nbsp;Called if the server returns a status code between 200 and 299\u003C/li>\u003Cli>\u003Cb>Failure Callback\u003C/b>: &nbsp;Called if the server returns any other status code\u003C/li>\u003Cli>\u003Cb>Url Postfix\u003C/b>: &nbsp;This postfix is appended to the AJAX requests URL. &nbsp;It is typically&nbsp;omitted, except in fringe cases where ObjectCloud's default behavior requires tuning.\u003C/li>\u003C/ol>Example:\u003Cp>\u003C/p>\u003Cpre style=\"margin-left: 40px; \">binaryFile.WriteAllBase64(\n   imageAsABase64String, // JSON is not used when the entire POST body is a string\n   function(response) // This is called on success\n   {\n      alert(response);\n   },\n   function(ajaxTransport) // This is called if there is a failure\n   {\n      alert(ajaxTransport.responseText);\n   });  // The URL Postfix is omitted because it's not used\u003C/pre>\u003Cdiv style=\"margin-left: 40px; \">\u003Cb>Note\u003C/b>: &nbsp;\u003Ci>If the success or failure callbacks are omitted, a default callback will be used. &nbsp;This is a message box. &nbsp;Thus, if the failure callback is omitted and an error occurs, the user will see the server's error message. &nbsp;This message is not internationalized and will be in English for the&nbsp;foreseeable&nbsp;future.\u003C/i>\u003Cbr>\u003C/div>\u003C/div>\u003Ca name=\"POST_JSON\">\u003C/a>\u003Cmeta charset=\"utf-8\">\u003Ch3 style=\"font-size: 1.1em; font-weight: bold; \">(Synchronous)\u003C/h3>\u003Cdiv>\u003Cp>Javascript SJAX methods that use the POST_string calling convention take a single string as an argument. &nbsp;This string is the POST payload of the HTTP request. &nbsp;When calling a GET_application_x_www_form_urlencoded method from Javascript, arguments are passed in the following order:\u003C/p>\u003Cp>\u003C/p>\u003Col>\u003Cli>\u003Cb>String\u003C/b>: &nbsp;The string that is the HTTP payload.\u003C/li>\u003Cli>\u003Cb>Url Postfix\u003C/b>: &nbsp;This postfix is appended to the AJAX requests URL. &nbsp;It is typically&nbsp;omitted, except in fringe cases where ObjectCloud's default behavior requires tuning.\u003Cbr>\u003C/li>\u003C/ol>\u003Cmeta charset=\"utf-8\">\u003Cp>All POST SJAX functions will return the result as a value that Javascript can handle, or throw an exception if there is an error. &nbsp;In the event of an error, the source&nbsp;XMLHttpRequest is thrown as an exception. &nbsp;In some cases, where the post function merely returns an indication of success.\u003C/p>Example:\u003Cp>\u003C/p>\u003Cpre style=\"margin-left: 40px; \">try\n{\n   binaryFile.WriteAllBase64_Sync(\n      imageAsABase64String, // JSON is not used when the entire POST body is a string\n      });  // The URL Postfix is omitted because it's not used\n}\ncatch (exception)\n{\n   // handle exception\n}\u003C/pre>\u003C/div>\u003Ca name=\"POST_JSON\">\u003C/a>\u003Ch3>\u003Cspan class=\"Apple-style-span\" style=\"font-size: 20px; \">POST_JSON\u003C/span>\u003Cbr>\u003C/h3>\u003Ch3>(Asynchronous)\u003C/h3>\u003Cp>\u003C/p>\u003Cp>Javascript AJAX methods that use the POST_JSON calling convention take a single object that will be serialized to JSON and be the POSTed data. &nbsp;When calling a POST_JSON method from Javascript, arguments are passed in the following order:\u003C/p>\u003Cp>\u003C/p>\u003Col>\u003Cli>\u003Cb>JSON object\u003C/b>: &nbsp;Any valid Javascript value that can be serialized to JSON. &nbsp;This will be the POST body.\u003C/li>\u003Cli>\u003Cb>Success Callback\u003C/b>: &nbsp;Called if the server returns a status code between 200 and 299\u003C/li>\u003Cli>\u003Cb>Failure Callback\u003C/b>: &nbsp;Called if the server returns any other status code\u003C/li>\u003Cli>\u003Cb>Url Postfix\u003C/b>: &nbsp;This postfix is appended to the AJAX requests URL. &nbsp;It is typically&nbsp;omitted, except in fringe cases where ObjectCloud's default behavior requires tuning.\u003C/li>\u003C/ol>Example:\u003Cp>\u003C/p>\u003Cpre style=\"margin-left: 40px;\">nameValuePairs.SetAllJson(\n   {\n      Name: \"joe\",\u003Cbr>      Occupation: \"plumber\"\u003Cbr>  &nbsp;},\n   function(response) // This is called on success\n   {\n      alert(response);\n   },\n   function(ajaxTransport) // This is called if there is a failure\n   {\n      alert(ajaxTransport.responseText);\n   });  // The URL Postfix is omitted because it's not used\u003C/pre>\u003Cdiv style=\"margin-left: 40px;\">\u003Cb>Note\u003C/b>: &nbsp;\u003Ci>If the success or failure callbacks are omitted, a default callback will be used. &nbsp;This is a message box. &nbsp;Thus, if the failure callback is omitted and an error occurs, the user will see the server's error message. &nbsp;This message is not internationalized and will be in English for the&nbsp;foreseeable&nbsp;future.\u003C/i>\u003Cbr>\u003C/div>\u003Cp>\u003Cmeta charset=\"utf-8\">\u003Ch3 style=\"font-size: 1.1em; font-weight: bold; \">(Synchronous)\u003C/h3>\u003Cp>\u003C/p>\u003Cp>Javascript SJAX methods that use the POST_JSON calling convention take a single object that will be serialized to JSON and be the POSTed data. &nbsp;When calling a POST_JSON method from Javascript, arguments are passed in the following order:\u003C/p>\u003Cp>\u003C/p>\u003Col>\u003Cli>\u003Cb>JSON object\u003C/b>: &nbsp;Any valid Javascript value that can be serialized to JSON. &nbsp;This will be the POST body.\u003C/li>\u003Cli>\u003Cb>Url Postfix\u003C/b>: &nbsp;This postfix is appended to the AJAX requests URL. &nbsp;It is typically&nbsp;omitted, except in fringe cases where ObjectCloud's default behavior requires tuning.\u003Cbr>\u003C/li>\u003C/ol>\u003Cmeta charset=\"utf-8\">\u003Cp>All POST SJAX functions will return the result as a value that Javascript can handle, or throw an exception if there is an error. &nbsp;In the event of an error, the source&nbsp;XMLHttpRequest is thrown as an exception. &nbsp;In some cases, where the post function merely returns an indication of success.\u003C/p>Example:\u003Cp>\u003C/p>\u003Cpre style=\"margin-left: 40px; \">try\n{\n   nameValuePairs.SetAllJson(\n      {\n         Name: \"joe\",\n         Occupation: \"plumber\"\n      });  // The URL Postfix is omitted because it's not used\n}\ncatch (exception)\n{\n   // handle exception\n}\u003Cbr>\u003C/pre>\u003Cdiv style=\"margin-left: 40px; \">\u003Cb>\u003Cbr>\u003C/b>\u003C/div>\u003C/p>\u003C/div>"}