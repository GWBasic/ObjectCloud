{"Title":"ObjectCloud's Javascript AJAX API","Contents":"\n<p>All files in ObjectCloud have an object-oriented API. The specific methods supported vary depending on the base file type. Each of the supported file types are in&#160;<a xmlns=\"http://www.w3.org/1999/xhtml\" href=\"/Docs/API/Overview.wchtml\">ObjectCloud's API's documentation</a>.</p><p>The Javascript API is built to run over AJAX, and thus has some semantic variations based on how HTTP is being used. Functions that use GET, which are for reads, are slightly different then functions that use POST, which is for writes, updates, and deletes.</p><p>Generally-speaking, requests that use the GET verb are&#160;cacheable&#160;and do not change state on the server. Requests that use POST aren't cacheable and change server state. This difference becomes important when the browser accesses ObjectCloud through a proxy or cache.</p><p>The generated Javascript APIs are available in both&#160;asynchronous&#160;(AJAX) and&#160;synchronous&#160;(SJAX) versions. For in-browser Javascript,&#160;the&#160;asynchronous&#160;versions are&#160;recommended&#160;as the&#160;synchronous&#160;versions will block the browser and make it appear to be unresponsive.&#160;The&#160;synchronous&#160;version of all API functions have the \"_Sync\" postfix.</p><p></p><h1>Loading an Object's Javascript Wrapper</h1><h2>Within the templating system</h2><p>When using ObjectCloud's templating system, (.oc files,) Javascript wrappers are loaded using a custom server-side tag.</p><p>The following example opens /Users/me/myfile.txt and puts it into a variable named myfile:</p><blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><pre>&lt;oc:open filename=\"/Users/me/myfile.txt\" varname=\"myfile\" /&gt;</pre></blockquote><p>The following examples opens the file specified with the FileName GET argument:</p><blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><pre>&lt;oc:open filename=\"[_FileName_]\" varname=\"myfile\" /&gt;</pre></blockquote><h2>From ordinary HTML</h2><p>When using ordinary HTML, ObjectCloud's Javascript wrappers are loaded with ordinary script tags. First, ObjectCloud's AJAX wrapper and JSON serializer must be loaded, and then the wrappers for the specific objects are loaded.</p><blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><pre>&lt;script src=\"/API/AJAX.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;script src=\"/API/json2.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;script src=\"/Users/UserDB?Method=GetJSW&amp;assignToVariable=UserDB\" type=\"text/javascript\"&gt;&lt;/script&gt;</pre></blockquote><a name=\"GET\"></a><h1>GET</h1><p>In HTTP, GET calls do not change data on the server. GET methods merely return data and can be called many times without changing or impacting data on the server.</p><h2></h2><h2 style=\"font-size: 1.25em; font-weight: bold;\">GET</h2><h3 style=\"font-size: 1.1em; font-weight: bold; \">(Asynchronous)</h3><p>Javascript AJAX methods that use the GET calling convention typically take no arguments. When calling a GET method from Javascript, arguments are passed in the following order:</p><p></p><ol><li><b>Get Arguments</b>: This is usually an empty object; it's present to allow API changes without breaking old code.</li><li><b>Success Callback</b>: Called if the server returns a status code between 200 and 299</li><li><b>Failure Callback</b>: Called if the server returns any other status code</li><li><b>Url Postfix</b>: This postfix is appended to the AJAX requests URL. It is typically&#160;omitted, except in fringe cases where ObjectCloud's default behavior requires tuning.</li></ol>Example:<p></p><blockquote><pre>nameValuePairs.GetAll(\n   {},  // (An empty object is used to allow easy refactoring of the server-side API)\n   function(fromServer) // This is called on success\n   {\n      // do something with fromServer\n   },\n   function(ajaxTransport) // This is called if there is a failure\n   {\n      alert(ajaxTransport.responseText);\n   });  // The URL Postfix is omitted because it's not used</pre><p><b>Note</b>: <i>If the success or failure callbacks are omitted, a default callback will be used. This is a message box. Thus, if the failure callback is omitted and an error occurs, the user will see the server's error message. This message is not internationalized and will be in English for the&#160;foreseeable&#160;future.</i></p></blockquote><a name=\"GET_application_x_www_form_urlencoded\"></a><h3 style=\"font-size: 1.1em; font-weight: bold; \">(Synchronous)</h3><p>Javascript SJAX methods that use the GET calling convention typically take no arguments. When calling a GET method from Javascript, arguments are passed in the following order:</p><p></p><ol><li><b>Get Arguments</b>: This is usually an empty object; it's present to allow API changes without breaking old code.</li><li><b>Url Postfix</b>: This postfix is appended to the AJAX requests URL. It is typically&#160;omitted, except in fringe cases where ObjectCloud's default behavior requires tuning.<br/></li></ol><p>All GET SJAX functions will return the result as a value that Javascript can handle, or throw an exception if there is an error. In the event of an error, the source&#160;XMLHttpRequest is thrown as an exception.</p>Example:<p></p><blockquote><pre>var pairs = nameValuePairs.GetAll_Sync(\n   {},  // (An empty object is used to allow easy refactoring of the server-side API)\n   });  // The URL Postfix is omitted because it's not used</pre></blockquote><a name=\"GET_application_x_www_form_urlencoded\"></a><h3><span class=\"Apple-style-span\" style=\"font-size: 20px; \">GET_application_x_www_form_urlencoded</span><br/></h3><h3 style=\"font-size: 1.1em; font-weight: bold; \">(Asynchronous)</h3><p>Javascript AJAX methods that use the GET_application_x_www_form_urlencoded calling convention take arguments as a JSON object. When calling a GET_application_x_www_form_urlencoded method from Javascript, arguments are passed in the following order:</p><p></p><ol><li><b>Get Arguments</b>: A JSON object with each argument as a named value.</li><li><b>Success Callback</b>: Called if the server returns a status code between 200 and 299</li><li><b>Failure Callback</b>: Called if the server returns any other status code</li><li><b>Url Postfix</b>: This postfix is appended to the AJAX requests URL. It is typically&#160;omitted, except in fringe cases where ObjectCloud's default behavior requires tuning.</li></ol>Example:<p></p><blockquote><pre>myDirectory.ListNewestFiles(\n   {\n      maxToReturn: 123\n   },\n   function(filesFromServer) // This is called on success\n   {\n      // do something with filesFromServer\n   },\n   function(ajaxTransport) // This is called if there is a failure\n   {\n      alert(ajaxTransport.responseText);\n   });  // The URL Postfix is omitted because it's not used</pre></blockquote><blockquote><p><b>Note</b>: <i>If the success or failure callbacks are omitted, a default callback will be used. This is a message box. Thus, if the failure callback is omitted and an error occurs, the user will see the server's error message. This message is not internationalized and will be in English for the&#160;foreseeable&#160;future.</i></p></blockquote><h3 style=\"font-size: 1.1em; font-weight: bold; \">(Synchronous)</h3><p>Javascript SJAX methods that use the GET_application_x_www_form_urlencoded calling convention take arguments as a JSON object. When calling a GET_application_x_www_form_urlencoded method from Javascript, arguments are passed in the following order:</p><p></p><ol><li><b>Get Arguments</b>: A JSON object with each argument as a named value.</li><li><b>Url Postfix</b>: This postfix is appended to the AJAX requests URL. It is typically&#160;omitted, except in fringe cases where ObjectCloud's default behavior requires tuning.<br/></li></ol><p>All GET SJAX functions will return the result as a value that Javascript can handle, or throw an exception if there is an error. In the event of an error, the source&#160;XMLHttpRequest is thrown as an exception.</p>Example:<p></p><blockquote><pre>var files = myDirectory.ListNewestFiles(\n   {\n      maxToReturn: 123\n   });  // The URL Postfix is omitted because it's not used</pre></blockquote><h1>POST</h1><p>In HTTP, POST calls can change data on the server. Care must be used when calling an AJAX method that uses the POST HTTP method because it could impact data on the server.</p><a name=\"POST_application_x_www_form_urlencoded\"></a><h2>POST_application_x_www_form_urlencoded</h2><h3 style=\"font-size: 1.1em; font-weight: bold; \">(Asynchronous)</h3><p></p><p>Javascript AJAX methods that use the POST_application_x_www_form_urlencoded calling convention take arguments as a JSON object. When calling a POST_application_x_www_form_urlencoded method from Javascript, arguments are passed in the following order:</p><p></p><ol><li><b>Post Arguments</b>: A JSON object with each argument as a named value.</li><li><b>Success Callback</b>: Called if the server returns a status code between 200 and 299</li><li><b>Failure Callback</b>: Called if the server returns any other status code</li><li><b>Url Postfix</b>: This postfix is appended to the AJAX requests URL. It is typically&#160;omitted, except in fringe cases where ObjectCloud's default behavior requires tuning.</li></ol>Example:<p></p><blockquote class=\"webkit-indent-blockquote\" style=\"border-top-width: medium; border-right-width: medium; border-bottom-width: medium; border-left-width: medium; border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; border-color: initial; margin-top: 0pt; margin-right: 0pt; margin-bottom: 0pt; margin-left: 40px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><pre>myDirectory.DeleteFile(\n   {\n      FileName: \"filetodelete.page\"\n   },\n   function(response) // This is called on success\n   {\n      alert(response);\n   },\n   function(ajaxTransport) // This is called if there is a failure\n   {\n      alert(ajaxTransport.responseText);\n   });  // The URL Postfix is omitted because it's not used</pre></blockquote><pre><span class=\"Apple-style-span\" style=\"font-family: Times; white-space: normal; font-size: 16px; \"><b>Note</b>: <i>If the success or failure callbacks are omitted, a default callback will be used. This is a message box. Thus, if the failure callback is omitted and an error occurs, the user will see the server's error message. This message is not internationalized and will be in English for the&#160;foreseeable&#160;future.</i></span><br/></pre><p></p><p></p><a name=\"POST_string\"></a><h3 style=\"font-size: 1.1em; font-weight: bold; \">(Synchronous)</h3><p></p><p>Javascript SJAX methods that use the POST_application_x_www_form_urlencoded calling convention take arguments as a JSON object. When calling a POST_application_x_www_form_urlencoded method from Javascript, arguments are passed in the following order:</p><p></p><ol><li><b>Post Arguments</b>: A JSON object with each argument as a named value.</li><li><b>Url Postfix</b>: This postfix is appended to the AJAX requests URL. It is typically&#160;omitted, except in fringe cases where ObjectCloud's default behavior requires tuning.<br/></li></ol><p>All POST SJAX functions will return the result as a value that Javascript can handle, or throw an exception if there is an error. In the event of an error, the source&#160;XMLHttpRequest is thrown as an exception. In some cases, where the post function merely returns an indication of success.</p>Example:<p></p><blockquote class=\"webkit-indent-blockquote\" style=\"border-top-width: medium; border-right-width: medium; border-bottom-width: medium; border-left-width: medium; border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; border-color: initial; margin-top: 0pt; margin-right: 0pt; margin-bottom: 0pt; margin-left: 40px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font class=\"Apple-style-span\" face=\"monospace\" size=\"3\"><span class=\"Apple-style-span\" style=\"font-size: 13px; white-space: pre;\">try\n{\n   myDirectory.DeleteFile_Sync(\n      {\n         FileName: \"filetodelete.page\"\n      });  // The URL Postfix is omitted because it's not used\n}\ncatch (exception)\n{\n   // handle exception\n}</span></font></blockquote><blockquote class=\"webkit-indent-blockquote\" style=\"border-top-width: medium; border-right-width: medium; border-bottom-width: medium; border-left-width: medium; border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; border-color: initial; margin-top: 0pt; margin-right: 0pt; margin-bottom: 0pt; margin-left: 40px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font class=\"Apple-style-span\" face=\"monospace\" size=\"3\"><span class=\"Apple-style-span\" style=\"font-size: 13px; white-space: pre;\"><br/></span></font></blockquote><span class=\"Apple-style-span\" style=\"font-size: 20px; font-weight: bold; \"><h2>POST_string</h2></span><div><h3 style=\"font-size: 1.1em; font-weight: bold; \">(Asynchronous)</h3><div><p>Javascript AJAX methods that use the&#160;Javascript AJAX methods that use the POST_string calling convention take a single string as an argument. This string is the POST payload of the HTTP request. When calling a GET_application_x_www_form_urlencoded method from Javascript, arguments are passed in the following order:</p><p></p><ol><li><b>String</b>: The string that is the HTTP payload.</li><li><b>Success Callback</b>: Called if the server returns a status code between 200 and 299</li><li><b>Failure Callback</b>: Called if the server returns any other status code</li><li><b>Url Postfix</b>: This postfix is appended to the AJAX requests URL. It is typically&#160;omitted, except in fringe cases where ObjectCloud's default behavior requires tuning.</li></ol>Example:<p></p><pre style=\"margin-left: 40px; \">binaryFile.WriteAllBase64(\n   imageAsABase64String, // JSON is not used when the entire POST body is a string\n   function(response) // This is called on success\n   {\n      alert(response);\n   },\n   function(ajaxTransport) // This is called if there is a failure\n   {\n      alert(ajaxTransport.responseText);\n   });  // The URL Postfix is omitted because it's not used</pre><div style=\"margin-left: 40px; \"><b>Note</b>: <i>If the success or failure callbacks are omitted, a default callback will be used. This is a message box. Thus, if the failure callback is omitted and an error occurs, the user will see the server's error message. This message is not internationalized and will be in English for the&#160;foreseeable&#160;future.</i><br/></div></div><a name=\"POST_JSON\"></a><h3 style=\"font-size: 1.1em; font-weight: bold; \">(Synchronous)</h3><div><p>Javascript SJAX methods that use the POST_string calling convention take a single string as an argument. This string is the POST payload of the HTTP request. When calling a GET_application_x_www_form_urlencoded method from Javascript, arguments are passed in the following order:</p><p></p><ol><li><b>String</b>: The string that is the HTTP payload.</li><li><b>Url Postfix</b>: This postfix is appended to the AJAX requests URL. It is typically&#160;omitted, except in fringe cases where ObjectCloud's default behavior requires tuning.<br/></li></ol><p>All POST SJAX functions will return the result as a value that Javascript can handle, or throw an exception if there is an error. In the event of an error, the source&#160;XMLHttpRequest is thrown as an exception. In some cases, where the post function merely returns an indication of success.</p>Example:<p></p><pre style=\"margin-left: 40px; \">try\n{\n   binaryFile.WriteAllBase64_Sync(\n      imageAsABase64String, // JSON is not used when the entire POST body is a string\n      });  // The URL Postfix is omitted because it's not used\n}\ncatch (exception)\n{\n   // handle exception\n}</pre></div><a name=\"POST_JSON\"></a><h2>POST_JSON</h2><h3>(Asynchronous)</h3><p></p><p>Javascript AJAX methods that use the POST_JSON calling convention take a single object that will be serialized to JSON and be the POSTed data. When calling a POST_JSON method from Javascript, arguments are passed in the following order:</p><p></p><ol><li><b>JSON object</b>: Any valid Javascript value that can be serialized to JSON. This will be the POST body.</li><li><b>Success Callback</b>: Called if the server returns a status code between 200 and 299</li><li><b>Failure Callback</b>: Called if the server returns any other status code</li><li><b>Url Postfix</b>: This postfix is appended to the AJAX requests URL. It is typically&#160;omitted, except in fringe cases where ObjectCloud's default behavior requires tuning.</li></ol>Example:<p></p><pre style=\"margin-left: 40px;\">nameValuePairs.SetAllJson(\n   {\n      Name: \"joe\",<br/>      Occupation: \"plumber\"<br/>  },\n   function(response) // This is called on success\n   {\n      alert(response);\n   },\n   function(ajaxTransport) // This is called if there is a failure\n   {\n      alert(ajaxTransport.responseText);\n   });  // The URL Postfix is omitted because it's not used</pre><div style=\"margin-left: 40px;\"><b>Note</b>: <i>If the success or failure callbacks are omitted, a default callback will be used. This is a message box. Thus, if the failure callback is omitted and an error occurs, the user will see the server's error message. This message is not internationalized and will be in English for the&#160;foreseeable&#160;future.</i><br/></div><p></p><h3 style=\"font-size: 1.1em; font-weight: bold; \">(Synchronous)</h3><p></p><p>Javascript SJAX methods that use the POST_JSON calling convention take a single object that will be serialized to JSON and be the POSTed data. When calling a POST_JSON method from Javascript, arguments are passed in the following order:</p><p></p><ol><li><b>JSON object</b>: Any valid Javascript value that can be serialized to JSON. This will be the POST body.</li><li><b>Url Postfix</b>: This postfix is appended to the AJAX requests URL. It is typically&#160;omitted, except in fringe cases where ObjectCloud's default behavior requires tuning.<br/></li></ol><p>All POST SJAX functions will return the result as a value that Javascript can handle, or throw an exception if there is an error. In the event of an error, the source&#160;XMLHttpRequest is thrown as an exception. In some cases, where the post function merely returns an indication of success.</p>Example:<p></p><pre style=\"margin-left: 40px; \">try\n{\n   nameValuePairs.SetAllJson(\n      {\n         Name: \"joe\",\n         Occupation: \"plumber\"\n      });  // The URL Postfix is omitted because it's not used\n}\ncatch (exception)\n{\n   // handle exception\n}<br/></pre><div style=\"margin-left: 40px; \"><b><br/></b></div><p></p></div>"}