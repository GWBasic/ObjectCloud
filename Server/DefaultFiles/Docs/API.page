{"Title":"ObjectCloud's Javascript AJAX API","Contents":"\n<p>ObjectCloud automatically wraps all of its AJAX calls in Javascript. &#160;This is to relieve the developer of AJAX's tedium and allow the developer to concentrate on the task at hand. &#160;The generated Javascript tends to use JSON, and places arguments into a single JSON object so that older code isn't broken by adding or moving method arguments.</p><p>Each base object type has differing methods. &#160;<a href=\"/Docs/API/Overview.wchtml\" title=\"\" target=\"\">The documentation for each object type is available online.</a> &#160;It is automatically generated each time ObjectCloud is compiled, although some details are incomplete.</p><p>Currently, documentation for server-side Javascript APIs isn't generated. &#160;It can be inferred by inspecting the source code in <a href=\"/Classes\" title=\"\" target=\"\">/Classes</a>.</p><p>Due to the semantics of the web, a variety of calling conventions are used. &#160;The calling conventions are grouped by their base HTTP method.</p><p>The generated Javascript APIs are available in both&#160;asynchronous&#160;(AJAX) and&#160;synchronous&#160;(SJAX) versions in both the browser and for server-side JavaScript. &#160;For in-browser Javascript,&#160;the&#160;asynchronous&#160;versions are&#160;recommended&#160;as the&#160;synchronous&#160;versions will block the browser and make it appear to be unresponsive. &#160;For server-side Javascript, the&#160;synchronous&#160;functions will be easier to work with. &#160;Although the asynchronous API is present for server-side Javascript, its use is discouraged as it behaves in a&#160;synchronous&#160;manner and its behavior may change in the future.</p><p>The&#160;synchronous&#160;version of all API functions have the \"_Sync\" postfix.</p><a name=\"GET\"></a><h1>GET</h1><p>In HTTP, GET calls do not change data on the server. &#160;GET methods merely return data and can be called many times without changing or impacting data on the server.</p><h2><span class=\"Apple-style-span\" style=\"font-weight: normal; font-size: 16px; \"></span></h2><h2 style=\"font-size: 1.25em; font-weight: bold;\">GET</h2><h3 style=\"font-size: 1.1em; font-weight: bold; \">(Asynchronous)</h3><p>Javascript AJAX methods that use the GET calling convention typically take no arguments. &#160;When calling a GET method from Javascript, arguments are passed in the following order:</p><p></p><ol><li><b>Get Arguments</b>: &#160;This is usually an empty object; it's present to allow API changes without breaking old code.</li><li><b>Success Callback</b>: &#160;Called if the server returns a status code between 200 and 299</li><li><b>Failure Callback</b>: &#160;Called if the server returns any other status code</li><li><b>Url Postfix</b>: &#160;This postfix is appended to the AJAX requests URL. &#160;It is typically&#160;omitted, except in fringe cases where ObjectCloud's default behavior requires tuning.</li></ol>Example:<p></p><blockquote><pre>nameValuePairs.GetAll(\n   {},  // (An empty object is used to allow easy refactoring of the server-side API)\n   function(fromServer) // This is called on success\n   {\n      // do something with fromServer\n   },\n   function(ajaxTransport) // This is called if there is a failure\n   {\n      alert(ajaxTransport.responseText);\n   });  // The URL Postfix is omitted because it's not used</pre><p><b>Note</b>: &#160;<i>If the success or failure callbacks are omitted, a default callback will be used. &#160;This is a message box. &#160;Thus, if the failure callback is omitted and an error occurs, the user will see the server's error message. &#160;This message is not internationalized and will be in English for the&#160;foreseeable&#160;future.</i></p></blockquote><a name=\"GET_application_x_www_form_urlencoded\"></a><h3 style=\"font-size: 1.1em; font-weight: bold; \">(Synchronous)</h3><p>Javascript SJAX methods that use the GET calling convention typically take no arguments. &#160;When calling a GET method from Javascript, arguments are passed in the following order:</p><p></p><ol><li><b>Get Arguments</b>: &#160;This is usually an empty object; it's present to allow API changes without breaking old code.</li><li><b>Url Postfix</b>: &#160;This postfix is appended to the AJAX requests URL. &#160;It is typically&#160;omitted, except in fringe cases where ObjectCloud's default behavior requires tuning.<br/></li></ol><p>All GET SJAX functions will return the result as a value that Javascript can handle, or throw an exception if there is an error. &#160;In the event of an error, the source&#160;XMLHttpRequest is thrown as an exception.</p>Example:<p></p><blockquote><pre>var pairs = nameValuePairs.GetAll_Sync(\n   {},  // (An empty object is used to allow easy refactoring of the server-side API)\n   });  // The URL Postfix is omitted because it's not used</pre></blockquote><a name=\"GET_application_x_www_form_urlencoded\"></a><h3><span class=\"Apple-style-span\" style=\"font-size: 20px; \">GET_application_x_www_form_urlencoded</span><br/></h3><h3 style=\"font-size: 1.1em; font-weight: bold; \">(Asynchronous)</h3><p>Javascript AJAX methods that use the GET_application_x_www_form_urlencoded calling convention take arguments as a JSON object. &#160;When calling a GET_application_x_www_form_urlencoded method from Javascript, arguments are passed in the following order:</p><p></p><ol><li><b>Get Arguments</b>: &#160;A JSON object with each argument as a named value.</li><li><b>Success Callback</b>: &#160;Called if the server returns a status code between 200 and 299</li><li><b>Failure Callback</b>: &#160;Called if the server returns any other status code</li><li><b>Url Postfix</b>: &#160;This postfix is appended to the AJAX requests URL. &#160;It is typically&#160;omitted, except in fringe cases where ObjectCloud's default behavior requires tuning.</li></ol>Example:<p></p><blockquote><pre>myDirectory.ListNewestFiles(\n   {\n      maxToReturn: 123\n   },\n   function(filesFromServer) // This is called on success\n   {\n      // do something with filesFromServer\n   },\n   function(ajaxTransport) // This is called if there is a failure\n   {\n      alert(ajaxTransport.responseText);\n   });  // The URL Postfix is omitted because it's not used</pre></blockquote><blockquote><p><b>Note</b>: &#160;<i>If the success or failure callbacks are omitted, a default callback will be used. &#160;This is a message box. &#160;Thus, if the failure callback is omitted and an error occurs, the user will see the server's error message. &#160;This message is not internationalized and will be in English for the&#160;foreseeable&#160;future.</i></p></blockquote><h3 style=\"font-size: 1.1em; font-weight: bold; \">(Synchronous)</h3><p>Javascript SJAX methods that use the GET_application_x_www_form_urlencoded calling convention take arguments as a JSON object. &#160;When calling a GET_application_x_www_form_urlencoded method from Javascript, arguments are passed in the following order:</p><p></p><ol><li><b>Get Arguments</b>: &#160;A JSON object with each argument as a named value.</li><li><b>Url Postfix</b>: &#160;This postfix is appended to the AJAX requests URL. &#160;It is typically&#160;omitted, except in fringe cases where ObjectCloud's default behavior requires tuning.<br/></li></ol><p>All GET SJAX functions will return the result as a value that Javascript can handle, or throw an exception if there is an error. &#160;In the event of an error, the source&#160;XMLHttpRequest is thrown as an exception.</p>Example:<p></p><blockquote><pre>var files = myDirectory.ListNewestFiles(\n   {\n      maxToReturn: 123\n   });  // The URL Postfix is omitted because it's not used</pre></blockquote><h3><span class=\"Apple-style-span\" style=\"font-size: 24px; \">POST</span><br/></h3><p>In HTTP, POST calls can change data on the server. &#160;Care must be used when calling an AJAX method that uses the POST HTTP method because it could impact data on the server.</p><a name=\"POST_application_x_www_form_urlencoded\"></a><h2>POST_application_x_www_form_urlencoded</h2><h3 style=\"font-size: 1.1em; font-weight: bold; \">(Asynchronous)</h3><p></p><p>Javascript AJAX methods that use the POST_application_x_www_form_urlencoded calling convention take arguments as a JSON object. &#160;When calling a POST_application_x_www_form_urlencoded method from Javascript, arguments are passed in the following order:</p><p></p><ol><li><b>Post Arguments</b>: &#160;A JSON object with each argument as a named value.</li><li><b>Success Callback</b>: &#160;Called if the server returns a status code between 200 and 299</li><li><b>Failure Callback</b>: &#160;Called if the server returns any other status code</li><li><b>Url Postfix</b>: &#160;This postfix is appended to the AJAX requests URL. &#160;It is typically&#160;omitted, except in fringe cases where ObjectCloud's default behavior requires tuning.</li></ol>Example:<p></p><blockquote class=\"webkit-indent-blockquote\" style=\"border-top-width: medium; border-right-width: medium; border-bottom-width: medium; border-left-width: medium; border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; border-color: initial; margin-top: 0pt; margin-right: 0pt; margin-bottom: 0pt; margin-left: 40px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><pre>myDirectory.DeleteFile(\n   {\n      FileName: \"filetodelete.page\"\n   },\n   function(response) // This is called on success\n   {\n      alert(response);\n   },\n   function(ajaxTransport) // This is called if there is a failure\n   {\n      alert(ajaxTransport.responseText);\n   });  // The URL Postfix is omitted because it's not used</pre></blockquote><pre><span class=\"Apple-style-span\" style=\"font-family: Times; white-space: normal; font-size: 16px; \"><b>Note</b>: &#160;<i>If the success or failure callbacks are omitted, a default callback will be used. &#160;This is a message box. &#160;Thus, if the failure callback is omitted and an error occurs, the user will see the server's error message. &#160;This message is not internationalized and will be in English for the&#160;foreseeable&#160;future.</i></span><br/></pre><p></p><p></p><a name=\"POST_string\"></a><h3 style=\"font-size: 1.1em; font-weight: bold; \">(Synchronous)</h3><p></p><p>Javascript SJAX methods that use the POST_application_x_www_form_urlencoded calling convention take arguments as a JSON object. &#160;When calling a POST_application_x_www_form_urlencoded method from Javascript, arguments are passed in the following order:</p><p></p><ol><li><b>Post Arguments</b>: &#160;A JSON object with each argument as a named value.</li><li><b>Url Postfix</b>: &#160;This postfix is appended to the AJAX requests URL. &#160;It is typically&#160;omitted, except in fringe cases where ObjectCloud's default behavior requires tuning.<br/></li></ol><p>All POST SJAX functions will return the result as a value that Javascript can handle, or throw an exception if there is an error. &#160;In the event of an error, the source&#160;XMLHttpRequest is thrown as an exception. &#160;In some cases, where the post function merely returns an indication of success.</p>Example:<p></p><blockquote class=\"webkit-indent-blockquote\" style=\"border-top-width: medium; border-right-width: medium; border-bottom-width: medium; border-left-width: medium; border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; border-color: initial; margin-top: 0pt; margin-right: 0pt; margin-bottom: 0pt; margin-left: 40px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font class=\"Apple-style-span\" face=\"monospace\" size=\"3\"><span class=\"Apple-style-span\" style=\"font-size: 13px; white-space: pre;\">try\n{\n   myDirectory.DeleteFile_Sync(\n      {\n         FileName: \"filetodelete.page\"\n      });  // The URL Postfix is omitted because it's not used\n}\ncatch (exception)\n{\n   // handle exception\n}</span></font></blockquote><blockquote class=\"webkit-indent-blockquote\" style=\"border-top-width: medium; border-right-width: medium; border-bottom-width: medium; border-left-width: medium; border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; border-color: initial; margin-top: 0pt; margin-right: 0pt; margin-bottom: 0pt; margin-left: 40px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font class=\"Apple-style-span\" face=\"monospace\" size=\"3\"><span class=\"Apple-style-span\" style=\"font-size: 13px; white-space: pre;\"><br/></span></font></blockquote><span class=\"Apple-style-span\" style=\"font-size: 20px; font-weight: bold; \">POST_string</span><div><h3 style=\"font-size: 1.1em; font-weight: bold; \">(Asynchronous)</h3><div><p>Javascript AJAX methods that use the&#160;Javascript AJAX methods that use the POST_string calling convention take a single string as an argument. &#160;This string is the POST payload of the HTTP request. &#160;When calling a GET_application_x_www_form_urlencoded method from Javascript, arguments are passed in the following order:</p><p></p><ol><li><b>String</b>: &#160;The string that is the HTTP payload.</li><li><b>Success Callback</b>: &#160;Called if the server returns a status code between 200 and 299</li><li><b>Failure Callback</b>: &#160;Called if the server returns any other status code</li><li><b>Url Postfix</b>: &#160;This postfix is appended to the AJAX requests URL. &#160;It is typically&#160;omitted, except in fringe cases where ObjectCloud's default behavior requires tuning.</li></ol>Example:<p></p><pre style=\"margin-left: 40px; \">binaryFile.WriteAllBase64(\n   imageAsABase64String, // JSON is not used when the entire POST body is a string\n   function(response) // This is called on success\n   {\n      alert(response);\n   },\n   function(ajaxTransport) // This is called if there is a failure\n   {\n      alert(ajaxTransport.responseText);\n   });  // The URL Postfix is omitted because it's not used</pre><div style=\"margin-left: 40px; \"><b>Note</b>: &#160;<i>If the success or failure callbacks are omitted, a default callback will be used. &#160;This is a message box. &#160;Thus, if the failure callback is omitted and an error occurs, the user will see the server's error message. &#160;This message is not internationalized and will be in English for the&#160;foreseeable&#160;future.</i><br/></div></div><a name=\"POST_JSON\"></a><h3 style=\"font-size: 1.1em; font-weight: bold; \">(Synchronous)</h3><div><p>Javascript SJAX methods that use the POST_string calling convention take a single string as an argument. &#160;This string is the POST payload of the HTTP request. &#160;When calling a GET_application_x_www_form_urlencoded method from Javascript, arguments are passed in the following order:</p><p></p><ol><li><b>String</b>: &#160;The string that is the HTTP payload.</li><li><b>Url Postfix</b>: &#160;This postfix is appended to the AJAX requests URL. &#160;It is typically&#160;omitted, except in fringe cases where ObjectCloud's default behavior requires tuning.<br/></li></ol><p>All POST SJAX functions will return the result as a value that Javascript can handle, or throw an exception if there is an error. &#160;In the event of an error, the source&#160;XMLHttpRequest is thrown as an exception. &#160;In some cases, where the post function merely returns an indication of success.</p>Example:<p></p><pre style=\"margin-left: 40px; \">try\n{\n   binaryFile.WriteAllBase64_Sync(\n      imageAsABase64String, // JSON is not used when the entire POST body is a string\n      });  // The URL Postfix is omitted because it's not used\n}\ncatch (exception)\n{\n   // handle exception\n}</pre></div><a name=\"POST_JSON\"></a><h3><span class=\"Apple-style-span\" style=\"font-size: 20px; \">POST_JSON</span><br/></h3><h3>(Asynchronous)</h3><p></p><p>Javascript AJAX methods that use the POST_JSON calling convention take a single object that will be serialized to JSON and be the POSTed data. &#160;When calling a POST_JSON method from Javascript, arguments are passed in the following order:</p><p></p><ol><li><b>JSON object</b>: &#160;Any valid Javascript value that can be serialized to JSON. &#160;This will be the POST body.</li><li><b>Success Callback</b>: &#160;Called if the server returns a status code between 200 and 299</li><li><b>Failure Callback</b>: &#160;Called if the server returns any other status code</li><li><b>Url Postfix</b>: &#160;This postfix is appended to the AJAX requests URL. &#160;It is typically&#160;omitted, except in fringe cases where ObjectCloud's default behavior requires tuning.</li></ol>Example:<p></p><pre style=\"margin-left: 40px;\">nameValuePairs.SetAllJson(\n   {\n      Name: \"joe\",<br/>      Occupation: \"plumber\"<br/>  &#160;},\n   function(response) // This is called on success\n   {\n      alert(response);\n   },\n   function(ajaxTransport) // This is called if there is a failure\n   {\n      alert(ajaxTransport.responseText);\n   });  // The URL Postfix is omitted because it's not used</pre><div style=\"margin-left: 40px;\"><b>Note</b>: &#160;<i>If the success or failure callbacks are omitted, a default callback will be used. &#160;This is a message box. &#160;Thus, if the failure callback is omitted and an error occurs, the user will see the server's error message. &#160;This message is not internationalized and will be in English for the&#160;foreseeable&#160;future.</i><br/></div><p></p><h3 style=\"font-size: 1.1em; font-weight: bold; \">(Synchronous)</h3><p></p><p>Javascript SJAX methods that use the POST_JSON calling convention take a single object that will be serialized to JSON and be the POSTed data. &#160;When calling a POST_JSON method from Javascript, arguments are passed in the following order:</p><p></p><ol><li><b>JSON object</b>: &#160;Any valid Javascript value that can be serialized to JSON. &#160;This will be the POST body.</li><li><b>Url Postfix</b>: &#160;This postfix is appended to the AJAX requests URL. &#160;It is typically&#160;omitted, except in fringe cases where ObjectCloud's default behavior requires tuning.<br/></li></ol><p>All POST SJAX functions will return the result as a value that Javascript can handle, or throw an exception if there is an error. &#160;In the event of an error, the source&#160;XMLHttpRequest is thrown as an exception. &#160;In some cases, where the post function merely returns an indication of success.</p>Example:<p></p><pre style=\"margin-left: 40px; \">try\n{\n   nameValuePairs.SetAllJson(\n      {\n         Name: \"joe\",\n         Occupation: \"plumber\"\n      });  // The URL Postfix is omitted because it's not used\n}\ncatch (exception)\n{\n   // handle exception\n}<br/></pre><div style=\"margin-left: 40px; \"><b><br/></b></div><p></p></div>"}