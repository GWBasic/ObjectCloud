{"Title":"Creating Pages with Simple Storage","Contents":"\u003Cp>\u003Ca href=\"about.page\">About ObjectCloud\u003C/a>\u003C/p>\u003Cp>ObjectCloud allows creation of simple HTML pages that can store data on the server. &nbsp;No Javascript or server-side programming is needed. &nbsp;This document describes two techniques:\u003C/p>\u003Cul>\u003Cli>\u003Cspan style=\"font-weight: bold;\">Simple text file\u003C/span>:&nbsp; The most simple storage possible\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">Name-value pairs\u003C/span>:&nbsp; A more structured storage solution that could be appropriate for simple data entry.\u003C/li>\u003C/ul>\u003Cp>The techniques described on this page are appropriate for beginners who prefer simple HTML.&nbsp; At the end of the page, AJAX / Javascript techniques are introduced for making more dynamic data entry forms.\u003C/p>\u003Cp style=\"margin-left: 40px;\">\u003Cspan style=\"font-weight: bold;\">Note\u003C/span>:&nbsp;\u003Cspan style=\"font-style: italic;\"> These forms of data persistence are appropriate for personal use and for small groups.&nbsp; Using these techniques for applications available to the general public is insecure; and could lead to an infestation of Blue Meanies, Apple Bumpkins, Walruses, and Lady Madonna's running children.&nbsp; See \u003Ca target=\"\" title=\"\" href=\"/Docs/server%20side%20JS.page\">Secure storage with server-side Javascript\u003C/a> to learn how to create industrial-strength internet applications!\u003C/span>\u003Cbr>\u003C/p>\u003Ch1>Saving to a Text File through a POST form\u003C/h1>\u003Cp>In this example, the folder /LearnOC/Simple Storage/Text File is used.\u003C/p>\u003Cp>Create a directory and create two files:\u003C/p>\u003Cul>\u003Cli>textfile.txt&nbsp; (Text File)\u003C/li>\u003Cli>editor.wchtml&nbsp; (Web Component HTML)\u003C/li>\u003C/ul>\u003Cimg alt=\"\" src=\"/Docs/simple%20storage%20walkthrough/text%20file%20files%20created.png\" align=\"none\">\u003Cbr>\u003Cp>Edit editor.wchtml.&nbsp; In the &lt;head&gt; tags, remove the &lt;? Scripts(... ?&gt;, and put a title between the &lt;title&gt; tags.\u003C/p>\u003Cpre style=\"margin-left: 40px;\">   &lt;head&gt;\u003Cbr>      \u003Cspan style=\"background-color: rgb(255, 255, 51);\">&lt;title&gt;A simple text editor&lt;/title&gt;\u003C/span>\u003Cbr>      &lt;link href=\"/Docs/objectcloud.css\" type=\"text/css\" rel=\"stylesheet\" /&gt;\u003Cbr>      &lt;link href=\"/API/proto.menu.css\" type=\"text/css\" rel=\"stylesheet\" /&gt;\u003Cbr>   &lt;/head&gt;\u003Cbr>\u003C/pre>\n\u003Cp>In the &lt;body&gt; tags, create a form.&nbsp; We need to instruct the browser where to send the data and how to send the data.&nbsp; We tell the browser how to send the data with method=\"POST\", and we tell the browser where to send the data with action=\"...\"&nbsp; Specifically, it will post to textfile.txt's WriteAll_HTML method.&nbsp; (action=\"textfile.txt?Method=WriteAll_HTML\")\u003C/p>\u003Cpre style=\"margin-left: 40px;\">   &lt;body&gt;\u003Cbr>      &lt;form method=\"\u003Cspan style=\"background-color: rgb(255, 255, 51);\">POST\u003C/span>\" action=\"\u003Cspan style=\"background-color: rgb(255, 255, 51);\">textfile.txt?Method=WriteAll_HTML\u003C/span>\" &gt;\u003Cbr>      &lt;/form&gt;\u003Cbr>   &lt;/body&gt;\u003Cbr>\u003C/pre>\n\u003Cp style=\"margin-left: 40px;\">\u003Cspan style=\"font-weight: bold;\">Note\u003C/span>:&nbsp; \u003Cspan style=\"font-style: italic;\">Object-Oriented programming is a good analogy for working with files saved on ObjectCloud.&nbsp; Each file can be thought of as a persistent object with methods.&nbsp; To get or send data, one uses one of the object's methods.&nbsp; In this case, the \"?Method=WriteAll_HTML\" specifies that our form posts to textfile.txt's WriteAll_HTML method.\u003C/span>\u003Cbr>\u003C/p>\u003Cp>The form must contain a text area to type the text into.&nbsp; This is accomplished by using a textarea tag.&nbsp; The WriteAll_HTML method expects that its sent a value named text, so we name the textarea \"text\":\u003C/p>\u003Cpre style=\"margin-left: 40px;\">&lt;textarea name=\"\u003Cspan style=\"background-color: rgb(255, 255, 51);\">text\u003C/span>\"&gt;&lt;/textarea&gt;\u003C/pre>\u003Cp>However, it would be useful to populate the text area with the currently-saved text!&nbsp; We will use a WebComponent to load the text into the HTML sent to the browser.&nbsp; When using the WebComponent, we must specify the full path to textfile.txt.&nbsp; We also must specify that we're using the ReadAll method (\"Method=ReadAll,\") and we must specify that ObjectCloud has to escape any letters that could be mis-interpreted as HTML.&nbsp; (\"&amp;EncodeFor=HTML\")\u003C/p>\u003Cp>Avoid putting spaces, tabs, lines, ect, between the &lt;textarea&gt; tags and the WebComponent.&nbsp; The browser will interpret these spaces are being part of the text file!\u003Cbr>\u003C/p>\u003Cpre style=\"margin-left: 40px;\">&lt;textarea name=\"text\"&gt;&lt;? WebComponent(\"\u003Cspan style=\"background-color: rgb(255, 255, 51);\">/LearnOC/Simple%20Storage/Text%20File/textfile.txt?Method=ReadAll&amp;EncodeFor=HTML\u003C/span>\") ?&gt;&lt;/textarea&gt;\u003C/pre>\u003Cp>Don't forget the Submit button!\u003C/p>\u003Cpre style=\"margin-left: 40px;\">         \u003Cspan style=\"background-color: rgb(255, 255, 51);\">&lt;input type=\"submit\" /&gt;\u003C/span>\u003Cbr>      &lt;/form&gt;\u003Cbr>\u003C/pre>\u003Cp>When you're complete, editor.wchtml should look like this:\u003C/p>\n\u003Cpre style=\"margin-left: 40px;\">&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\u003Cbr>\"http://www.w3.org/TR/html4/strict.dtd\"&gt;\u003Cbr>&lt;html&gt;\u003Cbr>   &lt;head&gt;\u003Cbr>      &lt;title&gt;A simple text editor&lt;/title&gt;\u003Cbr>      &lt;link href=\"/Docs/objectcloud.css\" type=\"text/css\" rel=\"stylesheet\" /&gt;\u003Cbr>      &lt;link href=\"/API/proto.menu.css\" type=\"text/css\" rel=\"stylesheet\" /&gt;\u003Cbr>   &lt;/head&gt;\u003Cbr>   &lt;body&gt;\u003Cbr>      &lt;form method=\"POST\" action=\"textfile.txt?Method=WriteAll_HTML\" &gt;\u003Cbr>         &lt;textarea name=\"text\"&gt;&lt;? WebComponent(\"/LearnOC/Simple%20Storage/Text%20File/textfile.txt?Method=ReadAll&amp;EncodeFor=HTML\") ?&gt;&lt;/textarea&gt;\u003Cbr>         &lt;input type=\"submit\" /&gt;\u003Cbr>      &lt;/form&gt;\u003Cbr>   &lt;/body&gt;\u003Cbr>&lt;/html&gt;\u003Cbr>\u003C/pre>\u003Cp>Click on editor.wchtml.&nbsp; Type in some text and click save.&nbsp; Close and re-open editor.wchtml.&nbsp; The text should still be there.\u003C/p>\u003Cp>\u003Cimg alt=\"\" src=\"/Docs/simple%20storage%20walkthrough/working%20text%20editor.png\" align=\"none\">\u003C/p>\u003Cp>When you view the source, you can see the encoded text.\u003C/p>\u003Cp>\u003Cimg alt=\"\" src=\"/Docs/simple%20storage%20walkthrough/viewing%20text%20editors%20source.png\" align=\"none\">\u003Cbr>\u003C/p>\u003Ch1>Saving Name-Value Pairs through a POST form\u003C/h1>\u003Cp>Saving everything into a single text file can be quite limiting, especially if a more intricate form is desired.&nbsp; Name-value pairs offer a more structured way to save data.\u003C/p>\u003Cp style=\"margin-left: 40px;\">\u003Cspan style=\"font-weight: bold;\">Note\u003C/span>:&nbsp; \u003Cspan style=\"font-style: italic;\">Be careful when using name-value pairs on the public internet.&nbsp; Anyone who can write to a name-value pairs file can overwrite any value, and can add unexpected values!\u003C/span>\u003Cbr>\u003C/p>\u003Cp>In this example, the folder /LearnOC/Simple Storage/NVP is used.\u003C/p>\u003Cp>Create a directory and create two files:\u003C/p>\u003Cul>\u003Cli>nvp&nbsp; (Name-Value pairs)\u003C/li>\u003Cli>editor.wchtml&nbsp; (Web Component HTML)\u003C/li>\u003C/ul>\u003Cp>We will create an entry that takes a person's name.&nbsp; It takes first name, middle name, and last name.\u003C/p>\u003Cp>Edit editor.wchtml.&nbsp; In the &lt;head&gt; tags, remove the &lt;?\nScripts(... ?&gt;, and put a title between the &lt;title&gt; tags.\u003C/p>\u003Cpre style=\"margin-left: 40px;\">   &lt;head&gt;\u003Cbr>      \u003Cspan style=\"background-color: rgb(255, 255, 51);\">&lt;title&gt;A simple set of Name-Value pairs&lt;/title&gt;\u003C/span>\u003Cbr>      &lt;link href=\"/Docs/objectcloud.css\" type=\"text/css\" rel=\"stylesheet\" /&gt;\u003Cbr>      &lt;link href=\"/API/proto.menu.css\" type=\"text/css\" rel=\"stylesheet\" /&gt;\u003Cbr>   &lt;/head&gt;\u003Cbr>\u003C/pre>\n\u003Cp>In the &lt;body&gt; tags, create a form.&nbsp; Like the text editor, this form uses POST as well.&nbsp; This time we're sending the data to the nvp file instead of the textfile.txt file.&nbsp; We're also using a different method, \"SetAll.\"\u003Cbr>\u003C/p>\u003Cpre style=\"margin-left: 40px;\">   &lt;body&gt;\u003Cbr>      &lt;form method=\"\u003Cspan style=\"background-color: rgb(255, 255, 51);\">POST\u003C/span>\" action=\"\u003Cspan style=\"background-color: rgb(255, 255, 51);\">nvp?Method=SetAll\u003C/span>\" &gt;\u003Cbr>      &lt;/form&gt;\u003Cbr>   &lt;/body&gt;\u003C/pre>\u003Cp>Create a text input for the first name.&nbsp; The name=\"first\" part implies that this value is named first:\u003C/p>\u003Cpre style=\"margin-left: 40px;\">&lt;input type=\"text\" \u003Cspan style=\"background-color: rgb(255, 255, 51);\">name=\"first\"\u003C/span> /&gt;\u003Cbr>\u003C/pre>\n\u003Cp>Make sure that the existing value is shown by using a WebComponent.&nbsp; Nvp's Get method is used to get the value named first.&nbsp; Like the text file, it needs to be encoded for HTML so that HTML-specific characters do not perturb the browser.:\u003Cbr>\u003C/p>\u003Cpre style=\"margin-left: 40px;\">&lt;input type=\"text\" name=\"first\" \u003Cspan style=\"background-color: rgb(255, 255, 51);\">value=\"&lt;? WebComponent(\"LearnOC/Simple%20Storage/NVP/nvp?Method=Get&amp;Name=first&amp;EncodeFor=HTML\") ?&gt;\"\u003C/span> /&gt;\u003Cbr>\u003C/pre>\n\u003Cp>Repeat for the middle and last names:\u003Cbr>\u003C/p>\u003Cpre style=\"margin-left: 40px;\">&lt;form method=\"POST\" action=\"nvp?Method=SetAll\"&gt;\u003Cbr>   &lt;input type=\"text\" name=\"first\" value=\"&lt;? WebComponent(\"LearnOC/Simple%20Storage/NVP/nvp?Method=Get&amp;Name=first&amp;EncodeFor=HTML\") ?&gt;\" /&gt;\u003Cbr>\u003Cspan style=\"background-color: rgb(255, 255, 51);\">   &lt;input type=\"text\" name=\"middle\" value=\"&lt;? WebComponent(\"LearnOC/Simple%20Storage/NVP/nvp?Method=Get&amp;Name=middle&amp;EncodeFor=HTML\") ?&gt;\" /&gt;\u003C/span>\u003Cbr style=\"background-color: rgb(255, 255, 51);\">\u003Cspan style=\"background-color: rgb(255, 255, 51);\">   &lt;input type=\"text\" name=\"last\" value=\"&lt;? WebComponent(\"LearnOC/Simple%20Storage/NVP/nvp?Method=Get&amp;Name=last&amp;EncodeFor=HTML\") ?&gt;\" /&gt;\u003C/span>\u003Cbr style=\"background-color: rgb(255, 255, 51);\">&lt;/form&gt;\u003Cbr>\u003C/pre>\u003Cp>Don't forget the Submit button!\u003C/p>\u003Cpre style=\"margin-left: 40px;\">         \u003Cspan style=\"background-color: rgb(255, 255, 51);\">&lt;input type=\"submit\" /&gt;\u003C/span>\u003Cbr>      &lt;/form&gt;\u003Cbr>\u003C/pre>\u003Cp>When you are complete, editor.wchtml should look like:\u003Cbr>\u003C/p>\u003Cpre style=\"margin-left: 40px;\">&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\u003Cbr>\"http://www.w3.org/TR/html4/strict.dtd\"&gt;\u003Cbr>&lt;html&gt;\u003Cbr>   &lt;head&gt;\u003Cbr>      &lt;title&gt;A simple set of Name-Value pairs&lt;/title&gt;\u003Cbr>      &lt;link href=\"/Docs/objectcloud.css\" type=\"text/css\" rel=\"stylesheet\" /&gt;\u003Cbr>      &lt;link href=\"/API/proto.menu.css\" type=\"text/css\" rel=\"stylesheet\" /&gt;\u003Cbr>   &lt;/head&gt;\u003Cbr>   &lt;body&gt;\u003Cbr>      &lt;form method=\"POST\" action=\"nvp?Method=SetAll\"&gt;\u003Cbr>         &lt;input type=\"text\" name=\"first\" value=\"&lt;? WebComponent(\"LearnOC/Simple%20Storage/NVP/nvp?Method=Get&amp;Name=first&amp;EncodeFor=HTML\") ?&gt;\" /&gt;\u003Cbr>         &lt;input type=\"text\" name=\"middle\" value=\"&lt;? WebComponent(\"LearnOC/Simple%20Storage/NVP/nvp?Method=Get&amp;Name=middle&amp;EncodeFor=HTML\") ?&gt;\" /&gt;\u003Cbr>         &lt;input type=\"text\" name=\"last\" value=\"&lt;? WebComponent(\"LearnOC/Simple%20Storage/NVP/nvp?Method=Get&amp;Name=last&amp;EncodeFor=HTML\") ?&gt;\" /&gt;\u003Cbr>         &lt;input type=\"submit\" /&gt;\u003Cbr>      &lt;/form&gt;\u003Cbr>   &lt;/body&gt;\u003Cbr>&lt;/html&gt;\u003Cbr>\u003C/pre>\u003Cp>Open editor.wchtml.&nbsp; Enter a name, and click submit.&nbsp; Close and re-open editor.wchtml, and the name should re-appear.\u003C/p>\u003Cp>\u003Cimg alt=\"\" src=\"/Docs/simple%20storage%20walkthrough/working%20nvp%20editor.png\" align=\"none\">\u003C/p>\u003Cp>Like the text editor, if you view editor.wchtml's source, you will see the WebComponents replaced with the actual values.\u003Cbr>\u003C/p>\u003Ch1>AJAXing up the Name-Value Pairs with the Javascript Wrapper\u003C/h1>\u003Cp>By modifying the name-value pairs editor created above to use Javascript and AJAX, we can add some useful functionality.&nbsp; It's possible to programmatically select an option in a drop-down menu, and we can post data back to object cloud without leaving the page.\u003C/p>\u003Cp>This section modifies the files created in /LearnOC/Simple Storage/NVP.\u003C/p>\u003Cp>The first change we'll make is to load some Javascript dependencies:\u003Cbr>\u003C/p>\u003Cpre style=\"margin-left: 40px;\">&lt;title&gt;A simple set of Name-Value pairs&lt;/title&gt;\u003Cbr>\u003Cspan style=\"background-color: rgb(255, 255, 51);\">&lt;? Scripts(/API/Prototype.js, /LearnOC/Simple Storage/NVP/nvp?Method=GetJSW&amp;assignToVariable=NVP) ?&gt;\u003C/span>\u003Cbr>&lt;link href=\"/Docs/objectcloud.css\" type=\"text/css\" rel=\"stylesheet\" /&gt;\u003Cbr>\u003C/pre>\n\u003Cp>There are two scripts loaded:\u003C/p>\u003Cul>\u003Cli>\u003Cspan style=\"font-weight: bold;\">Prototype.js\u003C/span>:&nbsp; Prototype is a Javascript framework that ObjectCloud uses to handle browser incompatibilities.&nbsp; It's primarily used to access elements on the page, and it's used to perform AJAX queries.\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">/LearnOC/Simple Storage/NVP/nvp?Method=\u003Cspan class=\"Apple-style-span\" style=\"background-color: rgb(255, 255, 0);\">GetJSW\u003C/span>&amp;assignToVariable=NVP\u003C/span>:&nbsp; nvp's \u003Cspan class=\"Apple-style-span\" style=\"background-color: rgb(255, 255, 0);\">GetJSW\u003C/span> method automatically generates Javascript to perform AJAX calls on the NVP object.&nbsp; We add the \"&amp;assignToVariable=NVP\" to instruct ObjectCloud to assign nvp's wrapper to the variable NVP.\u003C/li>\u003C/ul>\u003Cp style=\"margin-left: 40px;\">\u003Cspan style=\"font-weight: bold;\">Note\u003C/span>: &nbsp;\u003Ci>The APIs to manipulate objects on the server are documented at \u003Ca href=\"/Docs/API/Overview.wchtml\" title=\"\" target=\"\">/Docs/API/Overview.wchtml\u003C/a>.\u003C/i>\u003C/p>\u003Cp>In the &lt;body&gt;, we get rid of the &lt;form&gt; tags and add &lt;select&gt; and &lt;option&gt; tags for a drop-down.&nbsp; For our purposes, the drop-down has an id of \"prefix,\" and each option has an id that's the same as its value:\u003C/p>\u003Cpre style=\"margin-left: 40px;\">&lt;body&gt;\u003Cbr>   &lt;select \u003Cspan style=\"background-color: rgb(255, 255, 51);\">id=\"prefix\"\u003C/span>&gt;\u003Cbr>      &lt;option \u003Cspan style=\"background-color: rgb(255, 255, 51);\">id=\"Dr\"&gt;Dr\u003C/span>&lt;/option&gt;\u003Cbr>      &lt;option \u003Cspan style=\"background-color: rgb(255, 255, 51);\">id=\"Mr\"&gt;Mr\u003C/span>&lt;/option&gt;\u003Cbr>      &lt;option id=\"Mrs\"&gt;Mrs&lt;/option&gt;\u003Cbr>      &lt;option id=\"Ms\"&gt;Ms&lt;/option&gt;\u003Cbr>      &lt;option id=\"Sir\"&gt;Sir&lt;/option&gt;\u003Cbr>   &lt;/select&gt;\u003C/pre>\n\u003Cp>We then add a script at the end of the body to assign the currently-saved value to the drop-down.&nbsp; The script uses a WebComponent to load the current value into a variable, then it uses Prototype's $(...) function to find the corresponding option, which it selects by setting its selected option to true:\u003C/p>\u003Cpre style=\"margin-left: 40px;\">  &lt;script&gt;\u003Cbr>      var prefix = \u003Cspan style=\"background-color: rgb(255, 255, 51);\">\"&lt;? WebComponent(\"LearnOC/Simple%20Storage/NVP/nvp?Method=Get&amp;Name=prefix&amp;EncodeFor=HTML\") ?&gt;\"\u003C/span>;\u003Cbr>      var prefixOption = \u003Cspan style=\"background-color: rgb(255, 255, 51);\">$(prefix)\u003C/span>;\u003Cbr>      prefixOption.selected = true;\u003Cbr>   &lt;/script&gt;\u003Cbr>&lt;/body&gt;\u003Cbr>\u003C/pre>\n\u003Cp>The &lt;input&gt; tags must be modified to have ids instead of names.&nbsp; This is so we can address them within the AJAX call:\u003Cbr>\u003C/p>\u003Cpre style=\"margin-left: 40px;\">&lt;input type=\"text\" \u003Cspan style=\"background-color: rgb(255, 255, 51);\">id=\"first\"\u003C/span> value=\"&lt;? WebComponent(\"LearnOC/Simple%20Storage/NVP/nvp?Method=Get&amp;Name=first&amp;EncodeFor=HTML\") ?&gt;\" /&gt;\u003Cbr>&lt;input type=\"text\" \u003Cspan style=\"background-color: rgb(255, 255, 51);\">id=\"middle\"\u003C/span> value=\"&lt;? WebComponent(\"LearnOC/Simple%20Storage/NVP/nvp?Method=Get&amp;Name=middle&amp;EncodeFor=HTML\") ?&gt;\" /&gt;\u003Cbr>&lt;input type=\"text\" \u003Cspan style=\"background-color: rgb(255, 255, 51);\">id=\"last\"\u003C/span> value=\"&lt;? WebComponent(\"LearnOC/Simple%20Storage/NVP/nvp?Method=Get&amp;Name=last&amp;EncodeFor=HTML\") ?&gt;\" /&gt;\u003Cbr>\u003C/pre>\n\u003Cp>We then need to add a Javascript function in the header to POST through AJAX the updated data.&nbsp; The first thing we do is construct an object, toWrite, that contains the data we will send to the server.&nbsp; We then call the NVP.SetAllJson method.&nbsp; The first argument is the object that contains all of the data.&nbsp; ObjectCloud automatically serializes this to JSON.&nbsp; The last arguments are callbacks.&nbsp; AJAX, and thus ObjectCloud, uses callbacks instead of returning results.&nbsp; This means that the first \"Success\" function is called if the data is written correctly.&nbsp; \"Error\" is called if the server returns an error, and \"Transport\" is called if there is an error communicating with the server.\u003Cbr>\u003C/p>\u003Cpre style=\"margin-left: 40px;\">   &lt;script&gt;\u003Cbr>      function writename()\u003Cbr>      {\u003Cbr>         var toWrite =\u003Cbr>         {\u003Cbr>            prefix: $(\"prefix\").value,\u003Cbr>            first: $(\"first\").value,\u003Cbr>            middle: $(\"middle\").value,\u003Cbr>            last: $(\"last\").value\u003Cbr>         };\u003Cbr>\u003Cbr>         NVP.SetAllJson(\u003Cbr>            toWrite,\u003Cbr>            function() { alert(\"Success\"); },\u003Cbr>            function() { alert(\"Error on the server\"); },\u003Cbr>            function() { alert(\"Transport error\");});\u003Cbr>      }\u003Cbr>   &lt;/script&gt;\u003Cbr>\u003Cbr>&lt;/head&gt;\u003Cbr>\u003C/pre>\n\u003Cp>The function callbacks are optional.&nbsp; If they are omitted, ObjectCloud will use a default callback that displays a dialog box.\u003Cbr>\u003C/p>\u003Cp>Don't forget the submit button!&nbsp; It must be modified to call the Javascript writename() function:\u003Cbr>\u003C/p>\u003Cpre style=\"margin-left: 40px;\">&lt;input type=\"submit\" \u003Cspan style=\"background-color: rgb(255, 255, 51);\">onclick=\"writename()\"\u003C/span> /&gt;\u003Cbr>\u003C/pre>\n\u003Cp>When complete, editor.wchtml should look like this.\u003C/p>\u003Cpre style=\"margin-left: 40px;\">&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\u003Cbr>\"http://www.w3.org/TR/html4/strict.dtd\"&gt;\u003Cbr>&lt;html&gt;\u003Cbr>   &lt;head&gt;\u003Cbr>      &lt;title&gt;A simple set of Name-Value pairs&lt;/title&gt;\u003Cbr>      &lt;? Scripts(/API/Prototype.js, /LearnOC/Simple Storage/NVP/nvp?Method=GetJSW&amp;assignToVariable=NVP) ?&gt;\u003Cbr>      &lt;link href=\"/Docs/objectcloud.css\" type=\"text/css\" rel=\"stylesheet\" /&gt;\u003Cbr>      &lt;link href=\"/API/proto.menu.css\" type=\"text/css\" rel=\"stylesheet\" /&gt;\u003Cbr>\u003Cbr>      &lt;script&gt;\u003Cbr>         function writename()\u003Cbr>         {\u003Cbr>            var toWrite =\u003Cbr>            {\u003Cbr>               prefix: $(\"prefix\").value,\u003Cbr>               first: $(\"first\").value,\u003Cbr>               middle: $(\"middle\").value,\u003Cbr>               last: $(\"last\").value\u003Cbr>            };\u003Cbr>\u003Cbr>            NVP.SetAllJson(\u003Cbr>               toWrite,\u003Cbr>               function() { alert(\"Success\"); },\u003Cbr>               function() { alert(\"Error on the server\"); },\u003Cbr>               function() { alert(\"Transport error\");});\u003Cbr>         }\u003Cbr>      &lt;/script&gt;\u003Cbr>\u003Cbr>   &lt;/head&gt;\u003Cbr>   &lt;body&gt;\u003Cbr>      &lt;select id=\"prefix\"&gt;\u003Cbr>         &lt;option id=\"Dr\"&gt;Dr&lt;/option&gt;\u003Cbr>         &lt;option id=\"Mr\"&gt;Mr&lt;/option&gt;\u003Cbr>         &lt;option id=\"Mrs\"&gt;Mrs&lt;/option&gt;\u003Cbr>         &lt;option id=\"Ms\"&gt;Ms&lt;/option&gt;\u003Cbr>         &lt;option id=\"Sir\"&gt;Sir&lt;/option&gt;\u003Cbr>      &lt;/select&gt;\u003Cbr>      &lt;input type=\"text\" id=\"first\" value=\"&lt;? WebComponent(\"LearnOC/Simple%20Storage/NVP/nvp?Method=Get&amp;Name=first&amp;EncodeFor=HTML\") ?&gt;\" /&gt;\u003Cbr>      &lt;input type=\"text\" id=\"middle\" value=\"&lt;? WebComponent(\"LearnOC/Simple%20Storage/NVP/nvp?Method=Get&amp;Name=middle&amp;EncodeFor=HTML\") ?&gt;\" /&gt;\u003Cbr>      &lt;input type=\"text\" id=\"last\" value=\"&lt;? WebComponent(\"LearnOC/Simple%20Storage/NVP/nvp?Method=Get&amp;Name=last&amp;EncodeFor=HTML\") ?&gt;\" /&gt;\u003Cbr>      &lt;input type=\"submit\" onclick=\"writename()\" /&gt;\u003Cbr>\u003Cbr>      &lt;script&gt;\u003Cbr>         var prefix = \"&lt;? WebComponent(\"LearnOC/Simple%20Storage/NVP/nvp?Method=Get&amp;Name=prefix&amp;EncodeFor=HTML\") ?&gt;\";\u003Cbr>         var prefixOption = $(prefix);\u003Cbr>         prefixOption.selected = true;\u003Cbr>      &lt;/script&gt;\u003Cbr>   &lt;/body&gt;\u003Cbr>&lt;/html&gt;\u003Cbr>\u003C/pre>\u003Cp>Open editor.wchtml and enter a name with a title.&nbsp; Save it.&nbsp; You should see a dialog with \"Success.\"&nbsp; Close editor.wchtml and re-open it.&nbsp; The data should be persisted.\u003C/p>\u003Cp>\u003Ca href=\"about.page\">About ObjectCloud\u003C/a>\u003C/p>"}