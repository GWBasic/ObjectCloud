<div>Creating Pages with Simple Storage</div><p><a href="about.page">About ObjectCloud</a></p><p>ObjectCloud allows creation of simple HTML pages that can store data on the server. &nbsp;No Javascript or server-side programming is needed. &nbsp;This document describes two techniques:</p><ul><li><span style="font-weight: bold;">Simple text file</span>:&nbsp; The most simple storage possible</li><li><span style="font-weight: bold;">Name-value pairs</span>:&nbsp; A more structured storage solution that could be appropriate for simple data entry.</li></ul><p>The techniques described on this page are appropriate for beginners who prefer simple HTML.&nbsp; At the end of the page, AJAX / Javascript techniques are introduced for making more dynamic data entry forms.</p><p style="margin-left: 40px;"><span style="font-weight: bold;">Note</span>:&nbsp;<span style="font-style: italic;"> These forms of data persistence are appropriate for personal use and for small groups.&nbsp; Using these techniques for applications available to the general public is insecure; and could lead to an infestation of Blue Meanies, Apple Bumpkins, Walruses, and Lady Madonna's running children.&nbsp; See <a target="" title="" href="/Docs/server%20side%20JS.page">Secure storage with server-side Javascript</a> to learn how to create industrial-strength internet applications!</span><br></p><h1>Saving to a Text File through a POST form</h1><p>In this example, the folder /LearnOC/Simple Storage/Text File is used.</p><p>Create a directory and create two files:</p><ul><li>textfile.txt&nbsp; (Text File)</li><li>editor.wchtml&nbsp; (Web Component HTML)</li></ul><img alt="" src="/Docs/simple%20storage%20walkthrough/text%20file%20files%20created.png" align="none"><br><p>Edit editor.wchtml.&nbsp; In the &lt;head&gt; tags, remove the &lt;? Scripts(... ?&gt;, and put a title between the &lt;title&gt; tags.</p><pre style="margin-left: 40px;">   &lt;head&gt;<br>      <span style="background-color: rgb(255, 255, 51);">&lt;title&gt;A simple text editor&lt;/title&gt;</span><br>      &lt;link href="/Docs/objectcloud.css" type="text/css" rel="stylesheet" /&gt;<br>      &lt;link href="/API/proto.menu.css" type="text/css" rel="stylesheet" /&gt;<br>   &lt;/head&gt;<br></pre>
<p>In the &lt;body&gt; tags, create a form.&nbsp; We need to instruct the browser where to send the data and how to send the data.&nbsp; We tell the browser how to send the data with method="POST", and we tell the browser where to send the data with action="..."&nbsp; Specifically, it will post to textfile.txt's WriteAll_HTML method.&nbsp; (action="textfile.txt?Method=WriteAll_HTML")</p><pre style="margin-left: 40px;">   &lt;body&gt;<br>      &lt;form method="<span style="background-color: rgb(255, 255, 51);">POST</span>" action="<span style="background-color: rgb(255, 255, 51);">textfile.txt?Method=WriteAll_HTML</span>" &gt;<br>      &lt;/form&gt;<br>   &lt;/body&gt;<br></pre>
<p style="margin-left: 40px;"><span style="font-weight: bold;">Note</span>:&nbsp; <span style="font-style: italic;">Object-Oriented programming is a good analogy for working with files saved on ObjectCloud.&nbsp; Each file can be thought of as a persistent object with methods.&nbsp; To get or send data, one uses one of the object's methods.&nbsp; In this case, the "?Method=WriteAll_HTML" specifies that our form posts to textfile.txt's WriteAll_HTML method.</span><br></p><p>The form must contain a text area to type the text into.&nbsp; This is accomplished by using a textarea tag.&nbsp; The WriteAll_HTML method expects that its sent a value named text, so we name the textarea "text":</p><pre style="margin-left: 40px;">&lt;textarea name="<span style="background-color: rgb(255, 255, 51);">text</span>"&gt;&lt;/textarea&gt;</pre><p>However, it would be useful to populate the text area with the currently-saved text!&nbsp; We will use a WebComponent to load the text into the HTML sent to the browser.&nbsp; When using the WebComponent, we must specify the full path to textfile.txt.&nbsp; We also must specify that we're using the ReadAll method ("Method=ReadAll,") and we must specify that ObjectCloud has to escape any letters that could be mis-interpreted as HTML.&nbsp; ("&amp;EncodeFor=HTML")</p><p>Avoid putting spaces, tabs, lines, ect, between the &lt;textarea&gt; tags and the WebComponent.&nbsp; The browser will interpret these spaces are being part of the text file!<br></p><pre style="margin-left: 40px;">&lt;textarea name="text"&gt;&lt;? WebComponent("<span style="background-color: rgb(255, 255, 51);">/LearnOC/Simple%20Storage/Text%20File/textfile.txt?Method=ReadAll&amp;EncodeFor=HTML</span>") ?&gt;&lt;/textarea&gt;</pre><p>Don't forget the Submit button!</p><pre style="margin-left: 40px;">         <span style="background-color: rgb(255, 255, 51);">&lt;input type="submit" /&gt;</span><br>      &lt;/form&gt;<br></pre><p>When you're complete, editor.wchtml should look like this:</p>
<pre style="margin-left: 40px;">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"<br>"http://www.w3.org/TR/html4/strict.dtd"&gt;<br>&lt;html&gt;<br>   &lt;head&gt;<br>      &lt;title&gt;A simple text editor&lt;/title&gt;<br>      &lt;link href="/Docs/objectcloud.css" type="text/css" rel="stylesheet" /&gt;<br>      &lt;link href="/API/proto.menu.css" type="text/css" rel="stylesheet" /&gt;<br>   &lt;/head&gt;<br>   &lt;body&gt;<br>      &lt;form method="POST" action="textfile.txt?Method=WriteAll_HTML" &gt;<br>         &lt;textarea name="text"&gt;&lt;? WebComponent("/LearnOC/Simple%20Storage/Text%20File/textfile.txt?Method=ReadAll&amp;EncodeFor=HTML") ?&gt;&lt;/textarea&gt;<br>         &lt;input type="submit" /&gt;<br>      &lt;/form&gt;<br>   &lt;/body&gt;<br>&lt;/html&gt;<br></pre><p>Click on editor.wchtml.&nbsp; Type in some text and click save.&nbsp; Close and re-open editor.wchtml.&nbsp; The text should still be there.</p><p><img alt="" src="/Docs/simple%20storage%20walkthrough/working%20text%20editor.png" align="none"></p><p>When you view the source, you can see the encoded text.</p><p><img alt="" src="/Docs/simple%20storage%20walkthrough/viewing%20text%20editors%20source.png" align="none"><br></p><h1>Saving Name-Value Pairs through a POST form</h1><p>Saving everything into a single text file can be quite limiting, especially if a more intricate form is desired.&nbsp; Name-value pairs offer a more structured way to save data.</p><p style="margin-left: 40px;"><span style="font-weight: bold;">Note</span>:&nbsp; <span style="font-style: italic;">Be careful when using name-value pairs on the public internet.&nbsp; Anyone who can write to a name-value pairs file can overwrite any value, and can add unexpected values!</span><br></p><p>In this example, the folder /LearnOC/Simple Storage/NVP is used.</p><p>Create a directory and create two files:</p><ul><li>nvp&nbsp; (Name-Value pairs)</li><li>editor.wchtml&nbsp; (Web Component HTML)</li></ul><p>We will create an entry that takes a person's name.&nbsp; It takes first name, middle name, and last name.</p><p>Edit editor.wchtml.&nbsp; In the &lt;head&gt; tags, remove the &lt;?
Scripts(... ?&gt;, and put a title between the &lt;title&gt; tags.</p><pre style="margin-left: 40px;">   &lt;head&gt;<br>      <span style="background-color: rgb(255, 255, 51);">&lt;title&gt;A simple set of Name-Value pairs&lt;/title&gt;</span><br>      &lt;link href="/Docs/objectcloud.css" type="text/css" rel="stylesheet" /&gt;<br>      &lt;link href="/API/proto.menu.css" type="text/css" rel="stylesheet" /&gt;<br>   &lt;/head&gt;<br></pre>
<p>In the &lt;body&gt; tags, create a form.&nbsp; Like the text editor, this form uses POST as well.&nbsp; This time we're sending the data to the nvp file instead of the textfile.txt file.&nbsp; We're also using a different method, "SetAll."<br></p><pre style="margin-left: 40px;">   &lt;body&gt;<br>      &lt;form method="<span style="background-color: rgb(255, 255, 51);">POST</span>" action="<span style="background-color: rgb(255, 255, 51);">nvp?Method=SetAll</span>" &gt;<br>      &lt;/form&gt;<br>   &lt;/body&gt;</pre><p>Create a text input for the first name.&nbsp; The name="first" part implies that this value is named first:</p><pre style="margin-left: 40px;">&lt;input type="text" <span style="background-color: rgb(255, 255, 51);">name="first"</span> /&gt;<br></pre>
<p>Make sure that the existing value is shown by using a WebComponent.&nbsp; Nvp's Get method is used to get the value named first.&nbsp; Like the text file, it needs to be encoded for HTML so that HTML-specific characters do not perturb the browser.:<br></p><pre style="margin-left: 40px;">&lt;input type="text" name="first" <span style="background-color: rgb(255, 255, 51);">value="&lt;? WebComponent("LearnOC/Simple%20Storage/NVP/nvp?Method=Get&amp;Name=first&amp;EncodeFor=HTML") ?&gt;"</span> /&gt;<br></pre>
<p>Repeat for the middle and last names:<br></p><pre style="margin-left: 40px;">&lt;form method="POST" action="nvp?Method=SetAll"&gt;<br>   &lt;input type="text" name="first" value="&lt;? WebComponent("LearnOC/Simple%20Storage/NVP/nvp?Method=Get&amp;Name=first&amp;EncodeFor=HTML") ?&gt;" /&gt;<br><span style="background-color: rgb(255, 255, 51);">   &lt;input type="text" name="middle" value="&lt;? WebComponent("LearnOC/Simple%20Storage/NVP/nvp?Method=Get&amp;Name=middle&amp;EncodeFor=HTML") ?&gt;" /&gt;</span><br style="background-color: rgb(255, 255, 51);"><span style="background-color: rgb(255, 255, 51);">   &lt;input type="text" name="last" value="&lt;? WebComponent("LearnOC/Simple%20Storage/NVP/nvp?Method=Get&amp;Name=last&amp;EncodeFor=HTML") ?&gt;" /&gt;</span><br style="background-color: rgb(255, 255, 51);">&lt;/form&gt;<br></pre><p>Don't forget the Submit button!</p><pre style="margin-left: 40px;">         <span style="background-color: rgb(255, 255, 51);">&lt;input type="submit" /&gt;</span><br>      &lt;/form&gt;<br></pre><p>When you are complete, editor.wchtml should look like:<br></p><pre style="margin-left: 40px;">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"<br>"http://www.w3.org/TR/html4/strict.dtd"&gt;<br>&lt;html&gt;<br>   &lt;head&gt;<br>      &lt;title&gt;A simple set of Name-Value pairs&lt;/title&gt;<br>      &lt;link href="/Docs/objectcloud.css" type="text/css" rel="stylesheet" /&gt;<br>      &lt;link href="/API/proto.menu.css" type="text/css" rel="stylesheet" /&gt;<br>   &lt;/head&gt;<br>   &lt;body&gt;<br>      &lt;form method="POST" action="nvp?Method=SetAll"&gt;<br>         &lt;input type="text" name="first" value="&lt;? WebComponent("LearnOC/Simple%20Storage/NVP/nvp?Method=Get&amp;Name=first&amp;EncodeFor=HTML") ?&gt;" /&gt;<br>         &lt;input type="text" name="middle" value="&lt;? WebComponent("LearnOC/Simple%20Storage/NVP/nvp?Method=Get&amp;Name=middle&amp;EncodeFor=HTML") ?&gt;" /&gt;<br>         &lt;input type="text" name="last" value="&lt;? WebComponent("LearnOC/Simple%20Storage/NVP/nvp?Method=Get&amp;Name=last&amp;EncodeFor=HTML") ?&gt;" /&gt;<br>         &lt;input type="submit" /&gt;<br>      &lt;/form&gt;<br>   &lt;/body&gt;<br>&lt;/html&gt;<br></pre><p>Open editor.wchtml.&nbsp; Enter a name, and click submit.&nbsp; Close and re-open editor.wchtml, and the name should re-appear.</p><p><img alt="" src="/Docs/simple%20storage%20walkthrough/working%20nvp%20editor.png" align="none"></p><p>Like the text editor, if you view editor.wchtml's source, you will see the WebComponents replaced with the actual values.<br></p><h1>AJAXing up the Name-Value Pairs with the Javascript Wrapper</h1><p>By modifying the name-value pairs editor created above to use Javascript and AJAX, we can add some useful functionality.&nbsp; It's possible to programmatically select an option in a drop-down menu, and we can post data back to object cloud without leaving the page.</p><p>This section modifies the files created in /LearnOC/Simple Storage/NVP.</p><p>The first change we'll make is to load some Javascript dependencies:<br></p><pre style="margin-left: 40px;">&lt;title&gt;A simple set of Name-Value pairs&lt;/title&gt;<br><span style="background-color: rgb(255, 255, 51);">&lt;? Scripts(/API/Prototype.js, /LearnOC/Simple Storage/NVP/nvp?Method=GetJavascriptWrapper&amp;assignToVariable=NVP) ?&gt;</span><br>&lt;link href="/Docs/objectcloud.css" type="text/css" rel="stylesheet" /&gt;<br></pre>
<p>There are two scripts loaded:</p><ul><li><span style="font-weight: bold;">Prototype.js</span>:&nbsp; Prototype is a Javascript framework that ObjectCloud uses to handle browser incompatibilities.&nbsp; It's primarily used to access elements on the page, and it's used to perform AJAX queries.</li><li><span style="font-weight: bold;">/LearnOC/Simple Storage/NVP/nvp?Method=GetJavascriptWrapper&amp;assignToVariable=NVP</span>:&nbsp; nvp's GetJavascriptWrapper method automatically generates Javascript to perform AJAX calls on the NVP object.&nbsp; We add the "&amp;assignToVariable=NVP" to instruct ObjectCloud to assign nvp's wrapper to the variable NVP.<br></li></ul><p style="margin-left: 40px;"><span style="font-weight: bold;">Note</span>:&nbsp; <span style="font-style: italic;">ObjectCloud's built-in web components AJAX calls use Prototype.&nbsp; This could potentially interfere with jQuery, a popular Javascript framework.&nbsp; This is because both Prototype and jQuery declare a $(...) function.&nbsp; Feedback on the implications of this conflict, and potential solutions that allow development with jQuery's $(...) function, are encouraged.</span></p><p style="margin-left: 40px;"><span style="font-weight: bold;">Note</span>:&nbsp; <span style="font-style: italic;">You can view any object's API by appending ?Method=GetJavascriptWrapper to its url and viewing it in the browser.</span>&nbsp; For example, you can look at <a target="" title="" href="/Docs/simple%20storage%20walkthrough.page?Method=GetJavascriptWrapper">the API to manipulate this page</a>.<br></p><p>In the &lt;body&gt;, we get rid of the &lt;form&gt; tags and add &lt;select&gt; and &lt;option&gt; tags for a drop-down.&nbsp; For our purposes, the drop-down has an id of "prefix," and each option has an id that's the same as its value:</p><pre style="margin-left: 40px;">&lt;body&gt;<br>   &lt;select <span style="background-color: rgb(255, 255, 51);">id="prefix"</span>&gt;<br>      &lt;option <span style="background-color: rgb(255, 255, 51);">id="Dr"&gt;Dr</span>&lt;/option&gt;<br>      &lt;option <span style="background-color: rgb(255, 255, 51);">id="Mr"&gt;Mr</span>&lt;/option&gt;<br>      &lt;option id="Mrs"&gt;Mrs&lt;/option&gt;<br>      &lt;option id="Ms"&gt;Ms&lt;/option&gt;<br>      &lt;option id="Sir"&gt;Sir&lt;/option&gt;<br>   &lt;/select&gt;</pre>
<p>We then add a script at the end of the body to assign the currently-saved value to the drop-down.&nbsp; The script uses a WebComponent to load the current value into a variable, then it uses Prototype's $(...) function to find the corresponding option, which it selects by setting its selected option to true:</p><pre style="margin-left: 40px;">  &lt;script&gt;<br>      var prefix = <span style="background-color: rgb(255, 255, 51);">"&lt;? WebComponent("LearnOC/Simple%20Storage/NVP/nvp?Method=Get&amp;Name=prefix&amp;EncodeFor=HTML") ?&gt;"</span>;<br>      var prefixOption = <span style="background-color: rgb(255, 255, 51);">$(prefix)</span>;<br>      prefixOption.selected = true;<br>   &lt;/script&gt;<br>&lt;/body&gt;<br></pre>
<p>The &lt;input&gt; tags must be modified to have ids instead of names.&nbsp; This is so we can address them within the AJAX call:<br></p><pre style="margin-left: 40px;">&lt;input type="text" <span style="background-color: rgb(255, 255, 51);">id="first"</span> value="&lt;? WebComponent("LearnOC/Simple%20Storage/NVP/nvp?Method=Get&amp;Name=first&amp;EncodeFor=HTML") ?&gt;" /&gt;<br>&lt;input type="text" <span style="background-color: rgb(255, 255, 51);">id="middle"</span> value="&lt;? WebComponent("LearnOC/Simple%20Storage/NVP/nvp?Method=Get&amp;Name=middle&amp;EncodeFor=HTML") ?&gt;" /&gt;<br>&lt;input type="text" <span style="background-color: rgb(255, 255, 51);">id="last"</span> value="&lt;? WebComponent("LearnOC/Simple%20Storage/NVP/nvp?Method=Get&amp;Name=last&amp;EncodeFor=HTML") ?&gt;" /&gt;<br></pre>
<p>We then need to add a Javascript function in the header to POST through AJAX the updated data.&nbsp; The first thing we do is construct an object, toWrite, that contains the data we will send to the server.&nbsp; We then call the NVP.SetAllJson method.&nbsp; The first argument is the object that contains all of the data.&nbsp; ObjectCloud automatically serializes this to JSON.&nbsp; The last arguments are callbacks.&nbsp; AJAX, and thus ObjectCloud, uses callbacks instead of returning results.&nbsp; This means that the first "Success" function is called if the data is written correctly.&nbsp; "Error" is called if the server returns an error, and "Transport" is called if there is an error communicating with the server.<br></p><pre style="margin-left: 40px;">   &lt;script&gt;<br>      function writename()<br>      {<br>         var toWrite =<br>         {<br>            prefix: $("prefix").value,<br>            first: $("first").value,<br>            middle: $("middle").value,<br>            last: $("last").value<br>         };<br><br>         NVP.SetAllJson(<br>            toWrite,<br>            function() { alert("Success"); },<br>            function() { alert("Error on the server"); },<br>            function() { alert("Transport error");});<br>      }<br>   &lt;/script&gt;<br><br>&lt;/head&gt;<br></pre>
<p>The function callbacks are optional.&nbsp; If they are omitted, ObjectCloud will use a default callback that displays a dialog box.<br></p><p>Don't forget the submit button!&nbsp; It must be modified to call the Javascript writename() function:<br></p><pre style="margin-left: 40px;">&lt;input type="submit" <span style="background-color: rgb(255, 255, 51);">onclick="writename()"</span> /&gt;<br></pre>
<p>When complete, editor.wchtml should look like this.</p><pre style="margin-left: 40px;">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"<br>"http://www.w3.org/TR/html4/strict.dtd"&gt;<br>&lt;html&gt;<br>   &lt;head&gt;<br>      &lt;title&gt;A simple set of Name-Value pairs&lt;/title&gt;<br>      &lt;? Scripts(/API/Prototype.js, /LearnOC/Simple Storage/NVP/nvp?Method=GetJavascriptWrapper&amp;assignToVariable=NVP) ?&gt;<br>      &lt;link href="/Docs/objectcloud.css" type="text/css" rel="stylesheet" /&gt;<br>      &lt;link href="/API/proto.menu.css" type="text/css" rel="stylesheet" /&gt;<br><br>      &lt;script&gt;<br>         function writename()<br>         {<br>            var toWrite =<br>            {<br>               prefix: $("prefix").value,<br>               first: $("first").value,<br>               middle: $("middle").value,<br>               last: $("last").value<br>            };<br><br>            NVP.SetAllJson(<br>               toWrite,<br>               function() { alert("Success"); },<br>               function() { alert("Error on the server"); },<br>               function() { alert("Transport error");});<br>         }<br>      &lt;/script&gt;<br><br>   &lt;/head&gt;<br>   &lt;body&gt;<br>      &lt;select id="prefix"&gt;<br>         &lt;option id="Dr"&gt;Dr&lt;/option&gt;<br>         &lt;option id="Mr"&gt;Mr&lt;/option&gt;<br>         &lt;option id="Mrs"&gt;Mrs&lt;/option&gt;<br>         &lt;option id="Ms"&gt;Ms&lt;/option&gt;<br>         &lt;option id="Sir"&gt;Sir&lt;/option&gt;<br>      &lt;/select&gt;<br>      &lt;input type="text" id="first" value="&lt;? WebComponent("LearnOC/Simple%20Storage/NVP/nvp?Method=Get&amp;Name=first&amp;EncodeFor=HTML") ?&gt;" /&gt;<br>      &lt;input type="text" id="middle" value="&lt;? WebComponent("LearnOC/Simple%20Storage/NVP/nvp?Method=Get&amp;Name=middle&amp;EncodeFor=HTML") ?&gt;" /&gt;<br>      &lt;input type="text" id="last" value="&lt;? WebComponent("LearnOC/Simple%20Storage/NVP/nvp?Method=Get&amp;Name=last&amp;EncodeFor=HTML") ?&gt;" /&gt;<br>      &lt;input type="submit" onclick="writename()" /&gt;<br><br>      &lt;script&gt;<br>         var prefix = "&lt;? WebComponent("LearnOC/Simple%20Storage/NVP/nvp?Method=Get&amp;Name=prefix&amp;EncodeFor=HTML") ?&gt;";<br>         var prefixOption = $(prefix);<br>         prefixOption.selected = true;<br>      &lt;/script&gt;<br>   &lt;/body&gt;<br>&lt;/html&gt;<br></pre><p>Open editor.wchtml and enter a name with a title.&nbsp; Save it.&nbsp; You should see a dialog with "Success."&nbsp; Close editor.wchtml and re-open it.&nbsp; The data should be persisted.</p><p><a href="about.page">About ObjectCloud</a></p>
