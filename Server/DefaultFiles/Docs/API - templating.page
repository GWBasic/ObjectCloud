{"Title":"Creating Dynamic Pages from ObjectCloud's API","Contents":"\n<p>ObjectCloud's templating system uses the API to create dynamic pages. It can handle functions that return JSON objects, arrays of JSON objects, and complete text files.</p><p>This document is an introduction and is not exhaustive.</p><h1>Reading Text Files</h1><p>The templating system is able to work with API functions that return strings. The most common usage is a text file's ReadAll method. For example, <a xmlns=\"http://www.w3.org/1999/xhtml\" href=\"/Shell/Viewers/ReplyViewer.oc?Method=ReadAll\">/Shell/Viewers/ReplyViewer.oc</a>&#160;displays replies:</p><blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><pre>&lt;oc:safeparse oc:xmlparsemode=\"xmlthenhtml\"&gt;\n   &lt;oc:component oc:url=\"[_FileName_]\" Method=\"ReadAll\" /&gt;\n&lt;/oc:safeparse&gt;</pre></blockquote><p>The file that contains the displayed reply is passed as the FileName GET argument.&#160;The inner &lt;oc:component&gt; tag loads FileName's contents and places it into the XML. When it's loaded, tags within the text file aren't parsed for security reasons. The &lt;oc:safeparse&gt; tag removes potentially&#160;malicious&#160;tags.</p><p>Without the &lt;oc:safeparse&gt; tag, if the reply contained any HTML, the user would see the tags instead of the browser rendering the HTML.</p><p>Note that &lt;oc:component&gt; converts all attributes without a namespace, including Method, into GET arguments.</p><h1>Handling JSON Data</h1><h2>Using a single JSON object</h2><p><a xmlns=\"http://www.w3.org/1999/xhtml\" href=\"/Shell/Viewers/EditShare.oc\">/Shell/Viewers/EditShare.oc</a>&#160;uses a single JSON object to display when a file was last modified:</p><blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><pre>&lt;oc:jsontemplate oc:url=\"[_FileName_]\" Method=\"GetInfoAndPermission\"&gt;\n   &lt;span class=\"created\"&gt;Created: &lt;span class=\"date\"&gt;[_Created_]&lt;/span&gt;&lt;/span&gt;\n&lt;/oc:jsontemplate&gt;</pre></blockquote><p>As in the prior example, the file being displayed is passed as the FileName GET argument. The &lt;oc:jsontemplate&gt; tag converts attributes without a namespace, including Method, into GET arguments.</p><p>The GetInfoAndPermission method returns metadata about a file, including when it was created, as a single JSON object. The create date is displayed from [_Created_]. (It's converted to a friendly string using in-browser Javascript.)</p><p>Like all functions that return Javascript, you can <a xmlns=\"http://www.w3.org/1999/xhtml\" href=\"/Docs/API - templating.page?Method=GetInfoAndPermission\">see GetInfoAndPermission's results in a browser</a>.</p><h2>Using an array of JSON objects</h2><p><a xmlns=\"http://www.w3.org/1999/xhtml\" href=\"/Shell/Viewers/BlogumViewer.oc?Method=ReadAll\">/Shell/Viewers/BlogumViewer.oc</a>&#160;uses an array of JSON objects to list all of its contents:</p><blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><pre>&lt;oc:jsontemplate oc:url=\"[_FileName_]\" Method=\"GetRelatedFiles\"\n   relationships=\"['post']\"\n   maxToReturn=\"10\"\n   newest=\"[_newest_]\"\n   FileName=\"[_FileName_]\"&gt;\n   &lt;div class=\"post\"&gt;&lt;oc:safeparse&gt;\n      &lt;oc:component oc:url=\"[_FullPath_]\" Action=\"Preview\" oc:getpassthough=\"false\" MimeOverride=\"text/text\" /&gt;\n   &lt;/oc:safeparse&gt;&lt;/div&gt;&lt;hr /&gt;\n   &lt;div class=\"morelink\"&gt;&lt;a href=\"[__UP.FileName_]?newest=[_Created_]\"&gt;More...&lt;/a&gt;&lt;/div&gt;\n&lt;/oc:jsontemplate&gt;</pre></blockquote><p>The GetRelatedFiles method returns a JSON array of all files that are related to FileName. The &lt;oc:jsontemplate&gt;'s tags contents are repeated for each item in the resulting array.</p><p>Worth noting is the _UP.FileName argument. The &lt;oc:jsontemplate&gt; tag has scope, but its possible to reference its GET arguments by prefixing them with the _UP. name.</p><h2>Using static JSON files</h2><p><a xmlns=\"http://www.w3.org/1999/xhtml\" href=\"/Shell/Viewers/ObjectFooter.oc?Method=ReadAll\">/Shell/Viewers/ObjectFooter.oc</a>&#160;uses static JSON configuration files to determine what components to put at the bottom of an object's viewing page.</p><blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><pre>&lt;oc:jsontemplate oc:datafile=\"/Actions/Security/ByExtension/[_Extension_].json\" fn=\"[__UP.fn_]\"&gt;\n   &lt;oc:if&gt;\n      &lt;oc:hasvalue value=\"[_FooterComponent_]\"&gt;\n         &lt;hr /&gt;\n         &lt;oc:component oc:src=\"[_FooterComponent_]\" FileName=\"[__UP.fn_]\" /&gt;\n      &lt;/oc:hasvalue&gt;\n   &lt;/oc:if&gt;\n&lt;/oc:jsontemplate&gt;</pre></blockquote><p>The oc:datafile takes the full path to a text file. In the above example, Extension is a GET argument that tells the component which configuration file to load.</p><h2>Using JSON GET arguments</h2><p><a xmlns=\"http://www.w3.org/1999/xhtml\" href=\"/Shell/Particle/ConfirmLink.oc?Method=ReadAll\">/Shell/Particle/ConfirmLink.oc</a>&#160;uses JSON GET arguments to list recipients.</p><blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><pre>&lt;oc:jsontemplate oc:data=\"[_recipients_]\"&gt;\n   &lt;span class=\"recipient\"&gt;&lt;a href=\"[__]\"&gt;[__]&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;\n&lt;/oc:jsontemplate&gt;</pre></blockquote><p>recipients is a JSON array of recipients. In this case, because each item in the array is a string instead of an array, [__] is used to display each item in the array.</p>"}