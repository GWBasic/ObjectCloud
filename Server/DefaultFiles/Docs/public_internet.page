{"Title":"Putting ObjectCloud on the Public Internet","Contents":"\u003Cp>\u003Ca href=\"about.page\">About ObjectCloud\u003C/a>\u003C/p>\u003Cp>As distributed, ObjectCloud is intended to allow for an easy and painless test-drive with minimal manual configuration. &nbsp;There are some additional steps that need to be taken when using ObjectCloud on the public internet. &nbsp;These steps require modifying ObjectCloudConfig.xml.\u003C/p>\u003Ch1>Use Linux\u003C/h1>\u003Cp>Currently, Linux is strongly recommended for hosting ObjectCloud as a server.&nbsp; This is because ObjectCloud handles SIGINT, but does not support installing as a Windows Service.\u003C/p>\u003Ch1>Disable Console Logging\u003C/h1>\u003Cp>ObjectCloud logs a lot of information.&nbsp; As distributed, ObjectCloud sends all this information to the console to facilitate debugging and give a view of what's happening inside the server.&nbsp; (This is all the stuff that you see fly through the screen whenever you load a page.)\u003Cbr>\u003C/p>\u003Cp>For performance reasons, Console logging should be disabled when ObjectCloud is being hosted on the public internet or in a multi-user situation.\u003C/p>\u003Cp>To disable Console logging, remove the following tag:\u003C/p>\u003Cpre style=\"margin-left: 40px;\">&lt;!-- When running a real server, this line should be deleted.  Writing to the console really kills performance --&gt;\u003Cbr>&lt;LogHandlerFactory WriteToConsole=\"true\" /&gt;\u003Cbr>\u003C/pre>\u003Cp>You can view the log through the web at \u003Ca target=\"_blank\" title=\"\" href=\"/System/Log\">/System/Log\u003C/a>.\u003Cbr>\u003C/p>\u003Cp>ObjectCloud's logging system is build around \u003Ca target=\"_blank\" title=\"\" href=\"http://netcommon.sourceforge.net/\">Common.Logging\u003C/a>; working with other logging implementations is possible, but officially unsupported.\u003Cbr>\u003C/p>\u003Ch1>Configure the Host Name\u003C/h1>\u003Cp>In order for OpenID and some messaging features to work correctly, ObjectCloud needs to know its host name.&nbsp; When the host name isn't specified, ObjectCloud uses the computer's IP.&nbsp; This setting is fine for experimentation on a LAN, but will not work when ObjectCloud is exposed to the public internet.\u003C/p>\u003Cp>You can get a free host name at \u003Ca target=\"_blank\" title=\"\" href=\"http://www.dyndns.com/\">http://www.dyndns.com/\u003C/a>.\u003Cbr>\u003C/p>\u003Cp>To set the host name, un-comment and edit the following tag:&nbsp; (Remove the &lt;!-- stuff)\u003Cbr>\u003C/p>\u003Cpre style=\"margin-left: 40px;\">&lt;!-- &lt;FileHandlerFactoryLocator Hostname=\"\u003Cspan style=\"background-color: rgb(255, 255, 51);\">somedomain.???\u003C/span>\"/&gt; --&gt;\u003Cbr>\u003C/pre>\u003Cp>Replace the somedomain.??? with the actual host name.\u003Cbr>\u003C/p>\u003Ch1>Change the Port to 80&nbsp; (aka, getting rid of the :1080)\u003Cbr>\u003C/h1>\u003Cp>Most web servers operate on Port 80.&nbsp; On Mac and Linux, this requires an elevated set of permissions.&nbsp; To keep things simple for an easy test-drive, ObjectCloud defaults to port 1080.&nbsp; (This is why the url ends with the funny :1080.)\u003C/p>\u003Cp>To change the port number, update the following tag to state Port=\"80\"\u003Cbr>\u003C/p>\u003Cpre style=\"margin-left: 40px;\">&lt;WebServer\u003Cbr>  Port=\"\u003Cspan style=\"background-color: rgb(255, 255, 51);\">1080\u003C/span>\"\u003Cbr>  RedirectIfRequestedHostIsDifferent=\"true\"\u003Cbr>  MinimizeJavascript=\"true\"\u003Cbr>  /&gt;\u003Cbr>\u003C/pre>\u003Ch1>Open and Forward Port 80\u003Cbr>\u003C/h1>Port 80 must be open on the computer that hosts ObjectCloud, and forwarded from the firewall, router, or proxy.&nbsp; This task is outside of the scope of this document.\u003Cbr>\u003Ch1>(Optional) Disabling Auto-Redirect\u003C/h1>\u003Cp>By default, if an incoming request is for a host other then the one that ObjectCloud is configured for, ObjectCloud will redirect the request to its configured host.&nbsp; For example, if the user types the server's IP into the browser, ObjectCloud will redirect the browser to the same object; but with the configured host name.&nbsp; The same could happen if the server is configured with multiple host names; ObjectCloud will redirect all requests to its configured host name.\u003C/p>\u003Cp>This feature can be turned off by disabling RedirectIfRequestedHostIsDifferent.\u003C/p>\u003Cpre style=\"margin-left: 40px;\">&lt;WebServer\u003Cbr>  Port=\"\u003Cspan style=\"background-color: rgb(255, 255, 255);\">80\u003C/span>\"\u003Cbr>  RedirectIfRequestedHostIsDifferent=\"\u003Cspan style=\"background-color: rgb(255, 255, 51);\">false\u003C/span>\"\u003Cbr>  MinimizeJavascript=\"true\"\u003Cbr>  /&gt;\u003C/pre>\n\u003Ch1>(Optional) Tuning Memory Usage\u003C/h1>\u003Cp>ObjectCloud attempts to hold as much content as possible in RAM.&nbsp; This is because continually reading the disk, especially when serving files with a lot of WebComponents, can become slow.&nbsp; Likewise, starting Rhino is a CPU-intense task, and thus Rhino instances need to be re-used as much as possible.\u003C/p>\u003Cp>Internally, ObjectCloud tracks when various cached objects are accessed.&nbsp; Objects that haven't been accessed recently are much more likely to have their RAM released.&nbsp; By default, ObjectCloud uses the process's MaxWorkingSet to determine when it should attempt to release memory so that it can be used by freshly-loaded objects.&nbsp; There may be some situations where it is desirable to override and explicitly instruct ObjectCloud on how much RAM to use.\u003C/p>\u003Cp>ObjectCloud's caching algorithm is based on .Net or Mono's Garbage collector's estimate of how much RAM is used by managed objects.&nbsp; As a result, the ObjectCloud process may appear to use more RAM then configured.&nbsp; Furthermore, ObjectCloud may release RAM and it may be successfully garbage collected, but .Net or Mono might keep the RAM and not return it to the operating system.&nbsp; Finally, if ObjectCloud suspects that it's not releasing enough memory, it may completely release the contents of the Cache in an attempt to prevent out-of-memory errors.\u003Cbr>\u003C/p>\u003Ch2>Adjusting the Percentage of the Working Set to occupy\u003C/h2>\u003Cp>The simplest tuning parameter to adjust is the percentage of the working set that ObjectCloud will work with.&nbsp; By default, ObjectCloud attempts to stay under 75% of the MaxWorkingSet.&nbsp; This can be adjusted in the WebServer tag:\u003C/p>\u003Cpre style=\"margin-left: 40px;\">&lt;WebServer\u003Cbr>  Port=\"\u003Cspan style=\"background-color: rgb(255, 255, 255);\">80\u003C/span>\"\u003Cbr>  RedirectIfRequestedHostIsDifferent=\"true\"\u003Cbr>  CachePercentOfMaxWorkingSet=\"\u003Cspan style=\"background-color: rgb(255, 255, 0);\">0.85\u003C/span>\"\u003Cbr>  /&gt;\u003C/pre>\u003Cp style=\"margin-left: 40px;\">\u003Cspan style=\"font-weight: bold;\">Note\u003C/span>:&nbsp; \u003Cspan style=\"font-style: italic;\">Setting CachePercentOfMaxWorkingSet too high could result in crashes due to ObjectCloud running out of memory; or poor performance due to excessive page faulting.\u003C/span>\u003Cbr>\u003C/p>\u003Ch2>Overriding to Specific Memory Targets\u003C/h2>\u003Cp>It might be necessary to attempt to explicitly instruct ObjectCloud's cache to target a specific size of managed memory.&nbsp; Due to the nature of garbage collection, ObjectCloud's process will usually occupy more memory then specified.\u003C/p>\u003Cp>There are two tuning parameters:\u003C/p>\u003Cul>\u003Cli>\u003Cspan style=\"font-weight: bold;\">CacheRAMMaxMemory\u003C/span>:&nbsp; ObjectCloud will attempt to never exceed this amount of memory.&nbsp; If the garbage collector estimates that managed memory exceeded this value, in bytes, ObjectCloud will force a garbage collection.&nbsp; If the managed memory still exceeds this amount, ObjectCloud will attempt to make most of the cache eligible for garbage collection.&nbsp; Warning!&nbsp; Setting this value too low will significantly impede performance!\u003Cbr>\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">CacheRAMThreashold\u003C/span>:&nbsp; This is a comma-separated list of memory amounts.&nbsp; If the garbage collector estimates that managed memory is below all of these values, ObjectCloud will continue to allocate new memory without freeing old memory.&nbsp; ObjectCloud will attempt to target the lowest and second-lowest amounts of memory in the list; that is, it will attempt to free memory as it acquires it.&nbsp; Adding larger values to the list will instruct ObjectCloud to aggressively de-allocate memory if the garbage collector estimates that its exceeded the specified memory use.\u003Cbr>\u003C/li>\u003C/ul>In the following example, ObjectCloud will attempt to invalidate its cache if the garbage collector estimates that one gigabyte of managed memory is used.&nbsp; ObjectCloud will continue to allocate memory into the cache until the garbage collector estimates that between 400 - 600 megs are used.&nbsp; When 400 - 600 megs of managed memory are used, ObjectCloud will attempt to release memory as it allocates it.&nbsp; If the garbage collector estimates that memory goes above 600 megs, ObjectCloud will more aggressively de-allocate memory.&nbsp; Likewise, if memory goes above 700, 800, or 900 megs, ObjectCloud will use even more agressive de-allocation techniques.\u003Cbr>\u003Cpre style=\"margin-left: 40px;\">&lt;WebServer\u003Cbr>  Port=\"\u003Cspan style=\"background-color: rgb(255, 255, 255);\">80\u003C/span>\"\u003Cbr>  RedirectIfRequestedHostIsDifferent=\"true\"\u003Cbr>  CacheRAMMaxMemory=\"\u003Cspan style=\"background-color: rgb(255, 255, 0);\">1073741824\u003C/span>\"\u003Cbr>  CacheRAMThreashold=\"\u003Cspan style=\"background-color: rgb(255, 255, 0);\">419430400, 629145600, 734003200, 838860800, 943718400\u003C/span>\"\u003Cbr>  /&gt;\u003C/pre>\u003Ch2>Enforcing Minimums and Maximums in the Cache\u003C/h2>\u003Cp>In the event that tuning the cache based on memory usage isn't working, it's also possible to enforce minimum and maximum total cache reference counts.&nbsp; When setting these parameters, be aware that it's possible for a single object to have many reference counts.&nbsp; A widely-used system object might have hundreds or thousands of reference counts, thus setting the minimums and maximums too low will effectively disable caching.\u003Cbr>\u003C/p>\u003Cp>These parameters are:\u003C/p>\u003Cul>\u003Cli>\u003Cspan style=\"font-weight: bold;\">CacheRAMMinReferences\u003C/span>:&nbsp; This is the minimum number of references to maintain in the cache.&nbsp; When using this, a recommended value is between 100 to 1000.\u003Cbr>\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">CacheRAMMaxReferences\u003C/span>: This is the maximum number of references to maintain in the cache.&nbsp; When using this, a recommended value is between 1000 to 30000.\u003C/li>\u003C/ul>\u003Cpre style=\"margin-left: 40px;\">&lt;WebServer\u003Cbr>  Port=\"\u003Cspan style=\"background-color: rgb(255, 255, 255);\">80\u003C/span>\"\u003Cbr>  RedirectIfRequestedHostIsDifferent=\"true\"\u003Cbr>  CacheRAMMinReferences=\"\u003Cspan style=\"background-color: rgb(255, 255, 0);\">1000\u003C/span>\"\u003Cbr>  CacheRAMMaxReferences=\"\u003Cspan style=\"background-color: rgb(255, 255, 0);\">5000\u003C/span>\"\u003Cbr>  /&gt;\u003C/pre>\n\u003Cp>\u003Ca href=\"about.page\">About ObjectCloud\u003C/a>\u003C/p>\u003Cbr>"}