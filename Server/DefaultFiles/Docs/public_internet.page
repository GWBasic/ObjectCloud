{"Title":"Putting ObjectCloud on the Public Internet","Contents":"<p><a href=\"about.page\">About ObjectCloud</a></p><p>As distributed, ObjectCloud is intended to allow for an easy and painless test-drive with minimal manual configuration. &#160;There are some additional steps that need to be taken when using ObjectCloud on the public internet. &#160;These steps require modifying ObjectCloudConfig.xml.</p><h1>Use Linux</h1><p>Currently, Linux is strongly recommended for hosting ObjectCloud as a server.&#160; This is because ObjectCloud handles SIGINT, but does not support installing as a Windows Service.</p><h1>Disable Console Logging</h1><p>ObjectCloud logs a lot of information.&#160; As distributed, ObjectCloud sends all this information to the console to facilitate debugging and give a view of what's happening inside the server.&#160; (This is all the stuff that you see fly through the screen whenever you load a page.)<br/></p><p>For performance reasons, Console logging should be disabled when ObjectCloud is being hosted on the public internet or in a multi-user situation.</p><p>To disable Console logging, remove the following tag:</p><pre style=\"margin-left: 40px;\">&lt;!-- When running a real server, this line should be deleted.  Writing to the console really kills performance --&gt;<br/>&lt;LogHandlerFactory WriteToConsole=\"true\" /&gt;<br/></pre><p>You can view the log through the web at <a target=\"_blank\" title=\"\" href=\"/System/Log\">/System/Log</a>.<br/></p><p>ObjectCloud's logging system is built around <a target=\"_blank\" title=\"\" href=\"http://netcommon.sourceforge.net/\">Common.Logging</a>; working with other logging implementations is possible, but officially unsupported at this time.<br/></p><h1>Configure the Host Name</h1><p>In order for OpenID and some messaging features to work correctly, ObjectCloud needs to know its host name.&#160; When the host name isn't specified, ObjectCloud uses the computer's IP.&#160; This setting is fine for experimentation on a LAN, but will not work when ObjectCloud is exposed to the public internet.</p><p>You can get a free host name at <a target=\"_blank\" title=\"\" href=\"http://www.dyndns.com/\">http://www.dyndns.com/</a>.<br/></p><p>To set the host name, un-comment and edit the following tag:&#160; (Remove the &lt;!-- stuff)<br/></p><pre style=\"margin-left: 40px;\">&lt;!-- &lt;FileHandlerFactoryLocator\n  Hostname=\"<span style=\"background-color: rgb(255, 255, 51);\">somedomain.???</span>\"\n  CallHomeEndpoint=\"http://objectcloud.kicks-ass.net/Stats/CallHomeTracker?Method=CallHome\" /&gt; --&gt;</pre><p>Replace the somedomain.??? with the actual host name.<br/></p><blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><p><b>Note</b>: <i>There is a call-home option in this tag. Please don't disable it; we use these statistics to count how many ObjectCloud instances are on the internet.</i></p></blockquote><h1>Change the Port to 80&#160; (aka, getting rid of the :1080)<br/></h1><p>Most web servers operate on Port 80.&#160; On Mac and Linux, this requires an elevated set of permissions.&#160; To keep things simple for an easy test-drive, ObjectCloud defaults to port 1080.&#160; (This is why the url ends with the funny :1080.)</p><p>To change the port number, update the following tag to state Port=\"80\"<br/></p><pre style=\"margin-left: 40px;\">&lt;WebServer<br/>  Port=\"<span style=\"background-color: rgb(255, 255, 51);\">1080</span>\"<br/>  RedirectIfRequestedHostIsDifferent=\"true\"<br/>  MinimizeJavascript=\"true\"<br/>  /&gt;<br/></pre><h1>Open and Forward Port 80<br/></h1>Port 80 must be open on the computer that hosts ObjectCloud, and forwarded from the firewall, router, or proxy.&#160; This task is outside of the scope of this document.<br/><h1>(Optional) Disabling Auto-Redirect</h1><p>By default, if an incoming request is for a host other then the one that ObjectCloud is configured for, ObjectCloud will redirect the request to its configured host.&#160; For example, if the user types the server's IP into the browser, ObjectCloud will redirect the browser to the same object; but with the configured host name.&#160; The same could happen if the server is configured with multiple host names; ObjectCloud will redirect all requests to its configured host name.</p><p>This feature can be turned off by disabling RedirectIfRequestedHostIsDifferent.</p><pre style=\"margin-left: 40px;\">&lt;WebServer<br/>  Port=\"<span style=\"background-color: rgb(255, 255, 255);\">80</span>\"<br/>  RedirectIfRequestedHostIsDifferent=\"<span style=\"background-color: rgb(255, 255, 51);\">false</span>\"<br/>  MinimizeJavascript=\"true\"<br/>  /&gt;</pre>\n<h1>(Optional) Tuning Memory Usage</h1><p>ObjectCloud attempts to hold as much content as possible in RAM. This is because continually reading the disk, especially when serving files with a lot of components, can become slow.</p><p>Internally, ObjectCloud uses a least-recently-used RAM cache that frees unused in-memory objects. The default configuration is to track no more then 500 objects, although this can be tuned based on a percentage of the working set or by explicit memory targets.</p><p><meta charset=\"utf-8\"/></p><h2>Enforcing Minimums and Maximums in the RAM Cache</h2><p></p><p>In the default ObjectCloudConfig.xml, ObjectCloud is configured to keep a maximum of 500 objects in RAM. This is the easiest way to configure ObjectCloud's RAM usage, although it is inaccurate as objects' RAM footprints vary greatly.&#160;Setting these values too low essentially means that ObjectCloud will read from disk more often, resulting in slower performance. Setting these values too high could cause ObjectCloud to use too much RAM.</p><p>These parameters are:</p><ul><li><span style=\"font-weight: bold; \">CacheRAMMinReferences</span>:&#160; This is the minimum number of references to maintain in the cache.<br/></li><li><span style=\"font-weight: bold; \">CacheRAMMaxReferences</span>: This is the maximum number of references to maintain in the cache.</li></ul><pre style=\"margin-left: 40px; \">&lt;WebServer<br/>  Port=\"<span style=\"background-color: rgb(255, 255, 255); \">80</span>\"<br/>  RedirectIfRequestedHostIsDifferent=\"true\"<br/>  CacheRAMMinReferences=\"<span style=\"background-color: rgb(255, 255, 0); \">0</span>\"<br/>  CacheRAMMaxReferences=\"<span style=\"background-color: rgb(255, 255, 0); \">500</span>\"<br/>  /&gt;</pre><div><meta charset=\"utf-8\"/><h2>Explicitly configuring Memory Target usage</h2><p>You can explicitly instruct ObjectCloud's cache to target a specific size of managed memory.&#160; Due to the nature of garbage collection, ObjectCloud's process will usually occupy more memory then specified.</p><p>There are two tuning parameters:</p><ul><li><span style=\"font-weight: bold; \"><meta charset=\"utf-8\"/><span class=\"Apple-style-span\" style=\"font-weight: normal; \"><span style=\"font-weight: bold; \">CacheRAMThreashold</span></span><span class=\"Apple-style-span\" style=\"font-weight: normal; \">:&#160; This is a comma-separated list of memory amounts, in bytes. If the garbage collector estimates that managed memory is below all of these values, ObjectCloud will continue to allocate new memory without freeing old memory. Once the garbage collector estimates that memory use is above the smallest value, ObjectCloud will deallocate memory as it allocates memory. As memory usage increases above additional values, ObjectCloud will more&#160;aggressively&#160;de-allocate memory.</span></span></li><li><span style=\"font-weight: bold; \">CacheRAMMaxMemory</span>:&#160; ObjectCloud will attempt to never exceed this amount of memory.&#160; If the garbage collector estimates that managed memory exceeded this value, in bytes, ObjectCloud will force a garbage collection.&#160; If the managed memory still exceeds this amount, ObjectCloud will attempt to make most of the cache eligible for garbage collection.&#160; Warning!&#160; Setting this value too low will significantly impede performance!</li></ul><p>In the following example,&#160;ObjectCloud will continue to allocate memory into the cache until the garbage collector estimates that between 400 - 600 megs are used. When 400 - 600 megs of managed memory are used, ObjectCloud will attempt to release memory as it allocates it.&#160; If the garbage collector estimates that memory goes above 600 megs, ObjectCloud will more aggressively de-allocate memory. Likewise, if memory goes above 700, 800, or 900 megs, ObjectCloud will use even more agressive de-allocation techniques.&#160;ObjectCloud will attempt to invalidate its cache if the garbage collector estimates that one gigabyte of managed memory is used.</p><meta charset=\"utf-8\"/></div><div><pre style=\"margin-left: 40px; \">&lt;WebServer<br/>  Port=\"<span style=\"background-color: rgb(255, 255, 255); \">80</span>\"<br/>  RedirectIfRequestedHostIsDifferent=\"true\"<br/>  CacheRAMMaxMemory=\"<span style=\"background-color: rgb(255, 255, 0); \">1073741824</span>\"<br/>  CacheRAMThreashold=\"<span style=\"background-color: rgb(255, 255, 0); \">419430400, 629145600, 734003200, 838860800, 943718400</span>\"<br/>  /&gt;</pre></div><br/>"}