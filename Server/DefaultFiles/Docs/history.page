<div>History and Direction of ObjectCloud</div>
<p>Andrew Rondeau started ObjectCloud in November 2008, and transitioned to full-time work on ObjectCloud in late July 2009. &nbsp;Currently Andrew is attempting to use parts of ObjectCloud in&nbsp;commercial&nbsp;applications. &nbsp;This page describes the history of ObjectCloud by describing initial goals, philosophy, and design&nbsp;decisions.</p><h1>Prior to ObjectCloud</h1><p>Prior to ObjectCloud, Andrew worked on a few different web applications that laid a foundation for inspiring ObjectCloud's design.<br></p><h2>Memmexx (2006-2007)</h2><p>The inspiration for Memmexx came from a design challenge that Andrew posed: &nbsp;"What is the first web site that I'd want to visit when I open the browser?" &nbsp;Memmexx's goal was to pull together bookmarking, history, and web applications into a central starting point as a home page. &nbsp;It then extended into a custom Windows shell that made web applications appear like desktop applications in a manner similar to Firefox's&nbsp;Prism. &nbsp;This shell&nbsp;synchronized&nbsp;itself among all computers that the user used; thus allowing the user to seamlessly use many computing devices without needing to manually maintain each device.</p><p>Steve Wozniak inspired Memmexx's core lesson: &nbsp;"Stay close to the metal." &nbsp;Andrew initially tried implementing Memmexx in ASP.Net, but quit because ASP.Net put too many layers over how the web really works. &nbsp;Andrew chose to write his own web server technology for after listening to Steve Wozniak speak about how good technology development requires that the developer stay "close to the metal" when creating technology. &nbsp;Upon listening to Woz speak about how too many abstractions can get in the way, Andrew realized that he could be&nbsp;successful&nbsp;with Memmexx if he created his own web server technology instead of working around&nbsp;poor abstractions in ASP.Net and Apache. &nbsp;This&nbsp;influenced&nbsp;Andrew's&nbsp;decision&nbsp;to implement ObjectCloud as its own web server instead of working with the limitations of existing web development technologies and frameworks.</p><p>Another lesson from Memmexx that Andrew learned is that privacy is a real concern of end users. &nbsp;Andrew found that a vocal group of end users want real control over their data. &nbsp;This influenced his&nbsp;decision&nbsp;to design ObjectCloud in such a way that the end user can host his or her instance, if desired.</p><p>Andrew decided not to open Memmexx to the public because a feature within the system had a security flaw that would require some significant work to mitigate. &nbsp;Instead of opening Memmexx to the public, Andrew decided to concentrate on learning how to write desktop-like web-based applications.</p><h2>GearPod (2007)</h2><p>GearPod was an attempt to use two new Google web development technologies, GWT and Google Gears, to create a desktop-like application. &nbsp;The <a href="http://andrewrondeau.com/com.Memmexx.GearPod/GearPod.html" title="" target="_blank">first version of GearPod</a> was a proof-of-concept web-based MP3 player that had a few MP3s hardcoded into the library. &nbsp;It takes on the&nbsp;appearance&nbsp;of music players like Windows Media Player and WinAmp.</p><p>Later in 2007, Andrew re-wrote GearPod to include an MP3 search engine and drag-and-drop playlist generation. &nbsp;The search engine scraped Google and other MP3 search sites. &nbsp;This version was never opened to the public due to fear of a lawsuit. &nbsp;(SeeqPod, a similar commercial site, was sued in January 2008.)</p><p>Andrew originally used Apache and PHP for GearPod's backend, although he later ported the backend to run on the Memmexx web server technology.</p><p>The second version of GearPod was well&nbsp;received, although scraping other search engines to find MP3s proved fragile.</p><h2>Asumaku (2008)</h2><p>After GearPod and some other projects, Andrew decided that he wanted to develop something fun and socially interactive. &nbsp;Asumaku was an attempt to let anyone add a comment or discussion about any web site, and then later, any search. &nbsp;The Asumaku system displayed a chat system in one frame, and a web site (or search results) in another frame. &nbsp;The eventual goal was to allow people who were searching for similar things to "bump into each other" and interact with each other.<br></p><div><p>Andrew originally used Apache and PHP for Asumaku's backend, although he later ported the backend to run on the Memmexx web server technology. &nbsp;Porting Asumaku was a lesson in itself; most commodity web hosting companies didn't not allow any form of chat sites due to the large load that the put onto Apache. &nbsp;Thus, Asumaku was ported to Memmexx out of economic&nbsp;necessity.</p></div><h2>Lessons Learned</h2><div><ol><li><b>Privacy and openness is important:</b>&nbsp;&nbsp;A vocal minority of users will need to host their own data. &nbsp;In order to succeed, trust between the user and the software developer must be mutual; sometimes the user will need to trust the software developer or a third party with his/her data; and in other cases, the software developer will need to trust that the user doesn't pirate the software.</li><li><b>True innovation requires comfort at the lowest level:</b>&nbsp;&nbsp;The major web server development platforms, Apache and ASP.Net; and their frameworks, have limitations in their abstractions that can get in the way of innovation. &nbsp;In order to truly innovate on the web, one must be comfortable programming at the lowest levels.</li><li><b>The web can replace the desktop:</b>&nbsp;&nbsp;Provided that the right backend is present, technologies like HTML, Javascript, and Flash can create portable applications that rival desktop applications yet transcend the barriers of a single physical machine.</li></ol><h1>Inspiration</h1></div><p>ObjectCloud grew out of an idea that Andrew had for Memmexx called WebDOS. &nbsp;Essentially, WebDOS would be a central location for all of a Memmexx user's documents, and would allow accessing these documents from any internet-connected device, such as a mobile phone. &nbsp;This idea was re-incarnated when Andrew met Walter Roth, and Walter showed Andrew a product named Spoxel. &nbsp;Spoxel was an online file browser that allowed&nbsp;hierarchal&nbsp;navigation and online document editing. &nbsp;The moment of inspiration was when Andrew realized that web-based operating system replacements like Spoxel could only be successful if they were self-describing; that is, as much as the system as possible needed to be written and programmed in the system itself. &nbsp;This essentially means that web-based file systems need to have a significant majority of their business and presentation logic declared in the same file system that user data is stored in.<br></p><p>This is how Windows, MacOS, and Linux are created. &nbsp;With the exception of tiny program stored in a special place on the hard drive; all desktop operating systems store the complete operating system and applications in the user-visible file system; as opposed to hiding it like conventional web applications do.<br></p><h1>Initial Philosophy and Design Constraints</h1><p>Andrew initially called ObjectCloud "WebDOS." &nbsp;The initial philosophy was to build web applications using the same design approach that one uses when building a desktop application. &nbsp;The web server would be designed just like an operating system, and provide a file I/O API in Javascript through AJAX, and it would enforce user permissions for security. &nbsp;It would contain files and directories that map directly with the URL; that is, "http://myserver.com/myfolder" would be a user-manipulatable folder. &nbsp;Theoretically, the core of the server would only be smart enough to serve just enough HTML, Javascript, and images so that the application would load in the browser and handle all needed logic.</p><h2>Introduction of WebComponents</h2><p>Wanted to avoid pulling in JavaScript from all over the web.</p><h1>Necessity&nbsp;of Server-Side Javascript</h1><p>Andrew chose Javascript over other scripting languages to minimize ObjectCloud's development learning curve and avoid requiring mastering many languages; AND because Javascript lends itself to developing seamless RPC systems. &nbsp;This&nbsp;decision&nbsp;is somewhat painful as there are no good Javascript interpreters for .Net, thus requiring that Andrew use a trick to convert a Java Javascript interpreter into a .Net dll.</p><p>What's vital, however, is that server-side Javascript is written using the same tools as browser-side Javascript. &nbsp;The primary difference is that server-side Javascript should use the synchronous version of ObjectCloud's AJAX API, and browser-side Javascript should use the&nbsp;asynchronous&nbsp;version of the API.</p>