{"Title":"ObjectCloud's Web Development Philosophy","Contents":"<p><a href=\"about.page\">About ObjectCloud</a></p><p>ObjectCloud's web-development philosophy can be summarized as follows: \"work with the web browser to provide applications that behave in normal and predictable ways.\"&#160; The built-in functionality in ObjectCloud should feel like a web site, because that is what users expect. &#160;ObjectCloud doesn't work against the browser to try to emulate a desktop environment.</p><p>When developing an application on top of ObjectCloud, you may follow ObjectCloud's philosophy if you wish.<br/></p><p>The principles of ObjectCloud's web-development philosophy are listed below:</p><ul><li><span style=\"font-weight: bold;\">Don't work against the fit and finish of the browser</span>:&#160; Web applications should look and feel like web applications.&#160; For example, instead of implementing right-click in the file system; a drop-down button was placed next to the file name.&#160; This is because user's expect that right-click will behave the same whenever it is performed against any hyperlink.&#160; Likewise, ObjectCloud never tries to hide the browser's chrome.<br/></li><li><span style=\"font-weight: bold;\">Javascript everywhere</span>:&#160; ObjectCloud assumes that Javascript is globally implemented and therefore makes liberal use of client-side Javascript instead of server-side HTML rendering.<br/><span style=\"font-weight: bold;\"></span></li><li><span style=\"font-weight: bold;\">No extraordinary effort for any browser</span>:&#160; Ideally, a web application will run in every browser.&#160; Sadly, differences and incompatibilities in popular browsers make this hard to accomplish.&#160; ObjectCloud makes heavy use of <a target=\"_blank\" title=\"\" href=\"http://www.prototypejs.org/\">Prototype.js</a> and other abstraction libraries to try to hide browser incompatibilities from the developer.&#160; Sometimes, these libraries and a little tweaking allow a program to work in all of the major browsers.&#160; When a specific browser requires too much work for a piece of functionality, there might be a minor display glitch.&#160; In cases that use new parts of HTML, some browsers might just not be supported.<br/><span style=\"font-weight: bold;\"></span></li><li><span style=\"font-weight: bold;\">Prefer open web standards</span><br/><span style=\"font-weight: bold;\"></span></li><ul><li><span style=\"font-weight: bold;\">When possible, stick with HTML, Javascript, and some images</span>:&#160; ObjectCloud doesn't use Flash, Flex, or Silverlight.&#160; While these are excellent technologies, none of ObjectCloud's core functionalities require them.&#160; Therefore, to achieve maximum compatibility, ObjectCloud prefers HTML, Javascript, and images.&#160; An exception to this rule is that ObjectCloud has some IE hooks that use <a target=\"_blank\" title=\"\" href=\"http://code.google.com/chrome/chromeframe/\">ChromeFrame</a>.<br/></li><li><span style=\"font-weight: bold;\">Stick with pure OpenID</span>:&#160; Major web sites often have proprietary extensions for OpenID.&#160; The standard refers to this as directed OpenID.&#160; An example is Facebook Connect.&#160; These services will remain out of ObjectCloud's default distribution, although you are free to use them in any site built with ObjectCloud.<br/></li></ul><li><span style=\"font-weight: bold;\">Practical separation of data, logic, and presentation</span>:&#160; A good design technique is to separate data, logic, and presentation.&#160; (Example:&#160; Someone editing a .page file doesn't care about headers, footers, and .css.)&#160; It's important that techniques used to achieve separation don't get in the way when someone \"wants to get something done.\"&#160; ObjectCloud achieves its separation through implied file types, liberal use of Javascript (logic) and JSON (data), and WebComponents.&#160; The following conventions are used in ObjectCloud:</li><ul><li>.webcomponent and .wchtml files contain \"presentation\" logic.</li><li>Data returned from the server is typically JSON.</li><li>.webcomponent and .wchtml files render JSON with Javascript.</li><li>Files that strictly contain data usually don't have presentation.&#160; These include .json, .page, .vote, .blog, and .blogpost.</li></ul><li><span style=\"font-weight: bold;\">Don't rely on external 3'rd party services</span>:&#160; As distributed, all functionality in ObjectCloud must work if ObjectCloud is hosted in isolation from the public internet.&#160; 3rd party services that rely on loading scripts from the public internet are fundamentally unreliable because these services could break or mutate; thus breaking ObjectCloud.</li></ul><a href=\"about.page\">About ObjectCloud</a>"}