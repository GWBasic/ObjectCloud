{"Title":"Secure Storage with Server-Side Javascript","Contents":"\u003Cp>\u003Ca href=\"about.page\">About ObjectCloud\u003C/a>\u003C/p>\u003Cp>A limitation of the data persistence techniques shown in \u003Ca target=\"\" title=\"\" href=\"simple%20storage%20walkthrough.page\">Simple storage\u003C/a> is that they have very limited security. &nbsp;The techniques might suffice when only a small number of trusted people have write access, but what if we want anyone on the internet to write information? &nbsp;If we allow everyone with an internet connection to modify a file in any way they see fit; they might make modifications that we don't want, or that could break our program! &nbsp;In these situations, we can enforce data validity by with server-side Javascript.\u003C/p>\u003Cp style=\"margin-left: 40px;\">\u003Cspan style=\"font-weight: bold;\">Note\u003C/span>:&nbsp; \u003Cspan style=\"font-style: italic;\">ObjectCloud uses a multi-process system to host server-side Javascript. &nbsp;The current Javascript interpreter is&nbsp;\u003C/span>\u003Ca style=\"font-style: italic;\" target=\"_blank\" title=\"\" href=\"http://www.mozilla.org/rhino/\">Rhino\u003C/a>\u003Ci>, although a long-term goal is to switch to V8.\u003C/i>\u003Cspan style=\"font-style: italic;\">&nbsp;&nbsp;Previous versions of ObjectCloud&nbsp;\u003C/span>\u003Ca style=\"font-style: italic;\" target=\"_blank\" title=\"\" href=\"http://www.codeproject.com/KB/cs/EmbeddingJSCS.aspx\">translated into a CLR-compliant .dll file\u003C/a>\u003Ci>, although this approach is no longer used because the multi-process model is faster and more stable.\u003C/i>\u003Cbr>\u003C/p>\u003Cp>To learn about using server-side Javascript when rendering HTML, see&nbsp;\u003Ca href=\"/Docs/Mixing Server Side JS and HTML.page\" title=\"\" target=\"\">Mixing Server Side Javascript and HTML\u003C/a>.\u003C/p>\u003Cp>Performance issues are discussed at the end of this page.\u003C/p>\u003Ch1>Classes\u003Cbr>\u003C/h1>\u003Cp>Server-Side Javascript borrows the \"class\" concept from Object-Oriented programming.&nbsp; All classes are stored in the \u003Ca target=\"_blank\" title=\"\" href=\"../Classes\">/Classes\u003C/a> folder.&nbsp; Each class is a text file without an extension that contains Javascript.&nbsp; When creating a class, the server-side code applies to all files with the same extension as the class name.\u003C/p>\u003Cp>For example, for a class named foo:\u003C/p>\u003Cul>\u003Cli>The javascript would be stored in a text file in /Classes/foo\u003C/li>\u003Cli>\u003Cspan style=\"text-decoration: line-through;\">Files\u003C/span> Objects named \"file.foo,\" \"xyz.foo,\" and \"blah.foo\" would be handled by the Javascript in /Classes/foo.\u003C/li>\u003C/ul>\u003Cp style=\"margin-left: 40px;\">\u003Cspan style=\"font-weight: bold;\">Note\u003C/span>:&nbsp; \u003Cspan style=\"font-style: italic;\">If a folder has a Classes sub-folder, the classes in the sub-folder override any classes in the \u003C/span>\u003Ca style=\"font-style: italic;\" target=\"_blank\" title=\"\" href=\"../Classes\">/Classes\u003C/a>\u003Cspan style=\"font-style: italic;\"> folder.\u003C/span>\u003C/p>\u003Cp style=\"margin-left: 40px;\">\u003Cspan style=\"font-weight: bold;\">Note\u003C/span>:&nbsp; \u003Cspan style=\"font-style: italic;\">All server-side Javascript files must be owned by a member of the administrators group.\u003C/span>\u003Cbr>\u003C/p>\u003Ch1>Encapsulation\u003C/h1>\u003Cp>When a class is created, the \u003Cspan style=\"text-decoration: line-through;\">file's\u003C/span> object's underlying methods are no longer accessible to the web, and therefore, no longer callable through AJAX.&nbsp; Instead, the Javascript methods are made accessible to the web and AJAX.&nbsp; The server-side Javascript can, however, call the underlying methods when storing or retrieving data.&nbsp; Within server-side Javascript, the underlying \u003Cspan style=\"text-decoration: line-through;\">file's\u003C/span> object's methods are placed into the \"base\" object.\u003C/p>\u003Cp>\u003C/p>\u003Cp>To enable access to underlying web-accessible methods, the server-side JavaScript must set some options, as follows:\u003C/p>\u003Cpre style=\"margin-left: 40px; \">var options =\u003Cbr>{\u003Cbr>   BlockWebMethods: false\u003Cbr>};\u003Cbr>\u003C/pre>\u003Cp style=\"margin-left: 40px; \">\u003Cspan style=\"font-weight: bold; \">Note:\u003C/span>&nbsp;&nbsp;\u003Cspan style=\"font-style: italic; \">Be careful when setting BlockWebMethods to false.&nbsp; If your server-side JavaScript needs to validate data prior to persisting it, then you could open a potential security hole!\u003C/span>\u003C/p>\u003Cp>\u003C/p>\u003Ch1>Persistence, Isolation, and Run-Time data\u003Cbr>\u003C/h1>\u003Cp>All data must be persisted by calling the underlying base object.&nbsp; Data stored in runtime variables is not saved and will be discarded at some point in the future. &nbsp;All users share the same scope, thus care must be taken to not expose users' private data to other users. &nbsp;Furthermore, ObjectCloud supports concurrent access to server-side Javascript, thus care must be taken to ensure that errors are not introduced due to threading issues.\u003C/p>\u003Cp>In some cases, it is possible to improve page responsiveness by caching data in server-side Javascript variables. &nbsp;When doing this, care must be taken to ensure that data is loaded and persisted correctly, as the entire scope, and thus variables in it, can be garbage collected at any time.\u003C/p>\u003Cp>Whenever a server-side Javascript class is modified; upon making a call to an object of that class, all in-memory objects will have their scope destroyed. &nbsp;This means that, during development, whenever a server-side Javascript class is modified, all in-RAM variables are lost, and there will be a short pause when using the class for the first time while it is compiled.\u003C/p>\u003Cp style=\"margin-left: 40px;\">\u003Cspan style=\"font-weight: bold;\">Note\u003C/span>:&nbsp; \u003Cspan style=\"font-style: italic;\">Feedback on these constraints is welcome, encouraged, and valued. &nbsp;Previous versions of ObjectCloud gave each user a private and isolated scope, although this approach is no longer taken due to performance implications.\u003C/span>\u003Cbr>\u003C/p>\u003Ch1>Debugging\u003C/h1>\u003Cp>Minimal debugging is supported.&nbsp; To debug, append ?Method=GetServersideJavascriptErrors when viewing a file of a given class.&nbsp; For example, to debug /Classes/foo, visit /MyFiles/myfoo.foo?Method=GetServersideJavascriptErrors\u003C/p>\u003Cp>A rudimentary database program, Whisquil, is provided:&nbsp; \u003Ca target=\"_blank\" title=\"\" href=\"/Shell/Editors/Whisquil.wchtml?Method=ReadAll\">/Shell/Editors/Whisquil.wchtml\u003C/a>.&nbsp; To view a database, visit /Shell/Editors/Whisquil.wchtml?FileName=[file name].&nbsp; For example, to view /MyFiles/myfoo.foo, visit /Shell/Editors/Whisquil.wchtml?FileName=/MyFiles/myfoo.foo.\u003Cbr>\u003C/p>\u003Ch1>Exposing a Function to the Web\u003Cbr>\u003C/h1>\u003Cp>By default, all functions in server-side Javascript are not exposed to the web.&nbsp; This is to prevent unanticipated behavior if malicious parties call functions that aren't intended for the web.&nbsp; How ObjectCloud exposes a Javascript function to the web is controlled by setting values on the function.\u003C/p>\u003Cp>For example, from \u003Ca target=\"_blank\" title=\"\" href=\"/Classes/ibg\">/Classes/ibg\u003C/a>, the following values control how the updateNode function is exposed to the web:\u003C/p>\u003Cpre style=\"margin-left: 40px;\">updateNode.webCallable = \"POST_application_x_www_form_urlencoded\";\u003Cbr>updateNode.minimumWebPermission = \"Write\";\u003Cbr>updateNode.parser_id = \"number\";\u003Cbr>updateNode.webReturnConvention = \"JavaScriptObject\";\u003Cbr>function updateNode(id, version, contents, changetag)\u003Cbr>{\u003Cbr>\u003C/pre>\u003Cp>The .webCallable is the only value that is needed to expose a function to the web.&nbsp; The rest of the values give finer control over how ObjectCloud accesses the function.&nbsp; These values are described throughout this section.\u003C/p>\u003Ch2>.webCallable\u003C/h2>\u003Cp>All functions that are exposed to the web must have their .webCallable value set.&nbsp; This value tells ObjectCloud what HTTP method is used, and how the arguments are encoded.&nbsp; The following are the valid values for .webCallable:\u003C/p>\u003Cul>\u003Cli>\u003Cspan style=\"font-weight: bold;\">GET\u003C/span>:&nbsp; Function is called with an HTTP GET.&nbsp; No arguments are passed.\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">GET_application_x_www_form_urlencoded\u003C/span>:&nbsp; Function is called with an HTTP GET.&nbsp; Arguments are passed as url-encoded values in the URL.\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">POST_application_x_www_form_urlencoded\u003C/span>:&nbsp; Function is called with an HTTP POST.&nbsp; Arguments are passed as url-encoded values in the POST body.\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">POST_string\u003C/span>:&nbsp; Function is called with an HTTP POST.&nbsp; A single value is passed, it is included in the POST body as a string.\u003Cbr>\u003C/li>\u003C/ul>\u003Cp>The GET calling conventions should be used for functions that primarily read, and the POST calling conventions should be used for functions that primarily write.&nbsp; This is due to the HTTP semantics of GET versus POST.&nbsp; Typically, GET requests aren't supposed to change the server's state; except for inconsequential actions like logging.\u003C/p>\u003Ch2>\u003Cspan style=\"font-weight: bold;\">\u003C/span>.minimumWebPermission\u003C/h2>\u003Cp>By default, when a function is exposed to the web, only a person with \"Administer\" permission to the \u003Cspan style=\"text-decoration: line-through;\">file\u003C/span> object can call the function.&nbsp; The minimum permission can be lowered to \"Write\" or \"Read\" by specifying the .minimumWebPermission.\u003C/p>\u003Cp>The following values are valid for .minimumWebPermission:\u003C/p>\u003Cul>\u003Cli>\u003Cspan style=\"font-weight: bold;\">Read\u003C/span>\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">Write\u003C/span>&nbsp; (A person with Write access can also call functions that require Read access)\u003Cbr>\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">Administer\u003C/span>&nbsp; (A person with Administer access can call all functions.)\u003Cbr>\u003C/li>\u003C/ul>\u003Cp style=\"margin-left: 40px;\">\u003Cspan style=\"font-weight: bold;\">Note\u003C/span>:&nbsp; \u003Cspan style=\"font-style: italic;\">In some circumstances, server-side Javascript can call into other objects.&nbsp; In these circumstances, it can utilize an elevated permission.&nbsp; This is described in the Elevate() section.&nbsp; A server-side Javascript function can declare a lower permission with the .minimumLocalPermission value.\u003C/span>\u003Cbr>\u003C/p>\u003Ch2>.namedPermissions\u003C/h2>\u003Cp>Sometimes \"Read\", \"Write\", and \"Administer\" aren't fine grained enough to effectively control who can access what function.&nbsp; Named Permissions allows for more specific permissions for groupings of functions.\u003C/p>\u003Cp>The .namedPermissions value takes a comma-seperated list of valid named permissions for a function.&nbsp; Any user who has a named permission for the file, is a member of a group that has a named permission for a file, or has such a named permission at a higher-level directory with inhert turned on can call the function.\u003C/p>\u003Cp>TODO:&nbsp; Setting named permissions is currently undocumented, although it is anticipated that named permissions will require some form of a custom GUI in order to set.\u003Cbr>\u003C/p>\u003Ch2>.parser_*\u003C/h2>\u003Cp>Sometimes, ObjectCloud needs a hint about what kind of data the function expects in an argument.&nbsp; By default, ObjectCloud will treat all arguments as strings.&nbsp; Although Javascript's weak typing system can automatically translate some strings into numbers or booleans, this behavior occasionally introduces non-deterministic behavior and unintended side effects.&nbsp; The .parser_* values are used in situations where a number, boolean, or JSON-encoded object is expected.&nbsp; Valid values are:\u003C/p>\u003Cul>\u003Cli>\u003Cspan style=\"font-weight: bold;\">number\u003C/span>:&nbsp; ObjectCloud attempts to parse the argument into a double-precision value.&nbsp; If parsing fails, the string is passed as-is.\u003Cbr>\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">bool\u003C/span>:&nbsp; ObjectCloud attempts to parse the argument into a boolean value.&nbsp; If parsing fails, the string is passed as-is.\u003Cbr>\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">JSON\u003C/span>:&nbsp; ObjectCloud attempts to decode a JSON-encoded object.&nbsp; If parsing fails, a 422 (Unprocessable Entity) is returned to the caller.\u003C/li>\u003C/ul>\u003Cp>For example:\u003C/p>\u003Cpre style=\"margin-left: 40px;\">myfunc.webCallable = \"POST_application_x_www_form_urlencoded\";\u003Cbr>myfunc.parser_argAsNum = \"number\";\u003Cbr>myfunc.parser_argAsBool = \"bool\";\u003Cbr>myfunc.parser_argAsJSON = \"JSON\";\u003Cbr>function myfunc(argAsNum, argAsBool, argAsJSON)\u003Cbr>{\u003Cbr>\u003C/pre>\u003Ch1>.webReturnConvention\u003C/h1>\u003Cp>The .webReturnConvention is an optional field that describes how the client will handle the returned data.&nbsp; ObjectCloud uses .webReturnConvention to help Javascript that runs in the browser parse the results of the server-side call.&nbsp; Valid values are:\u003C/p>\u003Cul>\u003Cli>\u003Cspan style=\"font-weight: bold;\">Primitive\u003C/span>:&nbsp; The function returns a string, number, or boolean.\u003Cbr>\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">JSON\u003C/span>:&nbsp; The function either returns an object, or a string that is a JSON-encoded object.&nbsp; The browser-side Javascript will get an automatically-decoded object.\u003Cbr>\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">JavaScriptObject\u003C/span>:&nbsp; The function either returns an object, a string that is a\nJSON-encoded object, or Javascript.&nbsp; This will be eval()-ed and its result passed to the browser-side Javascript.\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">Status\u003C/span>:&nbsp; No value is returned to the browser-side Javascript.\u003Cbr>\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">Naked\u003C/span>:&nbsp; The browser-side Javascript gets un-parsed results.\u003Cbr>\u003C/li>\u003C/ul>\u003Cp>JSON and JavaScriptObject allow a server-side function to return an object that is transparently serialized and then de-serialized for browser-side Javascript.&nbsp; There is a speed / security tradeoff, described below.\u003Cbr>\u003C/p>\u003Cdiv style=\"margin-left: 40px;\">\u003Cspan style=\"font-weight: bold;\">Note\u003C/span>:&nbsp; \u003Cspan style=\"font-style: italic;\">The difference between JSON and JavaScriptObject is very important.&nbsp; \"JSON\" will make the browser use Prototype.js's \u003C/span>\u003Ca style=\"font-style: italic;\" target=\"_blank\" title=\"\" href=\"http://www.prototypejs.org/api/string/evalJSON\">String.evalJSON()\u003C/a>\u003Cspan style=\"font-style: italic;\"> function to parse the results; \"JavaScriptObject\" will make the browser use \u003C/span>\u003Ca style=\"font-style: italic;\" target=\"\" title=\"\" href=\"http://en.wikipedia.org/wiki/Eval#JavaScript\">eval()\u003C/a>\u003Cspan style=\"font-style: italic;\"> to parse the object.&nbsp; \"JavaScriptObject\" is much faster then \"JSON,\" but it can introduce a security risk.&nbsp; Only use \"JavaScriptObject\" when returning objects that ObjectCloud will serialize to JSON, or when using strings that are validated to be pure JSON.&nbsp; Future versions of ObjectCloud might introduce a filter for JSON and rely on eval().&nbsp; Feedback on this issue is encouraged.\u003C/span>\u003Cbr>\u003C/div>\u003Ch1>Calling a Server-Side function from In-Browser Javascript\u003C/h1>\u003Cp>The eventual purpose of server-side Javascript is to save data on the server.&nbsp; All of the underlying object's functions are placed within the base object.\u003C/p>\u003Cp>For example, \u003Ca target=\"_blank\" title=\"\" href=\"/Classes/ibg\">/Classes/ibg\u003C/a> turns a name-value pairs \u003Cspan style=\"text-decoration: line-through;\">file\u003C/span> object with a .ibg extension into a linked list.&nbsp; The function updateNode updates the contents of a node in the linked list.&nbsp; Prior to updating the node, it loads the node and verifies that the caller has the correct version:\u003C/p>\u003Cpre style=\"margin-left: 40px;\">// updateNode\u003Cbr>\u003Cbr>updateNode.webCallable = \"POST_application_x_www_form_urlencoded\";\u003Cbr>updateNode.minimumWebPermission = \"Write\";\u003Cbr>updateNode.parser_id = \"number\";\u003Cbr>updateNode.webReturnConvention = \"JavaScriptObject\";\u003Cbr>function updateNode(id, version, contents, changetag)\u003Cbr>{\u003Cbr>   var nodeAsString;\u003Cbr>   elevate(function()\u003Cbr>   {\u003Cbr>      nodeAsString = \u003Cspan style=\"background-color: rgb(255, 255, 51);\">base.Get_Sync(\n      {\n         Name: id\n      });\u003C/span>\u003Cbr>   });\u003Cbr>   \u003Cbr>   var node = eval('(' + nodeAsString + ')');\u003Cbr>\u003Cbr>   throwExceptionOnForbiddenChange(node, contents);\u003Cbr>\u003Cbr>   if (node.v != version)\u003Cbr>      throwWebResultOverrideException(400, \"Wrong version\");\u003Cbr>\u003Cbr>   if (node.c != contents)\u003Cbr>   {\u003Cbr>      node.c = contents;\u003Cbr>      node.v = updateVersionNumber(node.v);\u003Cbr>      node.t = changetag;\u003Cbr>\u003Cbr>      nodeAsString = JSON.stringify(node);\u003Cbr>      elevate(function()\u003Cbr>      {\u003Cbr>         \u003Cspan style=\"background-color: rgb(255, 255, 51);\">base.Set_Sync(\n         {\n            Name: id,\n            Value: nodeAsString\n         });\u003C/span>\u003Cbr>      });\u003Cbr>   }\u003Cbr>\u003Cbr>   return node;\u003Cbr>}\u003Cbr>\u003C/pre>\u003Cp>In the above example, the base.Get_Sync() and base.Set_Sync() functions call into the underlying name-value pairs object to persist the node's contents.&nbsp; Calls to base must be made within the context of an elevate() call, documented later.\u003Cbr>\u003C/p>\u003Cp>Every effort is made to keep the Javascript API as similar as possible between Javascript that runs in the browser and Javascript that runs on the server. &nbsp;At this time, however, in-browser Javascript should use the&nbsp;asynchronous&nbsp;calling convention, and server-side Javascript should use the synchronous convention.\u003C/p>\u003Ch1>Built-in Metadata\u003C/h1>\u003Cp>The following metadata is available for use at runtime:\u003C/p>\u003Cul>\u003Cli>\u003Cspan style=\"font-weight: bold;\">fileMetadata.filename\u003C/span>:&nbsp; The filename of the current object\u003Cbr>\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">fileMetadata.fullpath\u003C/span>:&nbsp; The full path to the current object\u003Cbr>\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">fileMetadata.url\u003C/span>:&nbsp; The full URL to the current object\u003Cbr>\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">hostMetadata.host\u003C/span>:&nbsp; The host name, including \":port\" if the port isn't port 80\u003Cbr>\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">hostMetadata.justHost\u003C/span>:&nbsp; Just the host name without the port\u003Cbr>\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">hostMetadata.port\u003C/span>:&nbsp; The host's port.\u003Cbr>\u003C/li>\u003C/ul>\u003Ch1>Additional Built-in Functions\u003C/h1>\u003Cp>Server-side Javascript provides some additional methods to assist in returning more detailed data to the browser and for working with ObjectCloud\u003Cbr>\u003C/p>\u003Ch2>generateWebResult(status, message)\u003Cbr>\u003C/h2>\u003Cp>The generateWebResult function allows closer control over the status returned to the browser.&nbsp; The first argument, status, takes a number that is the status code returned to the browser.&nbsp; The second argument, which is optional, is the message returned to the client.&nbsp; ObjectCloud treats the message argument as a string.\u003C/p>\u003Cp style=\"margin-left: 40px;\">\u003Cspan style=\"font-weight: bold;\">Note\u003C/span>:&nbsp; \u003Cspan style=\"font-style: italic;\">Feedback on how to handle the message is welcome and appreciated.\u003C/span>\u003Cbr>\u003C/p>\u003Ch2>throwWebResultOverrideException(status, message)\u003C/h2>\u003Cp>The throwWebResultOverrideExcetion function throws a special kind of exception.&nbsp; Assuming that this exception isn't caught in the server-side Javascript, when it is thrown into ObjectCloud, it will abort all calls and return the result directly to the browser.&nbsp; This is useful from within elevate() or callAsOwner().\u003Cbr>\u003C/p>\u003Ch2>JSON\u003C/h2>\u003Cp>The /API/json2.js is automatically loaded to provide secure JSON functionality.&nbsp; /API/Prototype.js isn't used in server-side Javascript because it only runs within a browser.\u003Cbr>\u003C/p>\u003Ch3>JSON.parse(toParse)\u003C/h3>\u003Cp>The parse function is a secure way of parsing a JSON object encoded as a string.&nbsp; When handling untrusted data, the parse function will not allow a hacker to inject malicious Javascript.\u003C/p>\u003Cp style=\"margin-left: 40px;\">\u003Cspan style=\"font-weight: bold;\">Note\u003C/span>:&nbsp; \u003Cspan style=\"font-style: italic;\">eval() is much faster then calling parse().&nbsp; When working with trusted JSON strings, eval() is recommended.\u003C/span>\u003Cbr>\u003C/p>\u003Ch3>JSON.stringify()\u003Cbr>\u003C/h3>\u003Cp>Stringify takes a Javascript object and returns it encoded as a JSON string.\u003Cbr>\u003C/p>\u003Ch2>lockMe(function)\u003C/h2>\u003Cp>Locks the object and calls the function.&nbsp; When the function is called, it has exclusive access to the underlying object.\u003Cbr>\u003C/p>\u003Ch2>elevate(function)\u003C/h2>\u003Cp>Calls the function with an elevated security context.&nbsp; When calling into other objects, the \"minimumLocalPermission\" instead of \"minimumWebPermission\" will be used.&nbsp; See the later section, \"Calling into other Objects,\" to learn how to call into other objects.\u003C/p>\u003Cp>elevate must be used to call into the base object.\u003Cbr>\u003C/p>\u003Cp style=\"margin-left: 40px;\">\u003Cspan style=\"font-weight: bold;\">Note\u003C/span>:&nbsp; \u003Cspan style=\"font-style: italic;\">Validate all input before calling this function, as a malicious user could gain access to sensitive data or corrupt sensitive data\u003C/span>.\u003Cbr>\n\u003C/p>\n\u003Ch2>callAsOwner(function)\u003C/h2>\u003Cp>Calls the function as if the object's owner is calling it.\u003C/p>\u003Cp style=\"margin-left: 40px;\">\u003Cspan style=\"font-weight: bold;\">Note\u003C/span>:&nbsp; \u003Cspan style=\"font-style: italic;\">Validate all input before calling this function, as a malicious user could gain access to sensitive data or corrupt sensitive data\u003C/span>.\u003Cbr>\u003C/p>\u003Ch2>sanitize(html)\u003C/h2>\u003Cp>Sanitizes the passed in html.&nbsp; Removes potential cross-site scripting attacks and unclosed tags.&nbsp; This should be called on all HTML that is displayed to the user.\u003Cbr>\u003C/p>\u003Cmeta charset=\"utf-8\">\u003Ch3 style=\"font-size: 1.1em; font-weight: bold; \">getConnectionMetadata()\u003C/h3>\u003Cp>Returns an object with metadata about the current connection, including the current user and IP. &nbsp;Returns an object with the following properties:\u003C/p>\u003Cp>\u003C/p>\u003Cul>\u003Cli>\u003Cspan style=\"font-weight: bold; \">id\u003C/span>:&nbsp; The current user's ID\u003Cbr>\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold; \">name\u003C/span>:&nbsp; The current user's name\u003Cbr>\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold; \">identity\u003C/span>:&nbsp; The current user's OpenID\u003Cbr>\u003C/li>\u003Cli>\u003Cb>isLocal\u003C/b>: &nbsp;True if the user is local\u003C/li>\u003Cli>\u003Cb>remoteEndPoint\u003C/b>: &nbsp;The user's IP\u003Cbr>\u003C/li>\u003C/ul>\u003Cp>\u003C/p>\u003Cblockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">\u003Cp>\u003Cb>Note:\u003C/b>&nbsp;&nbsp;\u003Ci>For the best CPU utilization, try to only call this function once within a server-side Javascript function. &nbsp;Repeatedly calling this function can lead to high CPU utilization and slower performance.\u003C/i>\u003C/p>\u003C/blockquote>\u003Cmeta charset=\"utf-8\">\u003Ch3 style=\"font-size: 1.1em; font-weight: bold; \">getGet()\u003C/h3>\u003Ch3>\u003Cspan class=\"Apple-style-span\" style=\"font-weight: normal; font-size: 16px; \">Returns all of the current GET parameters as a JavaScript object.\u003C/span>\u003Cbr>\u003C/h3>\u003Cblockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">\u003Cpre>var foo = getGet().Foo;\u003C/pre>\u003C/blockquote>\u003Ch3 style=\"font-size: 1.1em; font-weight: bold; \">getPost()\u003C/h3>\u003Cp>Returns all of the current POST parameters as a JavaScript object. &nbsp;In order for this function to work, the current web request must have passed urlencoded POST parameters, such as when a form uses POST. &nbsp;In the event that there are no POST parameters, null will be returned.\u003C/p>\u003Cblockquote class=\"webkit-indent-blockquote\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 40px; border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; border-width: initial; border-color: initial; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \">\u003Cpre>var foo = getPost().Foo;\u003C/pre>\u003C/blockquote>\u003Cmeta charset=\"utf-8\">\u003Cmeta charset=\"utf-8\">\u003Cp>\u003Cspan class=\"Apple-style-span\" style=\"font-size: 18px; font-weight: bold; \">getHeaders() &nbsp;[untested]\u003C/span>\u003Cbr>\u003C/p>\u003Cp>Returns all of the current headers as a JavaScript object.\u003C/p>\u003Cblockquote class=\"webkit-indent-blockquote\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 40px; border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; border-width: initial; border-color: initial; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \">\u003Cpre>var foo = getHeaders().Foo;\u003C/pre>\u003C/blockquote>\u003Cmeta charset=\"utf-8\">\u003Cmeta charset=\"utf-8\">\u003Cblockquote class=\"webkit-indent-blockquote\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 40px; border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; border-width: initial; border-color: initial; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \">\u003Cp>\u003Cb>Note\u003C/b>: &nbsp;\u003Ci>This function is untested\u003C/i>\u003C/p>\u003C/blockquote>\u003Ch3 style=\"font-size: 1.1em; font-weight: bold; \">getCookies() &nbsp;[untested]\u003C/h3>\u003Cp>Returns all of the current cookies from the browser parameters as a JavaScript object.\u003C/p>\u003Cblockquote class=\"webkit-indent-blockquote\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 40px; border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; border-width: initial; border-color: initial; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \">\u003Cpre>var foo = getCookies().Foo;\u003C/pre>\u003C/blockquote>\u003Cmeta charset=\"utf-8\">\u003Cblockquote class=\"webkit-indent-blockquote\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 40px; border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; border-width: initial; border-color: initial; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \">\u003Cp>\u003Cb>Note\u003C/b>: &nbsp;\u003Ci>This function is untested\u003C/i>\u003C/p>\u003C/blockquote>\u003Ch3>setCookie(name, value)\u003Cbr>\u003C/h3>\u003Cp>Sets the cookie in the browser. &nbsp;Currently, there is no way to set the expiration, path, or secure setting.\u003C/p>\u003Cdiv>\u003Cp>\u003C/p>\u003Cblockquote class=\"webkit-indent-blockquote\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 40px; border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; border-width: initial; border-color: initial; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \">\u003Cp>\u003Cb>Note\u003C/b>: &nbsp;\u003Ci>This function is untested\u003C/i>\u003C/p>\u003C/blockquote>\u003Ch3>use(filename)\u003C/h3>\u003Cp>Loads the given Javascript file if it hasn't already been loaded. &nbsp;Returns any results generated from executing the given Javascript file. &nbsp;The first time this is called, the results are cached and re-returned. &nbsp;The user must have read permission to the file, unless this is called from within the context of callAsOwner, in which case the owner must have read permission to the file.\u003C/p>\u003Cp>If the javascript file can not be loaded, no exception occurs. &nbsp;False is returned.\u003C/p>\u003Cp>\u003C/p>\u003Cmeta charset=\"utf-8\">\u003Ch3 style=\"font-size: 1.1em; font-weight: bold; \">open(filename)\u003C/h3>\u003Cp>Returns a wrapper that allows accessing the given object. &nbsp;This is similar to using the // Scripts: syntax, except that it's supported at runtime.\u003C/p>\u003Cp>If the javascript file can not be loaded, no exception occurs. &nbsp;False is returned.\u003C/p>\u003Cp>\u003C/p>\u003Cmeta charset=\"utf-8\">\u003Ch3 style=\"font-size: 1.1em; font-weight: bold; \">getBrowserCacheUrl(url)\u003C/h3>\u003Cp>Returns a modified version of the given URL that instructs the browser to cache the returned object for a very long time.\u003C/p>\u003Cp>This is a powerful function for improving performance and reducing load on a server. &nbsp;How it works is that it calculates the MD5 of the result of the given URL, and then appends a \"BrowserCache=...\" parameter to the url. &nbsp;When the server sees a request with BrowserCache in the url, it instructs the browser to cache the result for a very long time. &nbsp;This allows a page to display images, reference css, ect, without requiring the browser to download the content every time it is displayed.\u003C/p>\u003Cp>In the event that the content at the given url changes, the MD5 will change, and thus force the browser to reload it.\u003C/p>\u003Cp>Future versions of ObjectCloud may change algorithms to reduce CPU load.\u003C/p>\u003Cp>\u003Cmeta charset=\"utf-8\">\u003Ch3 style=\"font-size: 1.1em; font-weight: bold; \">Shell(webMethodString, url, contentType, postArguments, options)\u003C/h3>\u003Cp>Returns the result of calling the given url on the server.\u003C/p>\u003Cp>\u003Cul>\u003Cli>\u003Cb>webMethodString\u003C/b>: &nbsp;Either POST or GET\u003C/li>\u003Cli>\u003Cb>url\u003C/b>: &nbsp;The url to resolve\u003C/li>\u003Cli>\u003Cb>contentType\u003C/b>: &nbsp;The contentType. &nbsp;Only used for POST. &nbsp;Typically&nbsp;'application/x-www-form-urlencoded'\u003C/li>\u003Cli>\u003Cb>postArguments\u003C/b>: &nbsp;The post arguments. &nbsp;Typically a JSON object when&nbsp;'application/x-www-form-urlencoded' is the contentType; although this can be a raw string or JSON for POST endpoints that don't use urlencoded data\u003C/li>\u003Cli>\u003Cb>options\u003C/b>: &nbsp;JSON object that takes additional options. &nbsp;Currently the only supported option is EncodeAsBase64. &nbsp;When EncodeAsBase64 is set to true, the result is a base64 encoded string. &nbsp;This allows for handling binary data, like images.\u003C/li>\u003C/ul>The returned object, (except when using EncodeAsBase64,) has the following properties:\u003C/p>\u003Cp>\u003Cul>\u003Cli>\u003Cb>Status\u003C/b>: &nbsp;HTTP status code.\u003C/li>\u003Cli>\u003Cb>Content\u003C/b>: &nbsp;The content. &nbsp;Warning, if the content is binary data, like an image, it will be corrupted.\u003C/li>\u003Cli>\u003Cb>Headers\u003C/b>: &nbsp;HTTP headers.\u003C/li>\u003C/ul>\u003C/p>\u003Cp>\u003Cspan class=\"Apple-style-span\" style=\"font-size: 24px; font-weight: bold; \">Calling into other Objects\u003C/span>\u003Cbr>\u003C/p>\u003C/p>\u003Cp>Server-side Javascript uses the same // Scripts: syntax that client-side Javascript uses.&nbsp; This allows another object to be loaded.&nbsp; For example, from \u003Ca target=\"_blank\" title=\"\" href=\"/Tests/Classes\">/Tests/Classes\u003C/a>:\u003C/p>\u003Cpre style=\"margin-left: 40px;\">// Scripts: /System/Proxy?Method=GetServersideJavascriptWrapper&amp;assignToVariable=Proxy\u003Cbr>\u003C/pre>\u003Cp>The method GetServersideJavascriptWrapper returns an object that grants access to the \u003Ca target=\"_blank\" title=\"\" href=\"/System/Proxy\">/System/Proxy\u003C/a> object by creating the \"Proxy\" object in the server-side Javascript.&nbsp; An example of accessing the \"Proxy\" object is:\u003C/p>\u003Cpre style=\"margin-left: 40px;\">TestElevateProxyGet.webCallable = \"GET\";\u003Cbr>function TestElevateProxyGet()\u003Cbr>{\u003Cbr>   return elevate(function()\u003Cbr>   {\u003Cbr>      return \u003Cspan style=\"background-color: rgb(255, 255, 51);\">Proxy\u003C/span>.GET(\"http://slashdot.org\", {}).Content;\u003Cbr>   });\u003Cbr>}\u003Cbr>\u003C/pre>\u003Cp>In the above example, the Proxy object is used to make a GET request to http://slashdot.org.&nbsp; The \u003Ca target=\"_blank\" title=\"\" href=\"../System/Proxy\">/System/Proxy\u003C/a> requires elevated security in order to call.\u003C/p>\u003Ch1>Performance Issues\u003C/h1>\u003Cp>In general, server-side Javascript is compiled and runs rather quickly. &nbsp;There are some constraints which are best understood by briefly describing ObjectCloud's Javascript execution environment.\u003C/p>\u003Cp>When ObjectCloud starts, it compiles all classes stored in the global /Classes folder. &nbsp;Each class is given its own&nbsp;separate&nbsp;process. &nbsp;Thus, all objects of a given type share the same process. &nbsp;It takes about a second to create a Javascript process and compile the Javascript for a class. &nbsp;In the event that server-side Javascript takes more then 30 seconds to return, ObjectCloud kills the process. &nbsp;The next time server-side Javascript is called for the class, the process will be re-started, thus&nbsp;incurring&nbsp;a 1-2 second delay. &nbsp;Therefore, long-running server-side Javascript should be avoided as it could incur system-wide performance issues while processes restart.\u003C/p>\u003Cp>Another performance constraint has to do with how ObjectCloud manages memory. &nbsp;It's impractical to hold all objects in RAM. &nbsp;ObjectCloud utilizes a first-in, last-out algorithm for memory&nbsp;reclamation. &nbsp;This means that less-used objects will have their Javascript scopes destroyed when they are garbage collected. &nbsp;Furthermore, construction of object's scopes happens on-demand. &nbsp;Thus, using an object that isn't in RAM incurs about a 1/10th of a second delay. &nbsp;As a result, pages and applications that use objects that are most likely to be in RAM will perform faster then pages and applications that use objects that are unlikely to be in RAM. &nbsp;Specifically, applications and pages that primarily consume new user-created data will be fast and&nbsp;instantaneous; but applications and pages that use old data will be slower and require more RAM.\u003C/p>\u003Cp>\u003Ca href=\"about.page\">About ObjectCloud\u003C/a>\u003C/p>\u003C/div>"}