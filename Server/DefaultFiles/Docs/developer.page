{"Title":"ObjectCloud:  Developer Documentation","Contents":"<p></p><p>ObjectCloud has a powerful RESTful API that allows nearly complete access and modification of all users, groups, data, css, html, and images. This API is available in the following ways:</p><p></p><ul><li>Traditional HTTP and AJAX (REST)</li><li>In-browser Javascript API</li><li>xhtml templating system</li><li>Experimental Server-side Javascript API</li><li>Node.js. (Experimental, found in the source code tree)</li></ul>This page discusses how to use ObjectCloud's APIs. It also discusses other subjects, like registering file types, that are relevant and interesting to parties wishing to develop with ObjectCloud.<p></p><p><a xmlns=\"http://www.w3.org/1999/xhtml\" href=\"/Docs/API/Overview.oc\">Most API functions are documented</a>.</p><h1>Examples</h1><h2>Edit an image in-browser</h2><p>ObjectCloud, when combined with <a xmlns=\"http://www.w3.org/1999/xhtml\" href=\"http://canvaspaint.org/\">CanvasPaint</a>, allows saving an image edited in the web browser directly to the server. From <a xmlns=\"http://www.w3.org/1999/xhtml\" href=\"/Shell/Editors/CanvasPaint.js\">/Shell/Editors/CanvasPaint.js</a>:</p><blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><pre>function save(image, mimetype)\n{\n   var dataurl = canvas.toDataURL(mimetype);\n\n   var data = dataurl.substring(dataurl.indexOf(\",\") + 1);\n\n   image.WriteAllBase64(\n      data,\n      function()\n      {\n         alert(\"Saved\");\n      });\n}</pre></blockquote><p>Notes:</p><p></p><ul><li>Image is an object that represents an image file stored in ObjectCloud.</li><li>The toDataUrl function returns the edited image as an encoded string.</li><li>ObjectCloud's WriteAllBase64 function writes a binary image file from the encoded string.</li></ul><p></p><h2>Manage Permissions</h2><p>All files, or objects, have a rich set of permissions. It's possible to manipulate these permissions using ObjectCloud's Javascript API. From <a xmlns=\"http://www.w3.org/1999/xhtml\" href=\"/Shell/Security/Permissions.js\">/Shell/Security/Permissions.js</a>, part of ObjectCloud's permission editing form:</p><blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><pre>$('form.addForm').submit(function()\n{\n   var userOrGroupInput = $(\"[name=UserOrGroup]\", this);\n   var userOrGroup = userOrGroupInput.val();\n   var filePermission = $(\"[name=FilePermission]\", this).val();\n\n   var me = $(this);\n   me.attr('disabled', 'disabled');\n\n   File.SetPermission(\n      {\n         UserOrGroup: userOrGroup,\n         FilePermission: filePermission,\n         Inherit: true,\n         SendNotifications: true\n      },\n      function(result)\n      {\n         UserOrGroupInput.val(\"\");\n         me.removeAttr('disabled');\n      });\n\n   return false;\n});</pre></blockquote><p>Notes:</p><p></p><ul><li>User names and permission values are loaded through <a xmlns=\"http://www.w3.org/1999/xhtml\" href=\"http://jquery.com/\">jQuery</a>.</li><li>The form is disabled while making the AJAX call, the callback re-enables the form.</li></ul><p></p><h1>Accessing ObjectCloud's API</h1><h2>In-Browser Javascript&#160;API</h2><p>Loading the Javascript API, and then calling functions, is discussed in <a xmlns=\"http://www.w3.org/1999/xhtml\" href=\"/Docs/API.page\">ObjectCloud's Javascript AJAX API</a>.</p><h2>Templating System</h2><p>ObjectCloud's templating system supports most Read / GET functions in the API. These can be used to create dynamic pages from xhtml and custom ObjectCloud tags.</p><p>The templating system can use JSON objects for arguments, iterate over JSON arrays, and filter text files into safe xhtml or raw (non-html) text.</p><p>See <a xmlns=\"http://www.w3.org/1999/xhtml\" href=\"/Docs/API - templating.page\">Creating Dynamic Pages from ObjectCloud's API</a>&#160;for more information.</p><h2>Server-Side Javascript</h2><p><a xmlns=\"http://www.w3.org/1999/xhtml\" href=\"/Docs/server%20side%20JS.page\">Server-side Javascript</a>&#160;is useful when chaining many API calls that would run slowly in the browser, or for performing operations that can not be performed&#160;securely&#160;within the browser.</p><h2>HTTP and AJAX (REST)</h2><p>Generally speaking, in ObjectCloud, all files, or objects, have a URL. When calling a function, or method, an HTTP request is made to a file's URL. The specific method, or function, is specified with the \"?Method=\" GET argument argument in the URL. This get argument is always present, even in POST calls.</p><p></p><p>Currently, ObjectCloud only uses the GET and POST HTTP verbs. This is&#160;because&#160;ObjectCloud uses the HTTP verb to define calling convention.</p><p>When constructing an HTTP request directly into ObjectCloud, pay attention to the method's calling convention:</p><p></p><ul><li><b>GET</b>: Typically takes no arguments</li><li><b>GET_application_x_www_form_urlencoded</b>: Request is constructed as if it comes from a GET form</li><li><b>POST_application_x_www_form_urlencoded</b>: Request is constructed as if it comes from a POST form with urlencoded arguments. (This is the default for POST forms.)</li><li><b>POST_multipart_form_data</b>: Request is constructed as if it comes from a POST form with multipart MIME data. (This is primarily used for uploading files within a web browser.)</li><li><b>POST_string</b>: The POST content is a UTF8 string</li><li><b>POST_bytes</b>: The POST content is binary data</li><li><b>POST_stream</b>: The POST content is binary data. This convention is used with functions that might handle very large POST content</li><li><b>POST_JSON</b>: The POST content is a valid JSON object.</li><li><b>other</b>: See the function's documentation.</li><li><b>Naked</b>: See the function's documentation.</li></ul><p></p><p></p><h2><span class=\"Apple-style-span\" style=\"font-size: 32px; \">Adding File Types to ObjectCloud</span></h2><p>Core to&#160;<a xmlns=\"http://www.w3.org/1999/xhtml\" href=\"http://10.0.1.198:1080/Docs/add%20file%20type.page\">ObjectCloud's flexibility is the ability to add additional programmer-defined file types</a>.</p><h1>Contributing</h1><p>See <a xmlns=\"http://www.w3.org/1999/xhtml\" href=\"/Docs/contributing.page\">Contributing to ObjectCloud</a>.</p><p></p><h1>Specifications</h1><p><a xmlns=\"http://www.w3.org/1999/xhtml\" href=\"/Docs/Specs\">Specifications on how ObjectCloud works are online</a>.</p><div><p></p></div><p></p>"}