{"Title":"Javascript Sub-Process","Contents":"\u003Cmeta charset=\"utf-8\">\u003Ch1 style=\"font-size: 1.5em; font-weight: bold; \">Overview\u003C/h1>\u003Cp>There are many Javascript libraries like Spidermonkey, Rhino and Google's V8 that allow an application designer to incorporate lightweight user-generated programs. &nbsp;These libraries allow the programmer to expose functionality in a rather secure manner; as the programmer can deterministically expose a limited set of well-known functions for user-generated code to use. &nbsp;A limitation in these libraries is that they aren't universally supported in different platforms. &nbsp;Specifically, Rhino is only callable from Java, and Google's V8 is only callable from C++. &nbsp;This can sometimes severely limit an application designer's choice in finding a robust Javascript library. &nbsp;This is the case for ObjectCloud, where there are no well-supported Javascript interpeters for .Net.\u003C/p>\u003Cp>This document describes how ObjectCloud communicates with Javascript environments running in a sub-process. &nbsp;Initially, to keep development, building, and deployment simple, the sub-process will be a Java sub-process using Rhino as a Javascript engine. &nbsp;In the long term, a sub-process written in C++ using Google's V8 as a Javascript engine will implement the same communication protocol described here. &nbsp;While \"heavier\" then hosting an interpreter as an in-process library; a multi-process&nbsp;architecture&nbsp;has robustness and security benefits. &nbsp;These are seen in Google Chrome where a misbehaving sub-process, when killed, allows other pages to remain open.\u003C/p>\u003Ch2 style=\"font-size: 1.25em; font-weight: bold; \">Need and Justification\u003C/h2>\u003Cp>There are two reasons why ObjectCloud needs to run server-side Javascript in a sub-process instead of within its own process. &nbsp;These are as follows:\u003Cbr>\u003C/p>\u003Cp>\u003C/p>\u003Col>\u003Cli>\u003Cb>Stability\u003C/b>: &nbsp;Poorly-written Javascript could crash ObjectCloud's process, or could hog CPU resources causing poor performance. &nbsp;Such performance issues could impact all users of the server. &nbsp;A real risk is that, while developing, a programmer accidentally introduces an&nbsp;infinite&nbsp;loop into server-side Javascript. &nbsp;Another risk is that server-side Javascript could call an API that blocks in native platform calls. &nbsp;In both situations, .Net's Thread.Abort() is not&nbsp;guaranteed&nbsp;to stop misbehaving Javascript. &nbsp;In contrast; ObjectCloud can kill misbehaving sub-processes. &nbsp;Thus, ObjectCloud must use a multi-process design for server-side Javascript.\u003C/li>\u003Cli>\u003Cb>.Net's Limitations\u003C/b>: &nbsp;No good Javascript interpreters exist for .Net. &nbsp;This is because .Net can not garbage collect executable code once it is loaded into RAM. &nbsp;In Javascript, functions are treated like data, thus Javascript can only run well in environments that allow garbage collection of code. &nbsp;This limitation can be worked around by interpreting Javascript, but it is not a long-term solution as it will always be much slower then solutions like V8 that convert Javascript to true machine code.\u003C/li>\u003C/ol>The early ObjectCloud prototype converted Rhino, a Java Javascript interpreter, into a .Net dll, but this proved to be too slow and unstable for ObjectCloud applications that made heavy use of server-side Javascript. &nbsp;Work was also performed with Jint, a true Javascript interpreter for .Net; although Jint was too buggy and introduced too many .Net semantics into Javascript to meet ObjectCloud's needs. &nbsp;As a result of work with Rhino converted to a .Net dll, and Jint, the conclusion is that the only way for ObjectCloud to reliably handle server-side Javascript is to run it in sub-processes written in languages that provide better Javascript support.\u003Cbr>\u003Cp>\u003C/p>\u003Ch2 style=\"font-size: 1.25em; font-weight: bold; \">Implementation&nbsp;Decisions\u003C/h2>\u003Cp>The obvious best choice for a Javascript sub-process is a natively-compiled executable that uses Google's V8 Javascript engine. &nbsp;This would&nbsp;yield&nbsp;the fastest Javascript possible; although it introduces some&nbsp;compromises&nbsp;in ObjectCloud's development philosophies:\u003C/p>\u003Cp>\u003C/p>\u003Cul>\u003Cli>At this point, there are no standard V8 libraries commonly found on Windows, Mac, and Linux. &nbsp;(In contrast, SQLite has standard libraries on all three.) &nbsp;V8, and thus the executable, would need to be specially-compiled for each target platform. &nbsp;Currently ObjectCloud runs on Windows, Mac, and Linux without any recompilation, as it is Andrew's philosophy that ObjectCloud should require as little as possible \"work\" to set up ObjectCloud anywhere.\u003C/li>\u003Cli>C++ tends to have more complicated build issues compared against C# and Java. &nbsp;One of Andrew's philosophies is to avoid things like make and stick with build environments that work in common IDEs.\u003C/li>\u003C/ul>Thus, the Javascript sub-process is written in such a way that it can run anywhere without platform-specific compilation; although the protocol between the parent ObjectCloud process and Javascript subprocess utilizes standard and well-defined techniques. &nbsp;This allows a V8 subprocess to be swapped in once time can be allocated to deal with C++ development and portability complexities.\u003Cbr>\u003Cp>\u003C/p>\u003Cp>For now, the Javascript subprocess is written in Java and uses Rhino. &nbsp;This minimizes the development learning curve as it utilizes lessons learned from converting Rhino into a .Net dll. &nbsp;Communication between the parent and child processes will use stdin and stdout. &nbsp;This minimizes relying on sockets, as sockets can sometimes \"fill up\" on certain operation systems. &nbsp;It also&nbsp;alleviates&nbsp;depending on platform-specific IPC systems, like named pipes.\u003C/p>\u003Cp>As stated earlier, the current implementation is a works-anywhere approach. &nbsp;In the long-term, because the protocol is well-documented and universally available on all platforms, the Java and Rhino sub-process can be replaced with a V8 subprocess. &nbsp;Another option is to use Node.js as a subprocess, however, that will require that Node.js gets good support on Windows, Mac, and Linux, and that Node.js allows true isolation with multiple contexts. &nbsp;Its current implementation of evalcx() would mean that Javascript could pollute Node's parent global scope, which could then contaminate other scopes and the lower-level IO subsystem.\u003C/p>\u003Ch2 style=\"font-size: 1.25em; font-weight: bold; \">Capability and Behavior\u003C/h2>\u003Cp>All communication between the parent and sub process occurs on the sub process's stdin and stdout using JSON. &nbsp;The subproces supports a single parent scope that declares runtime code, and multiple isolated child scopes that use the parent scope's code.&nbsp;&nbsp;All&nbsp;communication&nbsp;should be treated as non-blocking; that is, the parent process can call many functions in different scopes concurrently. &nbsp;In general, the following activities are supported:\u003C/p>\u003Cp>\u003C/p>\u003Cul>\u003Cli>Parent process creates the initial parent scope when the sub process is created. &nbsp;The subprocess returns metadata about the parent scope, including functions, through stdout.\u003C/li>\u003Cli>Parent process calls a function in a child scope. &nbsp;The subprocess returns the function's results through stdout. &nbsp;(In order to minimize overhead from communication between the parent and child processes, child scopes are created on demand.)\u003C/li>\u003Cli>Parent process disposes a child scope.\u003C/li>\u003Cli>Subprocess calls a function that the parent process placed into the parent scope through stdout. &nbsp;The parent process returns the results through stdin.\u003C/li>\u003Cli>Parent process calls a callback function that was passed when the subprocess called one of its functions. &nbsp;The subprocess returns the results &nbsp;through stdout.\u003C/li>\u003C/ul>Communication is described in detail in the Communication section. &nbsp;Right now, the parent process can not hold references to objects that are passed to its functions beyond the lifetime of a function call. &nbsp;This means that the parent process can not use callbacks for&nbsp;asynchronous&nbsp;communication and must call callbacks during a function call and not afterwards.\u003Cp>\u003C/p>\u003Cp>\u003Cspan class=\"Apple-style-span\" style=\"font-size: 24px; font-weight: bold; \">Creating a Javascript Sub-Process\u003C/span>\u003Cbr>\u003C/p>\u003Cp>When an application starts the sub-process, no arguments are passed. &nbsp;The parent process must provide its own facilities to terminate the sub process. &nbsp;Ideally, the sub process would monitor the parent process; however, shortcomings in Java's API prevent it from doing this.\u003C/p>\u003Cp>\u003C/p>\u003Ch1 style=\"font-size: 1.5em; font-weight: bold; \">Communication\u003C/h1>\u003Cp>The initial communication between the parent and sub process creates the parent scope which contains code for all child scopes.&nbsp;\u003C/p>\u003Cp>After the parent scope is created, communication between the main process and the sub-process is two-way and non-blocking.\u003C/p>\u003Cp>\u003C/p>\u003Cp>The commands are described in the next section.\u003C/p>\u003Ch1 style=\"font-size: 1.5em; font-weight: bold; \">Concurrency\u003C/h1>\u003Cp>Concurrency within a scope is not supported, although the child processes do not need to enforce concurrency. &nbsp;The parent process should ensure that it does not execute multiple evals or functions within the same scope concurrently.\u003C/p>\u003Cp>Concurrency is supported among different scopes; that is multiple concurrent evals and/or function calls are supported, as long as each call or eval is in a different scope.\u003C/p>\u003Ch1 style=\"font-size: 1.5em; font-weight: bold; \">Creating the Parent Scope\u003C/h1>\u003Cp>Initially, the first JSON command sent to the sub process contains Javascript to establish the parent scope. &nbsp;This initial JSON object contains the following properties:\u003Cbr>\u003C/p>\u003Cp>\u003C/p>\u003Cul>\u003Cli>\u003Cb>Scripts\u003C/b>: &nbsp;Array of strings that contain the Javascript that is executed to create the scope. &nbsp;Each string is evaled in the order in the array.\u003C/li>\u003Cli>\u003Cb>Functions\u003C/b>: &nbsp;Array containing strings, the names of functions that the scope can call in the parent process.\u003C/li>\u003C/ul>\u003Cp>The sub process will compile all of the passed in scripts in the parent scope. &nbsp;If compilation is successful, an empty JSON object will be returned. &nbsp;If compilation fails, then a JSON object is returned with the following properties:\u003C/p>\u003Cdiv>\u003Cp>\u003C/p>\u003Cp>\u003C/p>\u003Cul>\u003Cli>\u003Cb>Exception\u003C/b>: &nbsp;JSON-serialized exception, if it&nbsp;occurred. &nbsp;If there is an exception, the process will end.\u003Cbr>\u003C/li>\u003C/ul>\u003Cspan class=\"Apple-style-span\" style=\"font-size: 24px; font-weight: bold; \">Commands\u003C/span>\u003Cbr>\u003Cp>After the parent scope is created, the following commands are used.&nbsp;&nbsp;Every time data is transmitted between the parent and subprocess, a single JSON object is sent. &nbsp;The JSON object contains all data needed to perform the request or handle the response. &nbsp;If the parent process sends an empty JSON object, {}, it means that the child process should terminate itself. &nbsp;The basic format of all JSON objects sent is described below:\u003C/p>\u003Cp>\u003C/p>\u003Cul>\u003Cli>\u003Cb>ScopeID\u003C/b>: &nbsp;The scope ID for the request or response. &nbsp;The IDs are generated by the parent process. &nbsp;This is always a positive integer.\u003C/li>\u003Cli>\u003Cb>ThreadID\u003C/b>: &nbsp;Value that identifies the calling thread in the parent process. &nbsp;This can be any type. &nbsp;Responses must contain the ThreadID so that the parent process knows which thread to give the returned value.\u003C/li>\u003Cli>\u003Cb>Data\u003C/b>: &nbsp;Additional data that pertains to the request or response. &nbsp;The contents depend on the command.\u003C/li>\u003Cli>\u003Cb>Command\u003C/b>: &nbsp;The command. &nbsp;Possible commands, (listed as request and response,) are:\u003C/li>\u003Cul>\u003Cli>CreateScope /&nbsp;RespondCreateScope\u003C/li>\u003Cli>DisposeScope\u003C/li>\u003Cli>CallFunctionInScope / RespondCallFunctionInScope\u003C/li>\u003Cli>CallParentFunction / RespondCallParentFunction\u003C/li>\u003Cli>CallCallback / RespondCallCallback\u003C/li>\u003C/ul>\u003C/ul>\u003Cp>\u003C/p>\u003Ch2 style=\"font-size: 1.25em; font-weight: bold; \">CreateScope /&nbsp;RespondCreateScope\u003Cbr>\u003C/h2>\u003Cp>CreateScope is sent by the parent process, and CreateEvalScope is sent by the subprocess. &nbsp;This request/response is used when creating a child scope.\u003C/p>\u003Ch3 style=\"font-size: 1.1em; font-weight: bold; \">CreateScope\u003C/h3>\u003Cp>Instructs the sub process to create a scope.\u003C/p>\u003Cp>The data portion of the JSON packet contains values that will be assigned to the child scope. &nbsp;For example, if the data portion has two properties, A and B, then the A and B properties will be placed into the newly-created scope.\u003C/p>\u003Cp>\u003C/p>\u003Ch3 style=\"font-size: 1.1em; font-weight: bold; \">RespondCreateScope\u003C/h3>\u003Cp>Informs the parent process that creating a Javascript scope is complete. &nbsp;Returns the results of the creation serialized as JSON.\u003C/p>\u003Cp>The data portion of the JSON packet contains the following properties:\u003C/p>\u003Cul>\u003Cli>\u003Cb>Result\u003C/b>: &nbsp;Result of evaluating the last script used to create the scope, serialized as JSON. &nbsp;If the result is undefined, then this value will be missing.\u003C/li>\u003Cli>\u003Cb>Exception\u003C/b>: &nbsp;JSON-serialized exception, if it&nbsp;occurred. &nbsp;If there is an exception, then no Result is missing.\u003Cbr>\u003C/li>\u003Cli>\u003Cb>Functions\u003C/b>: &nbsp;Javascript object with properties that have the same name as every function in the scope. &nbsp;Each property is an object with the following properties:\u003C/li>\u003Cul>\u003Cli>\u003Cb>Properties\u003C/b>: &nbsp; All of the values that are assigned to the function.\u003C/li>\u003Cli>\u003Cb>Arguments\u003C/b>: &nbsp;Ordered array of arguments.\u003C/li>\u003C/ul>\u003C/ul>Regarding \"Functions\", if EvalScope is called with ReturnFunctions set to true, then based on the following Javascript...\u003Cp>\u003C/p>\u003Cblockquote class=\"webkit-indent-blockquote\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 40px; border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; border-width: initial; border-color: initial; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \">\u003Cpre>foo.a = \"gdfssddfsa\";\nfoo.b = \"arafraes\";\nfunction foo() { ..... }\n\nbar.a=\"jdydy\";\nbar.b=\"vzvz\";\nfunction bar() { .... }\n\n123;\u003C/pre>\u003C/blockquote>\u003Cp>... The following result is returned in the \"Data\" portion:\u003C/p>\u003Cblockquote class=\"webkit-indent-blockquote\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 40px; border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; border-width: initial; border-color: initial; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \">\u003Cpre>{\n   \"Result\": 123,\n   \"Functions\":\n   {\n      \"foo\": {\"a\": \"gdfssddfsa\", \"b\": \"arafraes\"},\n      \"bar\": {\"a\": \"jdydy\", \"b\": \"vzvz\"}\n   }\n}\u003C/pre>\u003C/blockquote>\u003Ch2 style=\"font-size: 1.25em; font-weight: bold; \">CallFunctionInScope / RespondCallFunctionInScope\u003Cbr>\u003C/h2>\u003Cp>CallFuncionInScope is sent by the parent process, and RespondCallFunctionInScope is sent by the child process.\u003Cbr>\u003C/p>\u003Ch3 style=\"font-size: 1.1em; font-weight: bold; \">CallFunctionInScope\u003C/h3>\u003Cp>Calls a function in the specified scope.\u003C/p>\u003Cp>The data portion of the JSON packet contains the following properties:\u003C/p>\u003Cp>\u003C/p>\u003Cul>\u003Cli>\u003Cb>FunctionName\u003C/b>: &nbsp;The name of the function being called.\u003C/li>\u003Cli>\u003Cb>Arguments\u003C/b>: &nbsp;Array of arguments.\u003C/li>\u003C/ul>\u003Ch3 style=\"font-size: 1.1em; font-weight: bold; \">RespondCallFunctionInScope\u003C/h3>\u003Cp>Returns the results of calling a function in a scope.\u003C/p>\u003Cp>\u003C/p>\u003Cp>The data portion of the JSON packet contains the following properties:\u003C/p>\u003Cul>\u003Cli>\u003Cb>Result\u003C/b>: &nbsp;Result of eval, serialized as JSON.&nbsp;&nbsp;If the result is undefined, then this value will be missing.\u003C/li>\u003Cli>\u003Cb>Exception\u003C/b>: &nbsp;JSON-serialized exception, if it&nbsp;occurred.\u003Cbr>\u003C/li>\u003C/ul>\u003Cp>\u003C/p>\u003Cp>\u003C/p>\u003Ch2 style=\"font-size: 1.25em; font-weight: bold; \">DisposeScope\u003Cbr>\u003C/h2>\u003Cp>Informs the subprocess that a scope with a given ScopeID is no longer needed by the parent process. &nbsp;The subprocess is free to dispose the scope, make it&nbsp;eligible&nbsp;for garbage collection, reclaim the memory, ect, ect. &nbsp; Calling DisposeScope while there are ongoing function calls in the specified scope is undefined, and the parent process should ensure that all pending function calls are complete before calling DisposeScope.\u003C/p>\u003Cp>The subprocess does not respond to DisposeScope. &nbsp;It is assumed that the ScopeID is free for reuse once it reads the next incoming call from the parent process.\u003C/p>\u003Ch2 style=\"font-size: 1.25em; font-weight: bold; \">CallParentFunction / RespondCallParentFunction\u003Cbr>\u003C/h2>\u003Cp>CallParentFunction is sent by the subprocess, and RespondCallParentFunction is sent by the parent process.\u003C/p>\u003Ch3 style=\"font-size: 1.1em; font-weight: bold; \">CallParentFunction\u003C/h3>\u003Cp>Calls a function in the parent process. &nbsp;When CallParentFunction is called, the ThreadID passed by the subprocess is the same as the ThreadID passed into the originating CallFunctionInScope, EvalScope, or CallCallback. &nbsp;The implication is that a parent process will use the same thread when the call stack goes back and forth multiple times between both the parent and sub processes.\u003C/p>\u003Cp>CallParentFunction introduces a complexity when passing callbacks to the parent process. &nbsp;In this case, a special convention is used. &nbsp;This convention is described below.\u003C/p>\u003Cp>\u003C/p>\u003Cp>The data portion of the JSON packet contains the following properties:\u003C/p>\u003Cp>\u003C/p>\u003Cul>\u003Cli>\u003Cb>FunctionName\u003C/b>: &nbsp;The name of the function being called.\u003C/li>\u003Cli>\u003Cb>Arguments\u003C/b>: &nbsp;Array of arguments.\u003C/li>\u003C/ul>In the arguments array, if any value is a callback, it is represented as a JSON object with two properties, as follows:\u003Cp>\u003C/p>\u003Cblockquote class=\"webkit-indent-blockquote\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 40px; border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; border-width: initial; border-color: initial; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \">\u003Cpre>{\"Callback\": true, \"CallbackId\": (any valid JSON value)}\u003C/pre>\u003C/blockquote>\u003Cp>The parent process must use its own internal context to differentiate between callbacks and similar-looking objects.\u003C/p>\u003Ch3 style=\"font-size: 1.1em; font-weight: bold; \">RespondCallParentFunction\u003C/h3>\u003Cdiv>\u003Cp>Returns the results of calling a function in the parent process.\u003C/p>\u003Cp>\u003C/p>\u003Cp>The data portion of the JSON packet contains the following properties:\u003C/p>\u003Cul>\u003Cli>\u003Cb>Result\u003C/b>: &nbsp;Result of calling the function in the parent process.&nbsp;&nbsp;If the result is undefined, then this value will be missing.\u003C/li>\u003Cli>\u003Cb>Exception\u003C/b>: &nbsp;JSON-serialized exception, if it&nbsp;occurred.\u003C/li>\u003Cli>\u003Cb>Eval\u003C/b>: &nbsp;Javascript to eval and return. &nbsp;If this value is present, Result and Exception will be missing.\u003C/li>\u003Cli>\u003Cb>CacheID\u003C/b>: &nbsp;If this is the only present value, then the object with the given CacheID is returned. &nbsp;If this value is present with Result, then Result is cached. &nbsp;If this value is present with Eval, then the result of running Eval is cached.\u003C/li>\u003C/ul>\u003Cp>Note: &nbsp;The parent process may include additional data in the exception object so that, if the calling Javascript does not handle the exception and merely passes it back to the parent, the parent can re-throw the appropriate exception up its call stack.\u003C/p>\u003C/div>\u003Ch2 style=\"font-size: 1.25em; font-weight: bold; \">CallCallback / RespondCallCallback\u003Cbr>\u003C/h2>\u003Cp>\u003C/p>\u003Cp>\u003C/p>\u003Cp>CallCallback is sent by the parent process, and RespondCallCallback is sent by the child process.\u003Cbr>\u003C/p>\u003Ch3 style=\"font-size: 1.1em; font-weight: bold; \">CallCallback\u003C/h3>\u003Cp>Calls a callback in the specified scope.\u003C/p>\u003Cp>The data portion of the JSON packet contains the following properties:\u003C/p>\u003Cp>\u003C/p>\u003Cul>\u003Cli>\u003Cb>CallbackId\u003C/b>: &nbsp;The Id of the callback function being called. &nbsp;This can be any value.\u003C/li>\u003Cli>\u003Cb>Arguments\u003C/b>: &nbsp;Array of arguments.\u003C/li>\u003C/ul>\u003Ch3 style=\"font-size: 1.1em; font-weight: bold; \">RespondCallCallback\u003C/h3>\u003Cp>Returns the results of calling a callback in a scope.\u003C/p>\u003Cp>\u003C/p>\u003Cp>The data portion of the JSON packet contains the following properties:\u003C/p>\u003Cul>\u003Cli>\u003Cb>Result\u003C/b>: &nbsp;Result of eval, serialized as JSON.&nbsp;&nbsp;If the result is undefined, then this value will be missing.\u003C/li>\u003Cli>\u003Cb>Exception\u003C/b>: &nbsp;JSON-serialized exception, if it&nbsp;occurred.\u003C/li>\u003C/ul>\u003C/div>"}