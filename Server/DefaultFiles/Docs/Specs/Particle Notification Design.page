{"Title":"Particle notification design","Contents":"\u003Cp>This document contains the design for ObjectCloud's Particle\nnotification system.\u003C/p>\n\u003Ch1 class=\"western\">Overview\u003C/h1>\n\u003Cp>Every user will have an embedded database to store their\nnotifications.  Scaling is handled by each user having their own\nseparate database.\u003C/p>\n\u003Cp>The user object will handle the particle database.  Per the\nexisting ObjectCloud design, the user object is:\u003C/p>\n\u003Cp style=\"margin-left: 0.49in;\">/Users/TheUser.user\u003C/p>\n\u003Ch1 class=\"western\">TODOs:\u003C/h1>\n\u003Cp>Notifying a user when another user shares a document with him or\nher is TODO, but part of this design.  (Base WebHandler needs to\nshell instead of directly calling the parent directory's webHandler. \nDirectory WebHandler will override the permission method and send\nnotifications.)\u003C/p>\n\u003Ch1 class=\"western\">Schema\u003C/h1>\n\u003Cp>Because Objectcloud's embedded databases are SQLite, the schema is\ndesigned around this database.\u003C/p>\n\u003Cp>The following tables are used in each user's Particle\nnotifications database:\u003C/p>\n\u003Cul>\u003Cli>\u003Cp>\u003Cb>Notification\u003C/b>:  Stores each notification and its state,\n\texcept for changeData.  This is because large variable-length\n\tstrings can cause overhead.\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp>\u003Cb>ChangeData\u003C/b>:  Stores the changeData sent with each\n\tnotification, if included.\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp>\u003Cb>Sender\u003C/b>:  Stores information about senders.  Includes\n\tblock status and senderTokens.\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp>\u003Cb>Token\u003C/b>:  Stores information needed to establish trust.\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp>\u003Cb>Blocked\u003C/b>:  Blocked OpenID users and domains.\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp>\u003Cb>ObjectState\u003C/b>:  Stores information about objects through\n\ttheir objectUrls.  Includes information about their ignore and\n\tdelete status.\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp>\u003Cb>Deleted\u003C/b>:  Stores information about recipients and\n\tobjects that they have requested not to receive notifications for.\u003C/p>\n\u003C/li>\u003C/ul>\n\u003Ch2 class=\"western\" style=\"font-weight: normal;\">Notification Table\u003C/h2>\n\u003Cp>The notification table stores information about each notification\nand its state.\u003C/p>\n\u003Cp>Columns:\u003C/p>\n\u003Cul>\u003Cli>\u003Cp class=\"numbering-1-western\">\u003Cb>notificationId\u003C/b>\u003Cspan style=\"font-weight: normal;\">:\n\t Primary numerical index.  Starts at 0 and automatically increments.\u003C/span>\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp class=\"numbering-1-western\">\u003Cb>timeStamp\u003C/b>\u003Cspan style=\"font-weight: normal;\">:\n\t The exact date/time that the row was created.  Not null, and if\n\tpossible, the schema should automatically create the timeStamp.\u003C/span>\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp class=\"numbering-1-western\">\u003Cb>state\u003C/b>\u003Cspan style=\"font-weight: normal;\">: \"r\" for read.  Any other value, including null, implies unread.\u003C/span>\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp class=\"numbering-1-western\">\u003Cb>sender\u003C/b>\u003Cspan style=\"font-weight: normal;\">:\n\t The notification's sender's OpenId.  Not null.\u003C/span>\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp class=\"numbering-1-western\">\u003Cb>objectUrl\u003C/b>\u003Cspan style=\"font-weight: normal;\">:\n\t The URL to the document.  Not null.\u003C/span>\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp class=\"numbering-1-western\">\u003Cb>title\u003C/b>\u003Cspan style=\"font-weight: normal;\">:\n\t The title of the document as of when the notification was sent. \n\tNot null.\u003C/span>\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp class=\"numbering-1-western\">\u003Cb>documentType\u003C/b>\u003Cspan style=\"font-weight: normal;\">:\n\t The document type.  Not null.\u003C/span>\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp class=\"numbering-1-western\">\u003Cb>messageSummary\u003C/b>\u003Cspan style=\"font-weight: normal;\">:\n\t A summary of the notification that will be displayed in the GUI. \n\tNot null.\u003C/span>\u003C/p>\n\u003C/li>\u003C/ul>\n\u003Ch2 class=\"western\" style=\"font-weight: normal;\">ChangeData Table\u003C/h2>\n\u003Cp style=\"font-weight: normal;\">The ChangeData stores the ChangeData\nsent with each notification.  If a notification does not include\nchangeData, then no entry is made.\u003C/p>\n\u003Cp style=\"font-weight: normal;\">Columns:\u003C/p>\n\u003Cul>\u003Cli>\u003Cp>\u003Cb>notificationId\u003C/b>\u003Cspan style=\"font-weight: normal;\">: \n\tForeign key to Notification.notificationId.  If possible, the SQLite\n\tschema should enable cascading deletes.\u003C/span>\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp>\u003Cb>changeData\u003C/b>\u003Cspan style=\"font-weight: normal;\">:  The\n\tchangeData sent with the notification.  Not Null.\u003C/span>\u003C/p>\n\u003C/li>\u003C/ul>\n\u003Ch2 class=\"western\" style=\"font-weight: normal;\">Sender Table\u003C/h2>\n\u003Cp style=\"font-weight: normal;\">The sender table stores sender's\nOpenIDs and senderTokens.\u003C/p>\n\u003Cp style=\"font-weight: normal;\">Columns:\u003C/p>\n\u003Cul>\u003Cli>\u003Cp>\u003Cb>openID\u003C/b>\u003Cspan style=\"font-weight: normal;\">:  Sender's\n\tOpenID\u003C/span>\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp>\u003Cb>senderToken\u003C/b>\u003Cspan style=\"font-weight: normal;\">:  The\n\trandomly-generated senderToken that is used when the OpenID is the\n\tsender and this user is the recipient.  Setting this to null implies\n\tthat the sender has to re-establish trust.\u003C/span>\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp>\u003Cb>recipientToken\u003C/b>\u003Cspan style=\"font-weight: normal;\">:  The\n\tsenderToken that the OpenID generated when it established trust as a\n\trecipient.  This is null until trust is established.\u003C/span>\u003C/p>\n\u003C/li>\u003C/ul>\n\u003Ch2 class=\"western\" style=\"font-weight: normal;\">Token Table\u003C/h2>\n\u003Cp style=\"font-weight: normal;\">The sender table stores sender's\nOpenIDs and tokens.  It is used for establishing trust.  Entries\nshould be deleted after the senderToken is set.\u003C/p>\n\u003Cp style=\"font-weight: normal;\">Columns:\u003C/p>\n\u003Cul>\u003Cli>\u003Cp>\u003Cb>openID\u003C/b>\u003Cspan style=\"font-weight: normal;\">:  Sender's\n\tOpenID, not null.\u003C/span>\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp>\u003Cb>token\u003C/b>\u003Cspan style=\"font-weight: normal;\">:  The\n\trandomly-generated token used when establishing trust.  Not null.\u003C/span>\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp>\u003Cb>created\u003C/b>\u003Cspan style=\"font-weight: normal;\">:  Timestamp\n\twhen the entry was made.\u003C/span>\u003C/p>\n\u003C/li>\u003C/ul>\n\u003Ch2 class=\"western\" style=\"font-weight: normal;\">Blocked Table\u003C/h2>\n\u003Cp style=\"font-weight: normal;\">Contains blocked OpenIDs and domains\u003C/p>\n\u003Cp style=\"font-weight: normal;\">Columns:\u003C/p>\n\u003Cul>\u003Cli>\u003Cp>\u003Cb>openIDorDomain\u003C/b>\u003Cspan style=\"font-weight: normal;\">:  An\n\tOpenID or domain.  These are merged together because some OpenIDs\n\tare domains.\u003C/span>\u003C/p>\n\u003C/li>\u003C/ul>\n\u003Ch2 class=\"western\" style=\"font-weight: normal;\">ObjectState\u003C/h2>\n\u003Cp style=\"font-weight: normal;\">Stores information about the state of\nan object.  If the object has no entry in this table, then its state\nis unignore.\u003C/p>\n\u003Cp style=\"font-weight: normal;\">Columns:\u003C/p>\n\u003Cul>\u003Cli>\u003Cp>\u003Cb>objectUrl\u003C/b>\u003Cspan style=\"font-weight: normal;\">:  The\n\tobject's URL that is sent with a notification.  Not null.\u003C/span>\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp>\u003Cb>objectState\u003C/b>\u003Cspan style=\"font-weight: normal;\">:  Either \"i\" for ignore, \"d\" for deleted, or \"s\" for silently\n\tdeleted.  Not null.\u003C/span>\u003C/p>\n\u003C/li>\u003C/ul>\n\u003Cp style=\"font-weight: normal;\">If an object is to be unignored, then\nits entry is removed from the table.\u003C/p>\n\u003Ch2 class=\"western\" style=\"font-weight: normal;\">Deleted Table\u003C/h2>\n\u003Cp style=\"font-weight: normal;\">The deleted table stores information\nabout objects that recipients have requested not to receive future\nnotifications.\u003C/p>\n\u003Cp style=\"font-weight: normal;\">Columns:\u003C/p>\n\u003Cul>\u003Cli>\u003Cp>\u003Cb>objectUrl\u003C/b>\u003Cspan style=\"font-weight: normal;\">:  The\n\tobject's url.  Not null.\u003C/span>\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp>\u003Cb>openId\u003C/b>\u003Cspan style=\"font-weight: normal;\">:  The OpenID\n\tthat requested that it no longer receive notifications about the\n\tgiven object.\u003C/span>\u003C/p>\n\u003C/li>\u003C/ul>\n\u003Ch1 class=\"western\" style=\"font-weight: normal;\">OpenID Landing page\u003C/h1>\n\u003Cp style=\"font-weight: normal;\">/Shell/OpenID/OpenIDLandingPage.wchtml\nwill need to be updated to include references to the particle\nendpoints.\u003C/p>\n\u003Ch1 class=\"western\" style=\"font-weight: normal;\">Events and Handling\nthem\u003C/h1>\n\u003Cp style=\"font-weight: normal;\">The server-side Javascript will need\nto handle the following events:\u003C/p>\n\u003Cul>\u003Cli>\u003Cp style=\"font-weight: normal;\">Object created: Constructs the\n\tschema\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">Javascript / schema updated:\n\tUpdates the schema, if needed\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">Finding endpoints\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">particle.establishTrust\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">Establishing Trust\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">particle.respondTrust\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">particle.receiveNotification\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">particle.establishSession\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">particle.getNotifications\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">particle.sendNotification\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">particle.updateNotificationState\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">particle.updateObjectState\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">particle.block\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">particle.unBlock\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"margin-bottom: 0in; font-weight: normal;\">particle.getBlocked\u003C/p>\n\u003C/li>\u003C/ul>\n\u003Ch2 class=\"western\" style=\"font-weight: normal;\">Object created,\nJavascript / schema updated\u003C/h2>\n\u003Cp style=\"font-weight: normal;\">This is implemented using setSchema. \nThe setSchema method handles versioning.\u003C/p>\n\u003Ch2 class=\"western\" style=\"font-weight: normal;\">Finding Endpoints\u003C/h2>\n\u003Cp style=\"font-weight: normal;\">The server-side Javascript will hold\nendpoints in RAM instead of the database.  This is to increase speed\nand give a natural way for endpoints to be regularly refreshed. \nLogic will exist to delete endpoints older then 24 hours.\u003C/p>\n\u003Cp style=\"font-weight: normal;\">When any of the particle events need\nto use an endpoint, they will call the \"GetEndpoints\" server-side\nJavascript method.  It takes two arguments:\u003C/p>\n\u003Col>\u003Cli>\u003Cp>\u003Cb>openID\u003C/b>\u003Cspan style=\"font-weight: normal;\">:  The OpenID,\n\tstring.\u003C/span>\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp>\u003Cb>forceRefresh\u003C/b>\u003Cspan style=\"font-weight: normal;\">: \n\tOptional, a boolean, if set to true, then a refresh is forced.\u003C/span>\u003C/p>\n\u003C/li>\u003C/ol>\n\u003Cp style=\"font-weight: normal;\">Internally, the following data\nstructure is used:\u003C/p>\n\u003Cul>\u003Cli>\u003Cp style=\"font-weight: normal;\">Hash object, indexed by OpenID. \n\tFor each OpenID:\u003C/p>\n\t\u003Cul>\u003Cli>\u003Cp>\u003Cb>timestamp\u003C/b>\u003Cspan style=\"font-weight: normal;\">:  When\n\t\tthe object endpoints were loaded, Javascript datetime stamp.\u003C/span>\u003C/p>\n\t\t\u003C/li>\u003Cli>\u003Cp>\u003Cb>openID\u003C/b>\u003Cspan style=\"font-weight: normal;\">:  The\n\t\tOpenID, string.\u003C/span>\u003C/p>\n\t\t\u003C/li>\u003Cli>\u003Cp>\u003Cb>endpoints\u003C/b>\u003Cspan style=\"font-weight: normal;\">: \n\t\tJavascript hash with the following values\u003C/span>\u003C/p>\n\t\t\u003Cul>\u003Cli>\u003Cp>\u003Cb>establishTrust\u003C/b>:  The endpoint for\n\t\t\tparticle.establishTrust\u003C/p>\n\t\t\t\u003C/li>\u003Cli>\u003Cp>\u003Cb>callEstablishTrust\u003C/b>:  Calls the establishTrust\n\t\t\tendpoint.\u003C/p>\n\t\t\t\u003C/li>\u003Cli>\u003Cp>\u003Cb>respondTrust\u003C/b>:  The endpoint for\n\t\t\tparticle.respondTrust\u003C/p>\n\t\t\t\u003C/li>\u003Cli>\u003Cp>\u003Cb>callRespondTrust\u003C/b>:  Calls the respondTrust endpoint.\u003C/p>\n\t\t\t\u003C/li>\u003Cli>\u003Cp>\u003Cb>ect\u003C/b>:  All other particle.* links from the OpenID\n\t\t\thtml page\u003C/p>\n\t\t\t\u003C/li>\u003Cli>\u003Cp>\u003Cb>call ect\u003C/b>:  Calls the other supported particle.*\n\t\t\tlinks.\u003C/p>\n\t\t\u003C/li>\u003C/ul>\n\t\u003C/li>\u003C/ul>\n\u003C/li>\u003C/ul>\n\u003Cp>The logic to determine if the endpoints need to be refreshed is:\u003C/p>\n\u003Cp style=\"margin-left: 0.49in;\">if forceRefresh is present and set to\ntrue\u003C/p>\n\u003Cp style=\"margin-left: 0.98in;\">refresh\u003C/p>\n\u003Cp style=\"margin-left: 0.49in;\">if there are no cached endpoints\u003C/p>\n\u003Cp style=\"margin-left: 0.98in;\">refresh\u003C/p>\n\u003Cp style=\"margin-left: 0.49in;\">if there is a cached endpoint and it's\nmore then 24 hours old\u003C/p>\n\u003Cp style=\"margin-left: 0.98in;\">refresh\u003C/p>\n\u003Ch2 class=\"western\" style=\"font-weight: normal;\">particle.establishTrust\u003C/h2>\n\u003Cp style=\"font-weight: normal;\">Implemented in the server-side\nJavascript \"EstablishTrust\" method.\u003C/p>\n\u003Col>\u003Cli>\u003Cp style=\"font-weight: normal;\">The senders endpoints are found\n\tby calling GetEndpoints for the given OpenID.\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">A new senderToken is randomly\n\tgenerated.  It is verified to be unique.\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">The particle.respondTrust\n\tendpoint is called.  The token value is passed directly without\n\tmodification, and the newly-generated senderToken is sent as well.\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">If respondTrust succeeds, then an\n\tentry in the Sender table is either created or updated.\u003C/p>\n\u003C/li>\u003C/ol>\n\u003Cp>For security reasons, the Sender table should only be updated if\nparticle.respondTrust is successful.  This is to prevent malicious\nattacks that would invalidate senderTokens.\u003C/p>\n\u003Ch2 class=\"western\" style=\"font-weight: normal;\">Establishing Trust /\nGetting a senderToken.\u003C/h2>\n\u003Cp style=\"font-weight: normal;\">This server-side Javascript method is\nused internally, such as when a notification is sent.  The method is\nnamed \"GetSenderToken\".  It takes two arguments:\u003C/p>\n\u003Col>\u003Cli value=\"1\">\u003Cp>\u003Cb>openID\u003C/b>\u003Cspan style=\"font-weight: normal;\">:  The\n\tOpenID, string.\u003C/span>\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp>\u003Cb>forceRefresh\u003C/b>\u003Cspan style=\"font-weight: normal;\">: \n\tOptional, a boolean, if set to true, then a refresh is forced.\u003C/span>\u003C/p>\n\u003C/li>\u003C/ol>\n\u003Cp style=\"font-weight: normal;\">If forceRefresh is missing or false,\nand there is an entry in the Sender table with the given OpenID and\nits recipientToken isn't null, then the recipientToken is returned. \nElsewise, the method continues to establish trust with the given\nOpenID.\u003C/p>\n\u003Cp style=\"font-weight: normal;\">To establish trust:\u003C/p>\n\u003Col>\u003Cli>\u003Cp style=\"font-weight: normal;\">An entry is created in the sender\n\ttable if it is not there.\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">A randomly-generated token is\n\tmade.\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">The token is validated to make\n\tsure it's unique.\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">An entry is made in the Token\n\ttable.\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">GetEndpoints is called to get the\n\tendpoints.\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">The OpenID's establishTrust\n\tendpoint is called.  The token and this user's OpenID are sent.\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">If it returns success, then\n\tGetSenderToken recurses to re-load the recipientToken.  (It's\n\tentered into the database because establishTrust blocks while the\n\tnew senderToken is sent to respondTrust.)  If failure is returned,\n\tthen an exception is thrown.\u003C/p>\n\u003C/li>\u003C/ol>\n\u003Cp style=\"font-weight: normal;\">Notes:\u003C/p>\n\u003Cp style=\"font-weight: normal;\">Due to the design of establishing\ntrust, the senderToken isn't returned by a call to establishTrust. \nInstead, the recipient verifies that the sender is the OpenID that it\nclaims to be by calling respondTrust.\u003C/p>\n\u003Ch2 class=\"western\" style=\"font-weight: normal;\">particle.respondTrust\u003C/h2>\n\u003Cp style=\"font-weight: normal;\">When establishing trust with a\nrecipient, the recipient calls this endpoint to verify that the\nsender is as claimed.  This is to prevent spoofing.  It is\nimplemented in server-side Javascript as \"RespondTrust\", and\ntakes two arguments:\u003C/p>\n\u003Col>\u003Cli>\u003Cp>\u003Cb>token\u003C/b>\u003Cspan style=\"font-weight: normal;\">:  The token\n\tthat this user sent to the recipient.\u003C/span>\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp>\u003Cb>senderToken\u003C/b>\u003Cspan style=\"font-weight: normal;\">:  The\n\ttoken that the recipient will use to identify this sender.\u003C/span>\u003C/p>\n\u003C/li>\u003C/ol>\n\u003Cp style=\"font-weight: normal;\">The method has the following steps:\u003C/p>\n\u003Col>\u003Cli>\u003Cp style=\"font-weight: normal;\">All entries in the Token table\n\tthat are older then 180 seconds are deleted.\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">An attempt is made to find the\n\tOpenID from the sent token.  If there is no matching OpenID, then an\n\terror is returned.\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">The Sender table's recipientToken\n\tis updated in the row identified with the loaded OpenID.\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">The row from the Token table is\n\tdeleted.\u003C/p>\n\u003C/li>\u003C/ol>\n\u003Ch2 class=\"western\" style=\"font-weight: normal;\">particle.receiveNotification\u003C/h2>\n\u003Cp style=\"font-weight: normal;\">This endpoint is implemented as the \"receiveNotification\" server-side Javascript method.\u003C/p>\n\u003Cp style=\"font-weight: normal;\">(See the particle notification spec\nfor the arguments, no use copying)\u003C/p>\n\u003Col>\u003Cli>\u003Cp style=\"font-weight: normal;\">The Sender table is queried to\n\tfind the OpenID from the senderToken.  If no matching senderToken is\n\tfound, then an HTTP status 424 (failed dependancy.) and the text &nbsp;\"senderToken\" are returned.\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">The Blocked table is queried for\n\tthe OpenID.  If it is found, then a 202 is returned and the\n\tnotification discarded.\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">The Blocked table is queried for\n\tthe OpenID's domain and all parent domains.  If any are found, then\n\ta 202 is returned and the notification discarded.\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">The ObjectState table is queried\n\tfor an entry with the objectUrl.\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">If the state is deleted, then the\n\t450 (Blocked) HTTP status code is returned.  The ignored and silent\n\tdelete statuses cause a 202 status code to be returned.  (The method\n\treturns in these cases and the rest of the steps are ignored.)\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">If the notification's objectUrl\n\tis for a different server then where the OpenID is hosted, then a\n\t406 (Not acceptable) is returned.  The server will also include a\n\tmessage explaining the error.\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">The data is then entered into the\n\tNotification table.\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">If there are blocked calls\n\tGetNoficiation, they are unblocked.\u003C/p>\n\u003C/li>\u003C/ol>\n\u003Cp style=\"font-weight: normal;\">Note:  The senderToken is verified\nbefore any kind of state about the object is returned.  This is to\nprevent malicious entities from learning about private data.\u003C/p>\n\u003Ch2 class=\"western\" style=\"font-weight: normal;\">particle.establishSession\u003C/h2>\n\u003Cp style=\"font-weight: normal;\">This is implemented as a Javascript\nmethod that shells to ObjectCloud's default login system.\u003C/p>\n\u003Ch2 class=\"western\" style=\"font-weight: normal;\">particle.getNotifications\u003C/h2>\n\u003Cp style=\"font-weight: normal;\">This is implemented as a server-side\nJavascript method named getNotifications.  A session must be\nestablished with a user that has Read permission to this object.  A\nuser can let other users read his/her notifcations by granting READ\naccess to this object.  The method constructs a dynamic SQL query\nbased on the user's arguments.\u003C/p>\n\u003Cp style=\"font-weight: normal;\">(See the spec's section for this\nendpoint to see the arguments.)\u003C/p>\n\u003Col>\u003Cli>\u003Cp style=\"font-weight: normal;\">The query is constructed:\u003C/p>\n\t\u003Col>\u003Cli>\u003Cp style=\"font-weight: normal;\">By default, the columns selected\n\t\tare: notificationId, timeStamp, state, sender, objectUrl, title,\n\t\tdocumentType, and messageSummary.  ChangeData is only included if\n\t\texplicitly requested.\u003C/p>\n\t\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">By default, only the\n\t\tNotification table is used in the FROM clause.  If ChangeData is\n\t\tpresent, then the ChangeData table is joined on the NotificationId.\u003C/p>\n\t\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">The where clause is built using\n\t\tnewestNotificationId, oldestNotificationId, objectUrl, and sender.\u003C/p>\n\t\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">The query is ordered by\n\t\tNotificationId in a descending order.\u003C/p>\n\t\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">If maxNotifications is sent,\n\t\tthen a \"MAX\" clause is appended.\u003C/p>\n\t\u003C/li>\u003C/ol>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">The results are returned.  As the\n\tschema matches the standard, no object conversion needs to be made.\u003C/p>\n\u003C/li>\u003C/ol>\n\u003Ch2 class=\"western\" style=\"font-weight: normal;\">particle.sendNotification\u003C/h2>\n\u003Cp style=\"font-weight: normal;\">This endpoint requires that the client\nbe authenticated and that the client's user has Write access to this\nobject.  Typically, this will be the owner, although the owner can\nallow other people to pretend to be him / her by granting Write\naccess to this object.  This is implemented as the server-side \"SendNotification\" method.\u003C/p>\n\u003Cp style=\"font-weight: normal;\">(See the spec's section for this\nendpoint to see the arguments.)\u003C/p>\n\u003Cp style=\"font-weight: normal;\">The additional optional arguments are\nsupported:\u003C/p>\n\u003Cul>\u003Cli>\u003Cp>\u003Cb>forceRefreshSenderToken\u003C/b>\u003Cspan style=\"font-weight: normal;\">:\n\t Forces a refresh of the senderToken, defaults to false.\u003C/span>\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp>\u003Cb>forceRefreshEndpoints\u003C/b>\u003Cspan style=\"font-weight: normal;\">:\n\t Forces a refresh of the endpoints, defaults to false.\u003C/span>\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp>\u003Cb>maxRetries\u003C/b>\u003Cspan style=\"font-weight: normal;\">: \n\tDefaults to 42.\u003C/span>\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp>\u003Cb>transportErrorDelay\u003C/b>\u003Cspan style=\"font-weight: normal;\">:\n\t The amount of time to wait if there is some kind of a transport\n\terror.  Defaults to 1 minute.\u003C/span>\u003C/p>\n\u003C/li>\u003C/ul>\n\u003Cp style=\"font-weight: normal;\">The function behaves as follows:\u003C/p>\n\u003Col>\u003Cli>\u003Cp style=\"font-weight: normal;\">The Deleted table is checked for\n\tthe objectUrl and OpenID.  If a row with both are present, then a\n\t403 (Forbidden) is returned indicating that the recipient asked not\n\tto get any more notifications for this object.\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">Return a 202 (Accepted) and run\n\tthe following asynchronously:\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">If maxRetries is less then 0,\n\tthen the function returns and the notification is lost.\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">The passed in OpenID is sent to\n\tGetSenderToken to get the senderToken.\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">The endpoints are loaded through\n\tGetEndpoints\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">The destination's\n\treceiveNotification endpoint is called.  All of the non-optional\n\targuments sent to SendNotification are passed, except senderToken is\n\tused instead of OpenID.\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">If there is some kind of an error\n\tfinding or using the endpoints, then the function waits for the\n\ttransportErrorDelay and then recurses with forceRefreshEndpoints set\n\tto true.  When recursing, maxRetries is decremented.\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">If receiveNotification returns a\n\t412 and the text \"SenderToken\", then the function recurses with\n\tforceRefreshSenderToken set to true and maxRetries decremented.\u003C/p>\n\t\u003C/li>\u003Cli>\u003Cp style=\"font-weight: normal;\">If receiveNotification returns a\n\t450 (Blocked), then an entry is made in the Deleted table.  The\n\tclient is not informed of this status until the next time it\n\tattempts to send a notification to the same OpenID for the same\n\tobjectUrl.\u003C/p>\n\u003C/li>\u003C/ol>\n\u003Ch2 class=\"western\" style=\"font-weight: normal;\">particle.updateNotificationState\u003C/h2>\n\u003Cp style=\"font-weight: normal;\">(See the spec's section for this\nendpoint to see the arguments.)\u003C/p>\n\u003Cp style=\"font-weight: normal;\">This is implemented as a Javascript\nfunction called \"UpdateNotificationState\".  A session must be\nestablished where the user has WRITE access.  It uses an update query\non the Notification table using the passed NotificationId to update\nthe state column to r if read, or null if unread.\u003C/p>\n\u003Cp style=\"font-weight: normal;\">All blocked calls to GetNotifications\nare unblocked.\u003C/p>\n\u003Ch2 class=\"western\" style=\"font-weight: normal;\">particle.updateObjectState\u003C/h2>\n\u003Cp style=\"font-weight: normal;\">(See the spec's section for this\nendpoint to see the arguments.)\u003C/p>\n\u003Cp style=\"font-weight: normal;\">Server-side javascript function named \"UpdateObjectState\".  A session must be established where the\nuser has ADMINISTER access.  An entry in the ObjectState table is\neither created or updated based on the passed-in state.\u003C/p>\n\u003Cp style=\"font-weight: normal;\">If \"delete\" or \"silentDelete\" is passed in, then all notifications for the given object are\ndeleted.\u003C/p>\n\u003Ch2 class=\"western\" style=\"font-weight: normal;\">particle.block\u003C/h2>\n\u003Cp style=\"font-weight: normal;\">(See the spec's section for this\nendpoint to see the arguments.)\u003C/p>\n\u003Cp style=\"font-weight: normal;\">Implemented as \"Block\".  A session\nmust be established where the user has ADMINISTER access.\u003C/p>\n\u003Cp>\u003Cspan style=\"font-weight: normal;\">The toBlock argument is used to\nmake an entry in the Blocked table.  OpenIDorDomain is set from\ntoBlock.  OpenIDs (\u003Ca href=\"http://fdfsgvdsf/\">http://fdfsgvdsf\u003C/a>)\nor domains (without http) can be sent.  No input validation is\nperformed.\u003C/span>\u003C/p>\n\u003Cp style=\"font-weight: normal;\">A 202 (Accepted) error code is\nreturned if there are no errors.\u003C/p>\n\u003Ch2 class=\"western\" style=\"font-weight: normal;\">particle.unBlock\u003C/h2>\n\u003Cp style=\"font-weight: normal;\">(See the spec's section for this\nendpoint to see the arguments.)\u003C/p>\n\u003Cp style=\"font-weight: normal;\">Implemented as \"UnBlock\".  A\nsession must be established where the user has ADMINISTER access.\u003C/p>\n\u003Cp style=\"font-weight: normal;\">The toUnBlock argument is used to\nremove an entry in the Blocked table where OpenIDorDomain is\ntoUnBlock.\u003C/p>\n\u003Cp style=\"font-weight: normal;\">A 202 (Accepted) error code is\nreturned if there are no errors.\u003C/p>\n\u003Ch2 class=\"western\" style=\"font-weight: normal;\">particle.getBlocked\u003C/h2>\n\u003Cp style=\"font-weight: normal;\">(No arguments.)\u003C/p>\n\u003Cp style=\"font-weight: normal;\">Implemented as \"GetBlocked\".  A\nsession must be established where the user has READ access.\u003C/p>\n\u003Cp style=\"font-weight: normal;\">All blocked domains and endpoints are\nreturned as a single Javascript array with a 200 (OK) success code.\u003C/p>"}