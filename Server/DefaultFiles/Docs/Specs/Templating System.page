<div>ObjectCloud Templating System</div>
<p>This document describes the design for ObjectCloud's templating system. &nbsp;As of this writing, ObjectCloud's templating system is unimplemented. &nbsp;The templating system constructs XML documents from many components and default header / footer documents stored in the server. &nbsp;It resolves Javascript dependancies among all components; transforms script, image, and CSS tags to use&nbsp;cacheable&nbsp;requests; uses a (yet-to-be-decided) jQuery templating system for further rendering of dynamic content; and provides ways for pages to manipulate the contents of the &lt;head&gt; tag. &nbsp;The templating system is designed to enable quick server-side rendering of documents with low CPU and RAM overhead, thus enabling ObjectCloud to handle higher loads and run on inexpensive hardware and VMs. &nbsp;Future versions of the templating system may support hybrid server/browser rendering of content by streaming data through The Comet Protocol to give an illusion of rapid response times. &nbsp;They may also support .Net plugins that provide further modifications of documents not anticipated in this design.</p><h1>Overview</h1><h2>Justification</h2><p>ObjectCloud currently contains a quickly-implemented templating system called the "WebComponent" system. &nbsp;An original design goal was that it would be somewhat compatible with PHP, although this goal was quickly forgotten. &nbsp;The WebComponent system has an inconsistant syntax, and has somewhat high CPU and RAM overhead because it essentially creates a new request for every component and script reference. &nbsp;The WebComponent system doesn't provide true templating, however, which means that data needs to be rendered in either server-side or in-browser Javascript. &nbsp;This further hinders performance. &nbsp;The final problem with the WebComponent templating system is that every page needs to be aware and include system headers and footers, and that pages don't have ways to manipulate such parts of the page.</p><p>The WebComponent system demonstrates the following good features that will be included in ObjectCloud's templating system:</p><p></p><ul><li>Ability to include server-side rendered components within a page.</li><li>Resolution of Javascript&nbsp;dependancies&nbsp;and avoidance of duplicate &lt;script&gt; tags.</li><li>Generation of URLs that support agressive caching and reload only when contents change.</li><li>Conditionally rendering content based on who the user is or what kind of permissions exist.</li><li>Ability to pass arguments to components.</li><li>Automatic minification of Javascript</li></ul>The WebComponent system has the following flaws that will not be included in ObjectCloud's templating system:<p></p><p></p><ul><li>Excessive reliance on emulating incoming web requests for each component and script.</li><li>Awkward, non-XML syntax.</li><li>Reliance on programming to render all data.</li><li>High CPU utilization and high RAM consumption.</li><li>Support of POST requests and cookies.</li><li>Requiring server-side or in-browser Javascript to "execute" a condition.</li><li>Explicit path requirements.</li><li>Requirement that component arguments be passed as url-encoded GET arguments.</li><li>No rollup and&nbsp;resolution&nbsp;of CSS file dependancies</li></ul><h2>Description</h2><p>The templating system is designed to fit into HTML5 where a valid XML document can be a valid HTML5 document. &nbsp;It uses a custom namespace that directs the templating engine to replace tags and alter attributes. &nbsp;The system uses convention for default headers and footers. &nbsp;Internally, ObjectCloud uses the System.Xml.XmlDocument for all manipulations, thus taking advantage of a battle-hardened and tested API for document generation.<br></p><p>The following general features are included:</p><h3>XML with Specific Namespace</h3><p>ObjectCloud's templating system is completely XML based. &nbsp;All tags and attributes are part of the "objectcloud_templating" namespace. &nbsp;The prefix "oc" is&nbsp;recommended. &nbsp;Using HTML5 as a default namespace is also&nbsp;recommended. &nbsp;Thus, a document will have tags like:</p><p></p><blockquote class="webkit-indent-blockquote" style="margin: 0 0 0 40px; border: none; padding: 0px;"><p></p><pre>&lt;a href="..."&gt;&lt;img src="..." /&gt;&lt;/a&gt;</pre><pre>&lt;oc:component src="..." /&gt;</pre><p></p></blockquote><p></p><h3>Component Support</h3><p>The &lt;oc:component&gt; tag will use a document named in the src attribute as a component. &nbsp;It will support&nbsp;declaring&nbsp;arguments in XML or pass-through of existing arguments. &nbsp;If src is omitted, then either the &lt;oc:component&gt; tag is removed, or if the document is being used as a header/footer for another document, the requested document is substituted in.</p><h3>Standard Header/Footer document<br></h3><div>By default, all documents are wrapped in a standard header/footer. &nbsp;Documents that have a top-level &lt;html&gt; tag aren't wrapped in the standard header/footer, but can wrap other documents. &nbsp;Documents that have an &lt;oc:header&gt; tag can control which header/footer is used to wrap themselves.</div><meta charset="utf-8"><h3 style="font-size: 1.1em; font-weight: bold; ">Conditional Tags</h3><p>The &lt;oc:if&gt; tag is used to select a subset of tags to return. &nbsp;Within an &lt;oc:if&gt; tag are additional conditional tags. &nbsp;The first conditional that is met is kept, and all other conditionals are removed.</p><h3 style="font-size: 1.1em; font-weight: bold; ">Script&nbsp;Dependency&nbsp;Resolution</h3><p>TBD, will be very jQuery friendly</p><h3>CSS&nbsp;Dependency&nbsp;Resolution</h3><p>Documents may place an &lt;oc:css src="..." /&gt; anywhere; although it is&nbsp;recommended&nbsp;that these tags be placed at the top of a document. &nbsp;These will be removed, and a corresponding &lt;link&gt; tag placed in the header. &nbsp;ObjectCloud will prevent duplicates; meaning, many components can all have an &lt;oc:css src="/mycss.css"/&gt; tag, but only one corresponding &lt;link&gt; tag will be generated.<br></p><h3>Header/Footer Manipulation from Components</h3><p>Components can insert items into the &lt;head&gt; tag by wrapping them in an &lt;oc:inserthead loc="<i>some number</i>" /&gt;. &nbsp;Header/footer pages can leave room for these manipulations by placing &lt;oc:placehead loc="<i>some number</i>" /&gt; in the &lt;head&gt; tag. &nbsp;If an &lt;oc:inserthead&gt; uses a loc that isn't specified in the &lt;head&gt; tag, ObjectCloud will attempt to find a reasonable place to put its contents within the &lt;head&gt; tag, with higher numbers placed towards the end of the &lt;head&gt; tag, and lower numbers placed towards the beginning. &nbsp;Negative numbers are placed in the beginning.<br></p><p>Footer manipulation is TBD but will most likely follow a similar pattern.</p><h3>jQuery Template Support<br></h3><p>TBD</p><h3>Automatic &lt;img&gt;, &lt;script&gt;, and &lt;link&gt; tag manipulation for Caching support</h3><p>Just before returning the completed document, ObjectCloud will look at all img, script, and link tags. &nbsp;It will modify all src attributes to use the BrowserCache GET argument, which allows the browser to cache the contents for a long time. &nbsp;This is a very fast way to cache images, scripts, and CSS, because the browser doesn't need to send an HTTP request to find out if the content changed; instead, the server informs the browser of changes by changing the contents of BrowserCache.</p><h3>Plugins</h3><p>Although not designed or implemented now, future versions can allow custom plugins that perform additional document manipulations via custom namespaces, tags, and attributes.</p><h1>Order of Operations</h1><p>TBD, but some thoughts:</p><pre>While the current document doesn't declare that it doesn't use a header/footer</pre><p></p><blockquote class="webkit-indent-blockquote" style="margin: 0 0 0 40px; border: none; padding: 0px;"><p></p><pre>Either encapsulate it in the standard header/footer or its declared header/footer</pre><p></p></blockquote><p></p><p>The above loop allows intermediate header/footer pairs. &nbsp;For example, a set of pages might have a set of common elements, and thus these can be condensed into an intermediate header/footer that sill fits within the system header/footer</p><pre>do</pre><p></p><blockquote class="webkit-indent-blockquote" style="margin: 0 0 0 40px; border: none; padding: 0px;"><p></p><pre>While there are conditional and/or component tags</pre><p></p></blockquote><blockquote class="webkit-indent-blockquote" style="margin: 0 0 0 40px; border: none; padding: 0px;"><blockquote class="webkit-indent-blockquote" style="margin: 0 0 0 40px; border: none; padding: 0px;"><p></p><pre>Evaluate all conditional tags and remove unused tags</pre><p></p></blockquote><blockquote class="webkit-indent-blockquote" style="margin: 0 0 0 40px; border: none; padding: 0px;"><p></p><pre>Evaluate all component tags and load components</pre><p></p></blockquote></blockquote><blockquote class="webkit-indent-blockquote" style="margin: 0 0 0 40px; border: none; padding: 0px;"><p></p><p>At this point all components are loaded and all conditions evaluated</p><p></p><p></p><pre>Collect all script dependancies, css dependancies, and header/footer manipulations, execute them, and remove the tags</pre><p></p><p></p><pre>Evaluate all template tags</pre><p></p></blockquote><p></p><pre>While there are conditional, component, script dependancies, header/footer manipulations, and/or template tags</pre><pre>Manipulate all &lt;img&gt;, &lt;script&gt;, and &lt;link&gt; tags to use ObjectCloud's caching features.</pre><pre>Remove all remaining &lt;oc:...&gt; tags.</pre><h1>Integration</h1><p>The /System/TemplateEngine object will perform all template rendering.</p><p>Templates will be text files with the .oc extension. &nbsp;The .oc extension's View action will be "/System/TemplateEngine?Method=Evaluate&amp;fileName=[target]&amp;[args]" &nbsp;The Edit action will use Weco, a Javascript-based XHTML editor, or a Javascript-based XML editor.</p><p>The default header and footer will be "/DefaultTemplate/headerfooter.oc" &nbsp;By convention, default template images will go into "/DefaultTemplate."</p><h1>Detail</h1><div><h2>XML with Specific Namespace<br></h2><h2>Component Support<br></h2><h2>Standard Header/Footer document<br></h2><h2>Conditional Tags<br></h2><h2 style="font-size: 1.25em; font-weight: bold; ">Script&nbsp;Dependency&nbsp;Resolution<br></h2><h2 style="font-size: 1.25em; font-weight: bold; ">CSS Dependency&nbsp;Resolution<br></h2><h2>Header/Footer Manipulation from Components<br></h2><h2>jQuery Template Support<br></h2><h2>Automatic &lt;img&gt;, &lt;script&gt;, and &lt;link&gt; tag manipulation for Caching support<br></h2><h2>Plugins<br></h2></div><h1>Other ObjectCloud changes</h1><h2>BrowserCache calculation<br></h2><p>Currently, ObjectCloud calculates many MD5s to append to urls as a BrowserCache argument. &nbsp;Now, the lower-level IFileHandler will have an MD5 property that the templating system can take advantage of when possible.</p><h2>Loading XmlDocuments in ITextHandlers</h2><p>ITextHandlers may expose a lazily-initialized XmlDocument property which is a pre-cached XmlDocument loaded by evaluating the contents of the text file. &nbsp;This should be automatically "cleared" if the text file is overwritten, and re-lazily-initialized upon re-access.</p><p></p>