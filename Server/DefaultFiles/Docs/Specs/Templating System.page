{"Title":"ObjectCloud Templating System","Contents":"\n\u003Cp>This document describes the design for ObjectCloud's templating system. &nbsp;As of this writing, ObjectCloud's templating system is unimplemented. &nbsp;The templating system constructs XML documents from many components and default header / footer documents stored in the server. &nbsp;It resolves Javascript dependancies among all components; transforms script, image, and CSS tags to use&nbsp;cacheable&nbsp;requests; uses a (yet-to-be-decided) jQuery templating system for further rendering of dynamic content; and provides ways for pages to manipulate the contents of the &lt;head&gt; tag. &nbsp;The templating system is designed to enable quick server-side rendering of documents with low CPU and RAM overhead, thus enabling ObjectCloud to handle higher loads and run on inexpensive hardware and VMs. &nbsp;Future versions of the templating system may support hybrid server/browser rendering of content by streaming data through The Comet Protocol to give an illusion of rapid response times. &nbsp;They may also support .Net plugins that provide further modifications of documents not anticipated in this design.\u003C/p>\u003Ch1>Overview\u003C/h1>\u003Ch2>Justification\u003C/h2>\u003Cp>ObjectCloud currently contains a quickly-implemented templating system called the \"WebComponent\" system. &nbsp;An original design goal was that it would be somewhat compatible with PHP, although this goal was quickly forgotten. &nbsp;The WebComponent system has an inconsistant syntax, and has somewhat high CPU and RAM overhead because it essentially creates a new request for every component and script reference. &nbsp;The WebComponent system doesn't provide true templating, however, which means that data needs to be rendered in either server-side or in-browser Javascript. &nbsp;This further hinders performance. &nbsp;The final problem with the WebComponent templating system is that every page needs to be aware and include system headers and footers, and that pages don't have ways to manipulate such parts of the page.\u003C/p>\u003Cp>The WebComponent system demonstrates the following good features that will be included in ObjectCloud's templating system:\u003C/p>\u003Cp>\u003C/p>\u003Cul>\u003Cli>Ability to include server-side rendered components within a page.\u003C/li>\u003Cli>Resolution of Javascript&nbsp;dependancies&nbsp;and avoidance of duplicate &lt;script&gt; tags.\u003C/li>\u003Cli>Generation of URLs that support agressive caching and reload only when contents change.\u003C/li>\u003Cli>Conditionally rendering content based on who the user is or what kind of permissions exist.\u003C/li>\u003Cli>Ability to pass arguments to components.\u003C/li>\u003Cli>Automatic minification of Javascript\u003C/li>\u003C/ul>The WebComponent system has the following flaws that will not be included in ObjectCloud's templating system:\u003Cp>\u003C/p>\u003Cp>\u003C/p>\u003Cul>\u003Cli>Excessive reliance on emulating incoming web requests for each component and script.\u003C/li>\u003Cli>Awkward, non-XML syntax.\u003C/li>\u003Cli>Reliance on programming to render all data.\u003C/li>\u003Cli>High CPU utilization and high RAM consumption.\u003C/li>\u003Cli>Support of POST requests and cookies.\u003C/li>\u003Cli>Requiring server-side or in-browser Javascript to \"execute\" a condition.\u003C/li>\u003Cli>Explicit path requirements.\u003C/li>\u003Cli>Requirement that component arguments be passed as url-encoded GET arguments.\u003C/li>\u003Cli>No rollup and&nbsp;resolution&nbsp;of CSS file dependancies\u003C/li>\u003C/ul>\u003Ch2>Description\u003C/h2>\u003Cp>The templating system is designed to fit into HTML5 where a valid XML document can be a valid HTML5 document. &nbsp;It uses a custom namespace that directs the templating engine to replace tags and alter attributes. &nbsp;The system uses convention for default headers and footers. &nbsp;Internally, ObjectCloud uses the System.Xml.XmlDocument for all manipulations, thus taking advantage of a battle-hardened and tested API for document generation.\u003Cbr>\u003C/p>\u003Cp>The following general features are included:\u003C/p>\u003Ch3>XML with Specific Namespace\u003C/h3>\u003Cp>ObjectCloud's templating system is completely XML based. &nbsp;All tags and attributes are part of the \"objectcloud_templating\" namespace. &nbsp;The prefix \"oc\" is&nbsp;recommended. &nbsp;Using HTML5 as a default namespace is also&nbsp;recommended. &nbsp;Thus, a document will have tags like:\u003C/p>\u003Cp>\u003C/p>\u003Cblockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">\u003Cp>\u003C/p>\u003Cpre>&lt;a href=\"...\"&gt;&lt;img src=\"...\" /&gt;&lt;/a&gt;\u003C/pre>\u003Cpre>&lt;oc:component src=\"...\" /&gt;\u003C/pre>\u003Cp>\u003C/p>\u003C/blockquote>\u003Cp>\u003C/p>\u003Ch3>Component Support\u003C/h3>\u003Cp>The &lt;oc:component&gt; tag will use a document named in the src attribute as a component. &nbsp;It will support&nbsp;declaring&nbsp;arguments in XML or pass-through of existing arguments. &nbsp;If src or url is omitted, then either the &lt;oc:component&gt; tag is removed, or if the document is being used as a header/footer for another document, the requested document is substituted in.\u003C/p>\u003Cp>The &lt;oc:snipit&gt; tag is similar, except that it does not resolve GET parameters, only supports src, and expects an incomplete XML document.\u003C/p>\u003Cp>\u003Cspan class=\"Apple-style-span\" style=\"font-size: 18px; font-weight: bold; \">Standard Header/Footer document\u003C/span>\u003Cbr>\u003C/p>\u003Cdiv>By default, all documents are wrapped in a standard header/footer. &nbsp;Documents that have a top-level &lt;html&gt; tag aren't wrapped in the standard header/footer, but can wrap other documents. &nbsp;Documents that have an &lt;oc:componentdef&gt; tag can control which header/footer is used to wrap themselves.\u003C/div>\u003Cmeta charset=\"utf-8\">\u003Ch3 style=\"font-size: 1.1em; font-weight: bold; \">Conditional Tags\u003C/h3>\u003Cp>The &lt;oc:if&gt; tag is used to select a subset of tags to return. &nbsp;Within an &lt;oc:if&gt; tag are additional conditional tags. &nbsp;The first conditional that is met is kept, and all other conditionals are removed.\u003C/p>\u003Ch3 style=\"font-size: 1.1em; font-weight: bold; \">Script&nbsp;Dependency&nbsp;Resolution\u003C/h3>\u003Cp>There are two script tags that may be placed anywhere in a document. &nbsp;During resolution, these will be removed and &lt;script&gt; tags placed into the &lt;head&gt; tag. &nbsp;The generated &lt;script&gt; tags will be in order with duplicate removed.\u003C/p>\u003Cp>&lt;oc:script src=\"...\" /&gt; declares that a document relies on a given script.\u003C/p>\u003Cp>&lt;oc:open filename=\"...\" varname=\"... /&gt; assists in manipulating objects on the server. &nbsp;It will create a global object named varname that can make calls into the object specified in filename.\u003C/p>\u003Cp>There is also a third script tag, &lt;oc:externalscript&gt;, that accomplishes the same goal as having a&nbsp;separate&nbsp;script to work with the component. &nbsp;When using the oc:externalscript tag, the tag is removed from the component and a &lt;script&gt; tag is placed into the &lt;head&gt; tag that loads the script externally. &nbsp;This shrinks the size of the resulting XHTML document and allows the browser to take advantage of caching.\u003C/p>\u003Ch3>CSS&nbsp;Dependency&nbsp;Resolution\u003C/h3>\u003Cp>Documents may place an &lt;oc:css src=\"...\" /&gt; anywhere; although it is&nbsp;recommended&nbsp;that these tags be placed at the top of a document. &nbsp;These will be removed, and a corresponding &lt;link&gt; tag placed in the header. &nbsp;ObjectCloud will prevent duplicates; meaning, many components can all have an &lt;oc:css src=\"/mycss.css\"/&gt; tag, but only one corresponding &lt;link&gt; tag will be generated.\u003Cbr>\u003C/p>\u003Ch3>Header/Footer Manipulation from Components\u003C/h3>\u003Cp>Components can insert items into the &lt;head&gt; tag by wrapping them in an &lt;oc:inserthead loc=\"\u003Ci>some number\u003C/i>\" /&gt;. &nbsp;Negative numbers are placed at the beginning of the head tag, and positive numbers are at the end. &nbsp;Lower numbers come before higher numbers; thus tags within an &lt;oc:loc=\"5\"&gt; will come before&nbsp;&lt;oc:loc=\"500\"&gt;.\u003Cbr>\u003C/p>\u003Cmeta charset=\"utf-8\">\u003Cp>\u003Ci>TODO: &nbsp;&nbsp;&nbsp;Header/footer pages can leave room for these manipulations by placing &lt;oc:placehead loc=\"some number\" /&gt; in the &lt;head&gt; tag. &nbsp;If an &lt;oc:inserthead&gt; uses a loc that isn't specified in the &lt;head&gt; tag, ObjectCloud will attempt to find a reasonable place to put its contents within the &lt;head&gt; tag, with higher numbers placed towards the end of the &lt;head&gt; tag, and lower numbers placed towards the beginning. &nbsp;Negative numbers are placed in the beginning.\u003C/i>\u003C/p>\u003Cmeta charset=\"utf-8\">\u003Cp>Footer manipulation is TBD but will most likely follow a similar pattern.\u003C/p>\u003Ch3>JSON Template Support\u003C/h3>\u003Cp>ObjectCloud supports templating data via JSON. &nbsp;Specifically, there is an &lt;oc:jsontemplate tag that takes two arguments, oc:src and oc:url. &nbsp;The request sent to oc:url must return JSON-encoded data, which is then processed by oc:src as if oc:src was a component. &nbsp;GET arguments must be explicitly passed as arguments.\u003C/p>\u003Ch3>jQuery Template Support\u003Cbr>\u003C/h3>\u003Cp>\u003Cb>Note\u003C/b>: &nbsp;\u003Ci>The actual template syntax is TBD, but it's currently intended to be a popular jQuery templating syntax that can be supported on both the browser and the server.\u003C/i>\u003C/p>\u003Cp>Templates are supported through the &lt;oc:template ...&gt; tag. &nbsp;The contents of the tag will use a templating syntax that is TBD. &nbsp;The oc:template tag either has an oc:url or oc:src attribute. &nbsp;oc:url gives a complete url-encoded url that, without an http://, points to the same server, or with an http://, points to a remote server. &nbsp;oc:src gives a local filename without GET arguments. &nbsp;It is more efficient to use oc:src instead of oc:url. &nbsp;All attributes without a namespace are passed as GET arguments. &nbsp;\u003Ci>By adding an oc:get=\"passthrough\" attribute, current GET arguments are passed through. &nbsp;(Make default to be passthrough?)\u003C/i>\u003C/p>\u003Cp>The request must return either a JSON object, or an array of JSON objects. &nbsp;If an array is returned, then the template is applied to each object in order. &nbsp;If oc:pivot=\"true\" is present, then a single object is turned into an array of objects with two properties: &nbsp;\"name,\" and \"value.\"\u003C/p>\u003Cp>TBD\u003Cbr>\u003C/p>\u003Ch3>GET arguments\u003C/h3>\u003Cp>GET arguments will be replaced prior to parsing XML. &nbsp;They use an [_ argname _] syntax, where argname is the XML-encoded argument name. &nbsp;By default, arguments are XML-encoded so that the user can't&nbsp;interfere&nbsp;with document parsing. &nbsp;This allows use of unicode argument names, argument names with &lt;, and user input with &lt;. &nbsp;At this time there is no way to un-encode user-supplied data.\u003C/p>\u003Cp>\u003Cspan class=\"Apple-style-span\" style=\"font-size: 18px; font-weight: bold; \">Automatic &lt;img&gt;, &lt;script&gt;, and &lt;link&gt; tag manipulation for Caching support\u003C/span>\u003Cbr>\u003C/p>\u003Cp>Just before returning the completed document, ObjectCloud will look at all img, script, and link tags. &nbsp;It will modify all src attributes to use the BrowserCache GET argument, which allows the browser to cache the contents for a long time. &nbsp;This is a very fast way to cache images, scripts, and CSS, because the browser doesn't need to send an HTTP request to find out if the content changed; instead, the server informs the browser of changes by changing the contents of BrowserCache.\u003C/p>\u003Cp>In these situations, ObjectCloud looks at the target URL. &nbsp;If the target URL doesn't have a ? in it, then ObjectCloud bases BrowserCache on the target file's date; but if there is an ?, then ObjectCloud simulates the request and computes an MD5. &nbsp;This can cause a performance overhead, so caching behavior can be controlled with the oc:browsercache attribute. &nbsp;The following values are supported:\u003C/p>\u003Cp>\u003Cul>\u003Cli>\u003Cb>date\u003C/b>: &nbsp;Always use the target's date for BrowserCache.\u003C/li>\u003Cli>\u003Cb>md5\u003C/b>: &nbsp;Always use the target's MD5 for BrowserCache.\u003C/li>\u003Cli>\u003Cb>disable\u003C/b>: &nbsp;Do not use BrowserCache.\u003C/li>\u003C/ul>\u003C/p>\u003Ch3>Content Manipulation\u003C/h3>\u003Cp>The &lt;oc:trim&gt; tag allows for trimming its contents. &nbsp;This is useful for summarizing externally-loaded components. &nbsp;It has two optional parameters: &nbsp;maxlength is the maximum number of text characters, and maxtags is the&nbsp;maximum&nbsp;number of tags allowed within.\u003C/p>\u003Ch3>Plugins\u003C/h3>\u003Cp>Although not designed or implemented now, future versions can allow custom plugins that perform additional document manipulations via custom namespaces, tags, and attributes.\u003C/p>\u003Ch2>Communication\u003C/h2>\u003Cp>Errors and warnings generated by the template system will have a class=\"oc_template_warning\" attribute. &nbsp;This allows for styling and hiding template errors and warnings.\u003Cspan class=\"Apple-tab-span\" style=\"white-space:pre\">\t\u003C/span>\u003C/p>\u003Ch1>Order of Operations\u003C/h1>\u003Cp>TBD, but some thoughts:\u003C/p>\u003Cpre>Replace GET arguments\u003C/pre>\u003Cpre>While the current document doesn't declare that it doesn't use a header/footer\u003C/pre>\u003Cp>\u003C/p>\u003Cblockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">\u003Cp>\u003C/p>\u003Cpre>Either encapsulate it in the standard header/footer or its declared header/footer\u003C/pre>\u003Cp>\u003C/p>\u003C/blockquote>\u003Cp>\u003C/p>\u003Cp>The above loop allows intermediate header/footer pairs. &nbsp;For example, a set of pages might have a set of common elements, and thus these can be condensed into an intermediate header/footer that sill fits within the system header/footer\u003C/p>\u003Cpre>do\u003C/pre>\u003Cp>\u003C/p>\u003Cblockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">\u003Cp>\u003C/p>\u003Cpre>While there are conditional and/or component tags\u003C/pre>\u003Cp>\u003C/p>\u003C/blockquote>\u003Cblockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">\u003Cblockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">\u003Cp>\u003C/p>\u003Cpre>Evaluate all conditional tags and remove unused tags\u003C/pre>\u003Cp>\u003C/p>\u003C/blockquote>\u003Cblockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">\u003Cp>\u003C/p>\u003Cpre>Evaluate all component tags and load components\u003C/pre>\u003Cp>\u003C/p>\u003C/blockquote>\u003C/blockquote>\u003Cblockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">\u003Cp>\u003C/p>\u003Cp>At this point all components are loaded and all conditions evaluated\u003C/p>\u003Cp>\u003C/p>\u003Cp>\u003C/p>\u003Cpre>Collect all script dependancies, css dependancies, and header manipulations and create the appropriate tags in the header\u003C/pre>\u003Cp>\u003C/p>\u003Cp>\u003C/p>\u003Cpre>Evaluate all template tags\u003C/pre>\u003Cp>\u003C/p>\u003C/blockquote>\u003Cp>\u003C/p>\u003Cpre>While there are conditional, component, script dependancies, header/footer manipulations, and/or template tags\u003C/pre>\u003Cpre>Manipulate all &lt;img&gt;, &lt;script&gt;, and &lt;link&gt; tags to use ObjectCloud's caching features.\u003C/pre>\u003Cpre>Resolve &lt;title&gt; tags.  The highest &lt;title&gt; tag is kept, and all other tags are removed.  If no title tag is found, but an &lt;oc:title&gt; tag is present, then remove the oc: namespace from the &lt;oc:title&gt; tag.\u003C/pre>\u003Cpre>Remove all remaining &lt;oc:...&gt; tags.\u003C/pre>\u003Ch1>Integration\u003C/h1>\u003Cp>The /System/TemplateEngine object will perform all template rendering.\u003C/p>\u003Cp>Header/footer files that have complete &lt;html&gt;, &lt;head&gt;, and &lt;body&gt; tags will have the .ochf extension. &nbsp;Components that are intended to be a complete document, except for the html tags, will have a .oc extension. &nbsp;Components that are intended for inclusion in other documents have a .occ extension. &nbsp;For all three extensions, the&nbsp;View action will be \"/System/TemplateEngine?Method=Evaluate&amp;filename=[Target]&amp;[Arguments]\" &nbsp;The Edit action will use Weco, a Javascript-based XHTML editor, or a Javascript-based XML editor.\u003Cbr>\u003C/p>\u003Cp>TemplateEngine will return results with the \"text/xml\" MIME type, unless an error occurs.\u003C/p>\u003Cblockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">\u003Cp>\u003Cb>Note\u003C/b>: &nbsp;\u003Ci>Due to compatibility issues with FireFox, the resulting document is converted to \"html\" prior to returning. &nbsp;This basicly involves removing the &lt;?xml... tag and all namespaces from the &lt;html&gt; tag, and then inserting a &lt;!DOCTYPE html&gt; tag. &nbsp;The \"text/html\" MIME type is used specifically for Mozilla.\u003C/i>\u003C/p>\u003C/blockquote>\u003Cmeta charset=\"utf-8\">\u003Cmeta charset=\"utf-8\">\u003Cp>\u003Cspan class=\"Apple-style-span\" style=\"font-size: 24px; font-weight: bold; \">Detail\u003C/span>\u003Cbr>\u003C/p>\u003Cdiv>\u003Ch2>XML with Specific Namespace\u003Cbr>\u003C/h2>\u003Cp>The resulting generated document that is delivered to the browser is a valid XHTML and HTML \"polygot\" document. &nbsp;The parent header/footer document must be both valid HTML and XHTML with &lt;oc:...&gt; tags, and all components are valid XML documents that use XHTML and &lt;oc:...&gt; tags. &nbsp;The \"polygot\" requirement is to allow ObjectCloud to use high-performance XML libraries. &nbsp;The resulting document is always delivered with the \"text/xml\" MIME type.\u003C/p>\u003Cp>\u003Cspan class=\"Apple-style-span\" style=\"font-size: 20px; font-weight: bold; \">Header/Footer\u003C/span>\u003Cbr>\u003C/p>\u003Cp>A header/footer document is a valid HTML5 and XHTML document that also uses&nbsp;the \"objectcloud_templating\" namespace. &nbsp;An example is:\u003C/p>\u003C/div>\u003Cblockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">\u003Cdiv>\u003Cpre>&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:oc=\"objectcloud_templating\"&gt;\n   &lt;head&gt;\n      &lt;oc:title&gt;Default Title&lt;/oc:title&gt;\n   &lt;/head&gt;\n   &lt;body&gt;\n      &lt;img src=\"Logo\" /&gt;\n      &lt;div&gt;Menu item 1 - Menu item 2 - Menu item 3&lt;/div&gt;\n      &lt;oc:component /&gt;\n   &lt;/body&gt;\n&lt;/html&gt;\u003Cbr>\u003C/pre>\u003C/div>\u003C/blockquote>\u003Cdiv>\u003Cp>Some things worth noting: &nbsp;The &lt;title&gt; tag is missing from &lt;head&gt;, it's assumed that another component will put it there. &nbsp;If no other component inserts a &lt;title&gt; tag, then the &lt;oc:title&gt; tag has its oc: namespace removed and is used as the default title. &nbsp;Also, the &lt;oc:component /&gt; tag will be replaced by the document that this header/footer document applies to.\u003C/p>\u003Ch2>Component Support\u003Cbr>\u003C/h2>\u003Ch3>Component Definitions\u003C/h3>\u003Cp>Component documents start with the &lt;oc:componentdef&gt; tag and contain &lt;oc:...&gt; and html tags. &nbsp; For example:\u003C/p>\u003C/div>\u003Cblockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">\u003Cdiv>\u003Cpre>&lt;oc:componentdef xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:oc=\"objectcloud_templating\"&gt;\n   &lt;p&gt;Paragraph 1&lt;/p&gt;\n   &lt;p&gt;Paragraph 2&lt;/p&gt;\n   &lt;p&gt;Paragraph 3&lt;/p&gt;\n&lt;/oc:componentdef&gt;\u003Cbr>\u003C/pre>\u003C/div>\u003C/blockquote>\u003Cdiv>\u003Cp>\u003Ci>It is possible to override the default header/footer in the &lt;oc:componentdef&gt; tag with the headerfooter attribute. &nbsp;If the specified header/footer is another component, it will then be wrapped by another header/footer. &nbsp;(Probably not implemented in first pass.)\u003C/i>\u003C/p>\u003Cp>GET arguments are supported in component definitions. &nbsp;By default,&nbsp;components&nbsp;get all the same GET arguments as the parent page, although the parent page can add, block, and override all GET arguments. &nbsp;In addition, there is a special GET argument, [_!_], which is&nbsp;guaranteed&nbsp;to be unique within a page. &nbsp;This allows components to have private elements, such as &lt;span id=\"myspan[_!_]\" ...\u003C/p>\u003Ch3>Referencing Components\u003C/h3>\u003Cp>Components are added to a document through the &lt;oc:component&gt; tag. &nbsp;There are two ways to handle &lt;oc:component&gt;\u003C/p>\u003Cp>\u003C/p>\u003Cul>\u003Cli>\u003Cb>Reference another component via oc:src\u003C/b>: &nbsp;Use the src attribute to give the relative or absolute path to another XML document that is a component. &nbsp;When ObjectCloud resolves this kind of component, it verifies READ permission to the file, loads it as XML, and inserts its results into the completed document. &nbsp;Components may refer to other components. &nbsp;In oc:src mode, by default, all GET parameters are passed through to the component, unless&nbsp;oc:getpassthough=\"false\" is included in the tag.\u003C/li>\u003Cli>\u003Cb>Simulate a GET request anywhere via oc:url\u003C/b>: &nbsp;When http:// isn't included, the request is simulated locally, and when http:// is included, the request can go to any HTTP server. &nbsp;The results are placed into the document as-is, although if the MIME type is \"text/xml,\" they will be parsed as XML and inserted as tags. &nbsp;GET parameters aren't passed through. &nbsp;Due to certificate complexities, https:// isn't supported.\u003C/li>\u003C/ul>For both oc:src and oc:url, additional GET arguments can be added by adding additional attributes to the &lt;oc:component&gt; tag. &nbsp;Specifically, attributes without a namespace are passed through as GET arguments to the sub component. &nbsp;It's possible to explicitly pass GET arguments in a manner like myparam=\"[_myparam_]\".\u003Cp>\u003C/p>\u003Cp>If the &lt;oc:component&gt; tag has contents, by default, they will be omitted in the resulting document. &nbsp;In the event of a permission denied error for an &lt;oc:component&gt; tag with contents and the oc:src attribute, the templating engine will change the &lt;oc:component&gt; tag to a div. &nbsp;This is a lightweight way to handle permissions issues. &nbsp;When using oc:url, the results are always passed through, even if it's not a 2xx class result.\u003Cbr>\u003C/p>\u003Cp>\u003Cspan class=\"Apple-style-span\" style=\"font-size: 20px; font-weight: bold; \">Standard Header/Footer document\u003C/span>\u003Cbr>\u003C/p>\u003Cp>The default header and footer will be \"/DefaultTemplate/headerfooter.ochf\" &nbsp;By convention, default template images and CSS will go into \"/DefaultTemplate.\" &nbsp;This is to allow 3rd party default templates.\u003C/p>\u003Ch2>Conditional Tags\u003Cbr>\u003C/h2>\u003Cp>The &lt;oc:if&gt; tag allows a designer to conditionally include html in the displayed document. &nbsp;It can only contain known conditional tags (written below.) &nbsp;Each tag is evaluated in order, and the first tag where the condition is met is displayed. &nbsp;Only one tag within an &lt;oc:if&gt; is displayed, all others are discarded.\u003C/p>\u003Ch2>Available Tags\u003C/h2>\u003Ch3>Permissions\u003C/h3>\u003Cp>All permission tags have a filename attribute. &nbsp;This is the file that permissions is checked on.\u003Cbr>\u003C/p>\u003Ch4 style=\"font-size: 1em; font-weight: bold; \">oc:canread\u003C/h4>\u003Cp>True if the user can read the specified file.\u003C/p>\u003Ch4 style=\"font-size: 1em; font-weight: bold; \">oc:canwrite\u003C/h4>\u003Cp>True if the user can write to the specified file.\u003C/p>\u003Ch4 style=\"font-size: 1em; font-weight: bold; \">oc:canadminister\u003C/h4>\u003Cp>True if the user can administer the specified file.\u003C/p>\u003Cp>\u003C/p>\u003Ch4 style=\"font-size: 1em; font-weight: bold; \">oc:can\u003C/h4>\u003Cp>In addition to filename, has an attribute called namedpermission. &nbsp;True if the user has the specified named permission to the file or is an administrator.\u003C/p>\u003Cp>\u003C/p>\u003Ch4>\u003Cspan class=\"Apple-style-span\" style=\"font-size: 18px; \">User State\u003C/span>\u003Cbr>\u003C/h4>\u003Cp>The user state tags depend on who is logged in.\u003C/p>\u003Ch4 style=\"font-size: 1em; font-weight: bold; \">oc:isadministrator\u003C/h4>\u003Cp>True if the user is an administrator.\u003C/p>\u003Ch4 style=\"font-size: 1em; font-weight: bold; \">oc:islocal\u003C/h4>\u003Cp>True if the user is a local user, as opposed to OpenID.\u003C/p>\u003Ch4 style=\"font-size: 1em; font-weight: bold; \">oc:isloggedin\u003C/h4>\u003Cp>True if the user is logged in, as opposed to an anonymous user.\u003C/p>\u003Ch4 style=\"font-size: 1em; font-weight: bold; \">oc:isopenid\u003C/h4>\u003Cp>True if the user is logged in through OpenID.\u003C/p>\u003Ch4 style=\"font-size: 1em; font-weight: bold; \">\u003Cspan class=\"Apple-style-span\" style=\"font-size: 18px; \">Control\u003C/span>\u003Cbr>\u003C/h4>\u003Ch4>oc:else\u003C/h4>\u003Cp>The &lt;oc:else&gt; tag always evaluates to true, thus leaving it as the last tag within an &lt;oc:if&gt; ensures that at least one condition will be displayed.\u003C/p>\u003Ch2>Plugging in new tags\u003C/h2>\u003Cp>Adding a new conditional tag is implemented with the following steps:\u003C/p>\u003Cp>\u003C/p>\u003Col>\u003Cli>Create a class that implements ObjectCloud.Interfaces.WebServer.ITemplateConditionHandler. &nbsp;The IsConditionMet method returns true if the condition is met and thus the tag contents should be displayed.\u003C/li>\u003Cli>Register the handler and tag name in the TemplateConditions.xml file. &nbsp;This file is a Spring.Net&nbsp;dependency&nbsp;injection file.\u003C/li>\u003C/ol>\u003Cp>\u003C/p>\u003Ch2 style=\"font-size: 1.25em; font-weight: bold; \">Script&nbsp;Dependency&nbsp;Resolution\u003Cbr>\u003C/h2>\u003Ch2 style=\"font-size: 1.25em; font-weight: bold; \">CSS Dependency&nbsp;Resolution\u003Cbr>\u003C/h2>\u003Ch2>Header/Footer Manipulation from Components\u003Cbr>\u003C/h2>\u003Ch2>jQuery Template Support\u003Cbr>\u003C/h2>\u003Cdiv>TODO: &nbsp;Recursion through oc:action tag.\u003C/div>\u003Ch2>Automatic &lt;img&gt;, &lt;script&gt;, and &lt;link&gt; tag manipulation for Caching support\u003Cbr>\u003C/h2>\u003Cp>TODO: &nbsp;A cool feature would be to pre-calculate image width and height to give pages a better perception of loading fast.\u003C/p>\u003Ch2>Plugins\u003Cbr>\u003C/h2>\u003C/div>\u003Ch2>Accessing Components as a page\u003C/h2>\u003Cp>By default, if the user types a component's URL into the browser's address bar, ObjectCloud will attempt to render the component inside of the default header/footer. &nbsp;In some situations, such as when integrating into a desktop application or mobile application, it may be desirable to get just the component's XML / HTML without a header or footer. &nbsp;The header/footer can be controlled by appending the HeaderFooterOverride GET parameter.\u003C/p>\u003Cp>The following values are allowed for HeaderFooterOverride:\u003C/p>\u003Cp>\u003C/p>\u003Cul>\u003Cli>\u003Cb>Minimal\u003C/b>: &nbsp;ObjectCloud creates a minimialistic header/footer so, if the returned content is displayed in a web browser or web browser component, the user just sees the component and nothing else.\u003C/li>\u003Cli>\u003Cb>None\u003C/b>: &nbsp;ObjectCloud does not enclose the component in any header/footer. &nbsp;This can have unpredictable results when rendered as HTML because scripts and css might not be loaded; although it does allow a consuming client manipulate the results in unanticipated ways.\u003C/li>\u003Cli>\u003Cb>/\u003C/b>: &nbsp;Any values that start with a \"/\" indicate an file to use as the header/footer. &nbsp;This allows&nbsp;overriding&nbsp;the header/footer through the URL.\u003C/li>\u003C/ul>\u003Cp>\u003C/p>\u003Ch1>Other ObjectCloud changes\u003C/h1>\u003Ch2>BrowserCache calculation\u003Cbr>\u003C/h2>\u003Cp>Currently, ObjectCloud calculates many MD5s to append to urls as a BrowserCache argument. &nbsp;Now, the lower-level IFileHandler will have an MD5 property that the templating system can take advantage of when possible.\u003C/p>\u003Ch2>Loading XmlDocuments in ITextHandlers\u003C/h2>\u003Cp>ITextHandlers may expose a lazily-initialized XmlDocument property which is a pre-cached XmlDocument loaded by evaluating the contents of the text file. &nbsp;This should be automatically \"cleared\" if the text file is overwritten, and re-lazily-initialized upon re-access.\u003C/p>\u003Cp>\u003C/p>"}