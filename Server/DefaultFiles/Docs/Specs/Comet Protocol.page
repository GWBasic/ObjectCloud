{"Title":"Comet Protocol","Contents":"\u003Cp>There are many approaches to building scalable systems to allow a web server to push data into the browser. &nbsp;These are collectively referred to as Comet, and often rely on long-polling; a technique where a server delays returning a result's request until data is available. &nbsp;While systems like Java Applets and Flash allow for arbitrary sockets back to the web server; these don't work well in situations where a strict firewall limits restrict outgoing sockets. &nbsp;Long-polling does not guarantee accuracy or order of data, nor can it scale when there are multiple entities on the server side sending data to the client.\u003C/p>\u003Cp>The Comet Protocol is a layered approach modeled after traditional networking that attempts to address the needs of two-way communication between the browser and the server.&nbsp; Its layers allow an application implementer to choose the appropriate networking model for an application.&nbsp; The Comet Protocol offers optional reliability and ordering.&nbsp; Multiplexing is optional but recommended.&nbsp; A single URL in a long-polling loop is used at the lowest level for simplicity in implementation.&nbsp; Independent implementations can provide proprietary enhancements at lower levels that work around fundamental limitations in HTTP long polling.\u003Cbr>\u003C/p>The Comet Protocol exposes packets instead of streams to the application layer.&nbsp; This is because it's easier to compose streams from ordered packets, but harder to break a stream into packets.&nbsp; All data is transmitted in a single JSON object.&nbsp; This makes The Comet Protocol a natural fit for RPC-style communication, which tends to be more popular then writing networking applications that handle raw sockets.&nbsp; It is possible to emulate TCP sockets and UDP datagrams through The Comet Protocol, although such functionality isn't built into the protocol.\u003Cbr>\u003Cp>The three layers of the Comet Protocol are:\u003C/p>\u003Col>\u003Cli>\u003Cspan style=\"font-weight: bold;\">Transport\u003C/span>:&nbsp; A thin and standardized real-time message loop that utilizes long-polling.\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">Multiplexing\u003C/span>:&nbsp; Emulates multiple transports over a single transport thus allowing multiple server-side data sources to be used through a single transport.&nbsp; This allows for multiple server-side data sources while conserving the browser's sockets.&nbsp; Similar to UDP, except that it utilizes a request-to-send, get-data-to-send API.\u003Cbr>\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">Queuing and Reliable\u003C/span>:&nbsp; Allows multiple messages to be sent in an ordered and reliable manner without dealing with the semantics of the real-time message loop.&nbsp; Similar to TCP, except that it's packet based instead of stream based.\u003C/li>\u003C/ol>\u003Ch1>Requirements\u003C/h1>\u003Cp>The Comet Protocol was designed to fulfill the following requirements:\u003C/p>\u003Col>\u003Cli>\u003Cspan style=\"font-weight: bold;\">Simple Layers\u003C/span>:&nbsp; A small group of simple layers allows an application developer to choose the most appropriate API given the application's needs; and it allows a server and framework developer to optimize a particular layer while still keeping compatible with existing applications.\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">Separation of protocol and diagnostics\u003C/span>:&nbsp; In order to keep implementations simple; diagnostics are Comet Protocol endpoints instead of being built directly into the protocol itself.&nbsp; This is similar to the well-known applications \"ping\" and \"tracert.\"\u003Cbr>\u003Cspan style=\"font-weight: bold;\">\u003C/span>\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">Simple Server-side Requirements\u003C/span>:&nbsp; A firm requirement is that all protocols at all layers minimize variables, endpoint proliferation, and fringe use cases.\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">Two-way communication\u003C/span>:&nbsp; The protocol must allow for two-way communication as if there is a TCP-style socket connected.\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">Multiplexing\u003C/span>:&nbsp; The protocol must allow for multiple unrelated data sources on the server as a means of conserving the browser's open sockets.\u003Cbr>\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">Discrete Packets\u003C/span>:&nbsp; The protocol must send discrete packets instead of a wire-style byte stream.&nbsp; This is for the following reasons:\u003C/li>\u003Cul>\u003Cli>It is easier to write applications that get a stream of packets, and thus objects, instead of a raw byte stream.\u003C/li>\u003Cli>The lowest-level HTTP transport is optimized for packets instead of streams.\u003C/li>\u003Cli>Streaming bytes can cause poor performance unless the bytes are logically arranged into packets.\u003C/li>\u003Cli>Converting ordered and reliable packets to a \u003Ca target=\"_blank\" title=\"\" href=\"http://orbited.org/blog/files/csp.html\">Comet Session Protocol\u003C/a>-style stream is trivial.\u003C/li>\u003Cli>\u003Ca target=\"_blank\" title=\"\" href=\"http://svn.cometd.com/trunk/bayeux/bayeux.html\">Bayeux\u003C/a>-style event subscription is trivial when receiving packets.\u003Cbr>\u003C/li>\u003C/ul>\u003C/ol>\u003Ch1>Weaknesses\u003C/h1>\u003Cp>Due to long polling, the Comet Protocol is sensitive to high-latency environments.&nbsp; Specifically, in a high latency environment, the server may only be able to transmit approximately 4 batches of events per second.&nbsp; On slow connections, the server may only be able to push a batch of events every second or every other second.&nbsp; Application designers must decide if this restriction fits into their design requirements.&nbsp; Future versions of the specification may attempt to address this issue.\u003Cbr>\u003C/p>\u003Ch1>Influences\u003Cbr>\u003C/h1>\u003Cp>There are two strong influences in the Comet Protocol's design:\u003Cbr>\u003C/p>\u003Cul>\u003Cli>\u003Ca target=\"_blank\" title=\"\" href=\"http://orbited.org/blog/files/csp.html\">\u003Cspan style=\"font-weight: bold;\">Comet Session Protocol\u003C/span>\u003C/a>:&nbsp; The Comet Session Protocol defines a technique for reliably emulating a TCP socket through HTTP.&nbsp; It is designed for a variety of server-to-browser transmission techniques, including polling, long polling, forever connections, and iFrame streaming.&nbsp; It does not define multiplexing; although there are multiplexed implementations built on top of it.&nbsp; An advantage of Comet Session Protocol is that it guarantees data delivery and order.\u003Cbr>\u003C/li>\u003Cli>\u003Ca target=\"_blank\" title=\"\" href=\"http://svn.cometd.com/trunk/bayeux/bayeux.html\">\u003Cspan style=\"font-weight: bold;\">Bayeux\u003C/span>\u003C/a>:&nbsp; Bayeux introduces an event subscription model.&nbsp; An advantage of its subscription model is that it allows a client to subscribe to many event sources on the server without worrying about the semantics of multiplexing.\u003C/li>\u003C/ul>\u003Ch1>Overview\u003C/h1>\u003Cp>The Comet Protocol incorporates three layers.&nbsp; These layers progressively introduce complexity in an isolated manner that allows for simplified development at each layer, and that allows an application developer to choose the appropriate approach based on the application's needs.\u003C/p>\u003Cp>There is also an implied 0th layer.&nbsp; This is the session layer.&nbsp; It is implied that a server implementing The Comet Protocol will have a technique for establishing a session with the browser, and that such a session is pre-established prior to entering any of the layers defined here.&nbsp; A popular approach is with some form of a session cookie.\u003C/p>\u003Cp>All layers are exposed in the browser as a Javascript API.&nbsp; The server is expected to place compatible Javascript in a well-known location, although it may expose these layers using whatever semantics are appropriate for its server-side environment.&nbsp; The server may also implement proprietary enhanced versions of lower-level protocols while still remaining compatible with higher-level protocols.\u003Cbr>\u003C/p>\u003Cp>The layers in the Comet Protocol Are as follows:\u003Cbr>\u003C/p>\u003Col>\u003Cli>\u003Cspan style=\"font-weight: bold;\">Transport\u003C/span>:&nbsp; The transport layer is a thin wrapper for traditional AJAX polling and long polling.&nbsp; It is event-driven, does not guarantee reliability, and does not queue.&nbsp; The client (browser) tunes long-polling based on aborted HTTP requests, and the server tracks outstanding long-polled requests.&nbsp; It is recommended that there is only a single transport polling loop running per tab or window; in most cases, it is more appropriate to use the multiplexing layer.&nbsp; The API is a request-to-send -&gt; ready-to-send model.\u003Cbr>\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">Multiplexing\u003C/span>:&nbsp; The multiplexing layer allows for the Comet Protocol to work with multiple data sources.&nbsp; In the browser, it exposes the same API as the Transport layer; therefore, Javascript written against the transport layer should also work against the multiplexing layer.&nbsp; In most cases, this is the lowest layer exposed to the browser.&nbsp; The multiplexing layer is best suited for applications that send live, rapidly-changing, and lossy data.&nbsp; This is because both the multiplexing and transport layers expose when they are sending data through the wire; thus allowing an application to transmit the most up-to-date version of data.&nbsp; This protocol is closest to UDP in that it is unreliable and closest to real-time.\u003Cbr>\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">Queuing and Reliable\u003C/span>:&nbsp; The queuing and reliable layer lets the client or server send packets without handling the event loops of the transport or multiplexing layer.&nbsp; Packets are guaranteed to be sent to the recipient, and are sent in order.&nbsp; It is most similar to TCP, except that it uses packets and does not require the recipient to re-construct any framing.\u003Cbr>\u003C/li>\u003C/ol>\u003Ch1>Recommended Script Locations, Endpoints, and Conventions\u003Cbr>\u003C/h1>\u003Cp>In order to guarantee portability among servers implementing The Comet Protocol, the following recommendations exist:\u003C/p>\u003Ch2>Javascript Locations:\u003C/h2>\u003Cp>All Javascript needed to access layer 2 (multiplexing) and 3 (queuing and reliable) should be located at:\u003C/p>\u003Cpre style=\"margin-left: 40px;\">/API/Comet/CometProtocol.js\u003Cbr>\u003C/pre>\u003Cp>In addition, All Javascript needed to access layer 1 (transport) should be located at:\u003C/p>\u003Cpre style=\"margin-left: 40px;\">/API/Comet/CometTransport.js\u003Cbr>\u003C/pre>\u003Cp>The reason for this separation is to allow servers to implement custom performance improvements on the base transport layer, yet still keep a compatible, well-known, and established Comet Protocol stack.&nbsp; For example, a server could implement a custom version of CometTransport.js that attempts to use Flash's XmlSocket.&nbsp; This would greatly improve performance without needing to re-write layers 2 and 3.\u003Cbr>\u003C/p>\u003Cp>It is recommended that the server use HTTP headers to instruct the\nbrowser to cache these Javascript files for a very long time.&nbsp; Dynamic loading\nof dependencies is discouraged due to performance implications.&nbsp; The server may optionally minimize the Javascript.\u003C/p>\u003Ch2>Endpoints and Conventions\u003C/h2>\u003Cp>It is recommended that the default multiplexer URL is at the following path:\u003C/p>\u003Cpre style=\"margin-left: 40px;\">/System/Comet/Multiplexer\u003Cbr>\u003C/pre>\u003Cp>On the server, the Multiplexer should emulate the APIs that the transport layer uses.&nbsp; Thus, when a URL receives a connection on the server, it doesn't know if the connection is coming from a raw transport layer or a multiplexed transport layer.&nbsp; Likewise, in the browser, the Multiplexer should use the same paths that are in URLs.\u003C/p>\u003Cp>It is recommended that a default loopback is at the following path:\u003C/p>\n\u003Cpre style=\"margin-left: 40px;\">/System/Comet/Loopback\u003Cbr>\u003C/pre>\n\u003Cp>The loopback transport sends a packet of information every 10\nseconds, starting as soon as a connection is made.&nbsp; This information is\na JSON object with two values:\u003C/p>\u003Cul>\u003Cli>\u003Cspan style=\"font-weight: bold;\">ts\u003C/span>:&nbsp; The local time at the server as a human-readable string.\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">d\u003C/span>:&nbsp; The most recent data that the client sent.\u003Cbr>\u003C/li>\u003C/ul>\u003Cp>It is recommended that a default echo is at the following path:\u003C/p>\n\u003Cpre style=\"margin-left: 40px;\">/System/Comet/Echo\u003Cbr>\u003C/pre>\n\u003Cp>The echo transport returns the same packet that is sent, as soon as the packet is received.&nbsp; It is useful for timing latency between the client and server.\u003C/p>\u003Cspan style=\"font-weight: bold;\">\u003C/span>\u003Ch1>Layer Implementations\u003Cbr>\u003C/h1>\u003Cp>This section describes how all layers are implemented, and the Javascript APIs exposed to the browser.\u003C/p>\u003Ch2>Layer 0:&nbsp; Session\u003C/h2>\u003Cp>The session layer is implied.&nbsp; Specifically, the server must automatically establish a session between the browser and itself.&nbsp; Session management is not part of the Comet Protocol, although a recommended approach is to use Cookies.\u003Cbr>\u003C/p>\u003Ch2>Layer 1:&nbsp; Transport\u003C/h2>\u003Cp>The transport layer is the only layer that deals directly with HTTP and AJAX.&nbsp; It establishes a long-polling loop between a browser's tab/window and the server.&nbsp; The time line of the transport layer is as follows:\u003C/p>\u003Cp style=\"margin-left: 40px;\">Client-side Javascript:\u003C/p>\u003Cpre style=\"margin-left: 80px;\">var transport = CP_Transport.create(\u003Cbr>   \"http://myserver:123/the/path/on/server\",\u003Cbr>   {\u003Cbr>      getDataToSend: function(sendId) { },\u003Cbr>      handleIncomingData: function(incoming) { },\u003Cbr>      handleError: function(error) { },\u003Cbr>      flashSuccess: function(transport, sendId) { },\u003Cbr>      flashError: function(transport, sendId) { }\u003Cbr>   });\u003Cbr>\u003C/pre>\u003Cp style=\"margin-left: 120px;\">The create function performs two tasks; generate a transport ID and return an object with additional functions needed to send data.&nbsp; The transport ID must be a positive integer and unique among all windows and tabs sharing the same session on the server.&nbsp; There is no need to worry about collisions from other sessions because the server automatically establishes a session and separates transports by their session.&nbsp; Random numbers are recommended, but not required.\u003Cbr>\u003C/p>\u003Cp style=\"margin-left: 120px;\">The Create function does not open any AJAX requests to the server.\u003C/p>\u003Cp style=\"margin-left: 0px;\">\u003C/p>\u003Cpre style=\"margin-left: 80px;\">transport.startSend(100);\u003Cbr>\u003C/pre>\u003Cp style=\"margin-left: 120px;\">The startSend function starts the process of sending data from the client to the server.&nbsp; Its only argument is how long to wait before sending data, specified in milliseconds.&nbsp; Multiple calls can be made to startSend with shorter delays, and the shortest delay will be used.&nbsp; StartSend with a delay of 0 will result in an immediate send.\u003C/p>\u003Cp style=\"margin-left: 160px;\">\u003Cspan style=\"font-weight: bold;\">Note\u003C/span>:&nbsp; \u003Cspan style=\"font-style: italic;\">A delay of 0 is not recommended in multiplexed situations.&nbsp; In addition, short delays on busy transports can introduce performance bottlenecks due to HTTP overhead.&nbsp; In keeping with the spirit of \u003Ca target=\"_blank\" title=\"\" href=\"http://en.wikipedia.org/wiki/Nagle_algorithm\">Nagle's Algorithm\u003C/a>, the default delay is 200 milliseconds.\u003C/span>\u003Cbr>\u003C/p>\u003Cpre style=\"margin-left: 80px;\">getDataToSend(sendId)\u003Cbr>\u003C/pre>\u003Cp style=\"margin-left: 120px;\">After startSend's delay, the transport calls the getDataToSend function.&nbsp; It can return any Javascript data\ntype, including strings, numbers, booleans, objects, arrays, and null.&nbsp;\nNull is recommended if there is no data to send.\u003C/p>\u003Cp style=\"margin-left: 160px;\">\u003Cspan style=\"font-weight: bold;\">Note\u003C/span>:&nbsp; \u003Cspan style=\"font-style: italic;\">getDataToSend can be called even if you haven't called startSend.&nbsp; This will happen when the server returns data.\u003C/span>\u003Cbr>\u003C/p>\u003Cp style=\"margin-left: 120px;\">The transport then sends a POST request to the url passed in to the create function.&nbsp; Minimal headers should be used, as all communication is through the POST body.&nbsp; The POST body is a single JSON-encoded object with the following values:\u003C/p>\u003Cul>\u003Cul>\u003Cul>\u003Cul>\u003Cli>\u003Cspan style=\"font-weight: bold;\">tid\u003C/span>:&nbsp; The transport ID, any integer number.\u003Cbr>\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">isNew\u003C/span>:&nbsp; Only present during the first POST request for a given transport ID, always set to true.\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">lp\u003C/span>:&nbsp; The length of time to long-poll, in milliseconds.&nbsp; For the first POST request, this should be no more then 3 seconds.\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">d\u003C/span>:&nbsp; The data from the call to getDataToSend.&nbsp; This is not re-encoded, re-JSONed, ect.&nbsp; This is absent if getDataToSend returned null.\u003Cbr>\u003C/li>\u003C/ul>\u003C/ul>\u003C/ul>\u003C/ul>\u003Cp style=\"margin-left: 120px;\">The sendId is an integer identifier that is unique for the connection.&nbsp; The client-side Javascript can use the sendId to determine if data was sent correctly or not.\u003Cbr>\u003C/p>\u003Cp style=\"margin-left: 40px;\">Server-Side POST handler:\u003C/p>\u003Cp style=\"margin-left: 80px;\">On the server side, the JSON-encoded POST body is decoded.\u003C/p>\u003Cdiv style=\"margin-left: 80px;\">If \"isNew\" is present, and the session already has an ongoing transport with the same transport ID, an HTTP 409 (Conflict) is returned.&nbsp; If \"isNew\" is present with a new transport ID, the server internally creates a transport for the given session with a transport ID.&nbsp; When establishing a transport on the server-side, whatever server-side module that obtains the transport must:\u003C/div>\u003Cul>\u003Cul>\u003Cul>\u003Cli>get a transport object that has the equivalent of a \"startSend\" function.\u003C/li>\u003Cli>provide getDataToSend() and handleIncomingData() equivalent callbacks.\u003Cbr>\u003C/li>\u003C/ul>\u003C/ul>\u003C/ul>\u003Cp style=\"margin-left: 80px;\">If \"new\" is not present, and the session doesn't have an ongoing transport with the same transport ID, an HTTP 410 (Gone) is returned.\u003C/p>\u003Cp style=\"margin-left: 80px;\">Bad requests and any error condition not anticipated in the specification result in a 400 (Bad Request) error.\u003C/p>\u003Cp style=\"margin-left: 80px;\">If \"d\" is present, its contents are passed to the server-side handleIncomingData equivalent callback.\u003Cbr>\u003C/p>\u003Cp style=\"margin-left: 80px;\">The server then holds on to the open HTTP request until one of the following conditions is met:\u003C/p>\u003Cul>\u003Cul>\u003Cul>\u003Cli>The long-poll timespan specified in \"lp\" expires\u003C/li>\u003Cli>The server-side version of \"startSend\" is called\u003C/li>\u003Cli>Another incoming request for the same session and transport ID comes in.\u003Cbr>\u003C/li>\u003C/ul>\u003C/ul>\u003C/ul>\u003Cp style=\"margin-left: 80px;\">When its ready to end the long-poll, it calls the server-side getDataToSend.&nbsp; If there is data to return, then the content portion of the HTTP response is the JSON-encoded results of getDataToSend.&nbsp; No data (Content-length 0) is used to communicate that there was no data to return.&nbsp; The HTTP status code is 200 (OK)\u003C/p>\u003Cp style=\"margin-left: 120px;\">\u003Cspan style=\"font-weight: bold;\">Note\u003C/span>:&nbsp; \u003Cspan style=\"font-style: italic;\">The server must guarantee that there is no malicious Javascript in the JSON it returns.\u003C/span>\u003Cbr>\u003C/p>\u003Cp style=\"margin-left: 40px;\">Client-side Javascript:\u003C/p>\u003Cp style=\"margin-left: 80px;\">If an HTTP 409 (Conflict) is returned, the client generates a new transport ID and behaves as if startSend(0) is called.\u003C/p>\u003Cp style=\"margin-left: 80px;\">If an HTTP 410 (Gone) is returned, or any other 4xx or 5xx is returned, the client calls the handleError callback.&nbsp; At this point, all calls to startSend should generate an exception.\u003Cbr>\u003C/p>\u003Cp style=\"margin-left: 80px;\">If the server returned an HTTP 200 (OK), flashSuccess is called.&nbsp; If data was transmitted from the server, it will be evaled and passed to the handleIncomingData callback.&nbsp; If there are no open requests requests from the client to the server, the client will then call startSend with a 0-millisecond delay.\u003C/p>\u003Cp style=\"margin-left: 80px;\">If there is any other status code, or a transport error, then the long polling value is set back to 1 second, flashError is called, and the transport behaves as if startSend(2500) is called.\u003Cbr>\u003C/p>\u003Cp>The client and server must always call their startSend functions whenever data is ready to send; and they must anticipate that their getDataToSend functions will be called when there isn't data to send.&nbsp; Likewise, they must anticipate that startSend could be called multiple times before getDataToSend is called.\u003Cbr>\u003C/p>\u003Cp>The Transport layer does not have an explicit way to close.&nbsp; This is because it is anticipated to be on-going while a window or tab is open, and stopped without an opportunity to gracefully shut down.&nbsp; The server should discard transports that are idle (no incoming HTTP requests) for more then five minutes.\u003C/p>\u003Cp>The flashSuccess and flashError functions allow an application to be aware of the transport's status.&nbsp; Both functions are passed the AJAX status callback object and the sendId used for the original getDataToSend request.&nbsp; The flash callbacks allow feedback on the success or failure of sending data, and a visible communication that a connection is valid or that there is a temporary disconnection.&nbsp; In the event of flashError being called and the recipient desires a sooner re-try, call startSend and re-return the data from getDataToSend.\u003C/p>\u003Cp>There is no limit to the amount of requests that the client can open to the server; although the server must only keep a single long poll open.&nbsp; Future versions of the specification may allow the server to hold multiple long polls open.\u003Cbr>\u003C/p>\u003Ch2>\u003Cspan style=\"font-weight: bold;\">\u003C/span>Layer 2:&nbsp; Multiplexing\u003C/h2>\u003Cp>Multiplexing sits directly on top of the transport layer and allows multiple services to use the transport without hitting browser limits with regard to open HTTP connections while long-polling.\u003C/p>\u003Cp>The multiplexer works strictly through the data sent over the Transport layer.&nbsp; It always sends and receives JSON-encoded objects.\u003C/p>\u003Cp>Unlike when establishing a transport, full URLs can not be used.&nbsp; Only paths can be used.&nbsp; Some server implementations may only expose certain services at the multiplexing level, although server implementations should allow services that are exposed at the transport level to also work at the multiplexing level.\u003Cbr>\u003C/p>\u003Cp>Data sent from the client looks like the following:\u003C/p>\u003Cdiv style=\"margin-left: 40px;\">\u003Cpre>\"d\" : {\u003Cbr>   \"m\": [ // array of control commands ],\u003Cbr>  &nbsp;\"0\": // Data sent that's multiplexed on channel 0,\u003Cbr>  &nbsp;\"1\": // Data sent that's multiplexed on channel 1,\u003Cbr>  &nbsp;\"2\": // Data sent that's multiplexed on channel 2\u003Cbr>}\u003C/pre>\u003C/div>\u003Cp>If a channel is not present, it means that the channel does not have data for this part of the loop.\u003Cbr>\u003C/p>\u003Cp>Data returned from the server looks like the following:\u003C/p>\n\u003Cdiv style=\"margin-left: 40px;\">\n\u003Cpre>{\u003Cbr>   \"m\": [ // array of control commands ],\u003Cbr>  &nbsp;\"0\": // Data sent that's multiplexed on channel 0,\u003Cbr>  &nbsp;\"1\": // Data sent that's multiplexed on channel 1,\u003Cbr>  &nbsp;\"2\": // Data sent that's multiplexed on channel 2\u003Cbr>}\u003C/pre>\n\u003C/div>\n\u003Cp>If a channel is not present, it means that the channel does not have data for this part of the loop.\u003Cbr>\n\u003C/p>\n\u003Cp>A client establishes a sub-transport through the multiplexed transport by including the URLs of the endpoints in the \"m\" part of its array.&nbsp; It must also include a transport ID for each multiplexed comet session; this is to allow multiple communication streams to the same endpoint.&nbsp; The transportID must be unique for the multiplexed transport.&nbsp; The \"m\" portion is only present if there is control information.&nbsp; Data for each transport can be sent, but due to the unreliable nature of both the transport and multiplexed layers, it may be lost:\u003C/p>\u003Cdiv style=\"margin-left: 40px;\">\n\u003Cpre>\"d\": {\u003Cbr>   \"m\": \u003Cbr>   [\u003Cbr>      { \"u\": \"/chatrooms/c1\", \"tid\": 123 },\u003Cbr>      { \"u\": \"/friendwatchers/myfriends\", \"tid\": 456 },\u003Cbr>     &nbsp;{ \"u\": \"/tickers/stock\", \"tid\": 789 },\u003Cbr>&nbsp;     { \"u\": \"/doesnotexist\", \"tid\": 275 }\u003Cbr>  &nbsp;]\u003Cbr>   \"456\": \"data...\",\u003Cbr>   \"275\": \"data...\"\u003Cbr>}\u003C/pre>\n\u003C/div>\n\u003Cp>The server responds with a JSON object that contains acks and errors in the \"m\" part of its object, and data.&nbsp; Each multiplexed channel's data is identified as a property named after the channel's tid.&nbsp; The \"m\" part of the object contains an array at element a that is all acked tids.&nbsp; The \"m\" part also contains error codes indexed as the tid.&nbsp; The \"m\" portion is only present if there is control information.\u003Cbr>\u003C/p>{\u003Cbr>\u003Cdiv style=\"margin-left: 40px;\">\u003Cpre>   \"m\": \u003Cbr>   {\u003Cbr>      \"a\": [123,456,789],\u003Cbr>      \"257\": 404\u003Cbr>  &nbsp;},\u003Cbr>  &nbsp;\"123\": \"data..\",\u003Cbr>  &nbsp;\"456\": \"data...\",\u003Cbr>  &nbsp;\"789\": \"data...\"\u003Cbr>}\u003C/pre>\n\u003C/div>\n\n\u003Cp>Due to the unreliable nature of the transport, the client should continue to initiate connections in the \"m\" array until it gets a response that assigns it a channel; likewise, the server should continue to use the same ID for a url in case a response is lost.&nbsp; Channels live as long as the transport lives, so there is no way to destroy a channel.\u003Cbr>\u003C/p>\u003Cdiv style=\"margin-left: 40px;\">\u003Cp>Client-side Javascript:\u003C/p>\u003Cp>When establishing a transport that runs through a common multiplexer for a tab or window, call:\u003Cbr>\u003C/p>\u003C/div>\u003Cpre style=\"margin-left: 80px;\">var transport = CP_Mulitplex.create(\u003Cbr>   \"/the/path/on/server\",\u003Cbr>   {\u003Cbr>      getDataToSend: function(sendId) { },\u003Cbr>      handleIncomingData: function(incoming) { },\u003Cbr>      handleError: function(error) { },\u003Cbr>      flashSuccess: function(transport, sendId) { },\u003Cbr>      flashError: function(transport, sendId) { }\u003Cbr>   });\u003C/pre>\u003Cp style=\"margin-left: 80px;\">The create function will either use an existing multiplexer or create one using the following Javascript:\u003Cbr>\u003C/p>\u003Cpre style=\"margin-left: 80px;\">var multiplexerTransport = CP_Transport.create(\u003Cbr>   \"/System/Comet/Multiplexer\",\u003Cbr>   {\u003Cbr>      getDataToSend: function() { },\u003Cbr>      handleIncomingData: function(var incoming) { },\u003Cbr>      handleError: function(var error) { }\u003Cbr>   });\u003C/pre>\n\u003Cpre style=\"margin-left: 80px;\">var defaultMultiplexer = CP_Multiplex.createFromTransport(muliplexerTransport);\u003Cbr>\u003C/pre>\u003Cp style=\"margin-left: 120px;\">\u003Cspan style=\"font-weight: bold;\">Note\u003C/span>:&nbsp; \u003Cspan style=\"font-style: italic;\">Both the create and createFromTransport functions must be available to client-side Javascript, although it is recommended that the create function is used instead of directly creating a multiplexer.\u003C/span>\u003Cbr>\u003C/p>\u003Cp style=\"margin-left: 80px;\">The call to CP_Multiplex.create calls defaultMultiplexer.create which returns an object with the same API as a layer 1 transport.&nbsp; It has the following behavior:\u003Cbr>\u003C/p>\u003Cul>\u003Cul>\u003Cul>\u003Cli>A call to startSend from anyone using the multiplexed transport calls the base startSend.\u003C/li>\u003Cli>When the multiplexed transport's getDataToSend is called, it calls everyone's getDataToSend.\u003C/li>\u003Cli>When the multiplexed transport's handleIncomingData is called, it calls everyone's handleIncomingData if they have data present.\u003C/li>\u003Cli>When the multiplexed transport's handleError is called, it calls everyone's handleError.\u003Cbr>\u003C/li>\u003C/ul>\u003C/ul>\u003C/ul>\u003Cp>The flashSuccess and flashError functions behave exactly like the Transport layer.\u003C/p>\u003Cp style=\"margin-left: 40px;\">In some cases, if an error occurs, it may be desirable to reset the underlying transport.&nbsp; This can be performed by calling:\u003Cbr>\u003C/p>\u003Cpre style=\"margin-left: 80px;\">CP_Multiplex.reset();\u003Cbr>\u003C/pre>\u003Cp style=\"margin-left: 40px;\">The CP_Multiplex function sets defaultMultiplexer to null, effectively forcing creation of a new transport when the next call is made to CP_Multiple.create.&nbsp; While this is useful if an error condition destroys the underlying transport; it can also enable some channels to have their own isolated sockets.\u003Cbr>\u003C/p>\u003Ch2>Layer 3:&nbsp; Queuing and Reliable\u003Cbr>\u003C/h2>\u003Cp>The queuing and reliable (q&amp;r) layer completely shields the application programmer from the long-polling and unreliable nature of both the transport and multiplexing layers.&nbsp; The q&amp;r layer allows a Javascript application to progressively pass objects to a function and be assured that such objects will be sent.&nbsp; When sending data, the q&amp;r layer stores the sendId given to getDataToSend.&nbsp; It then considers the data successfully sent when its flashSuccess callback is passed the same sendId.&nbsp; Likewise, the q&amp;r layer allows the server to send a reliable and ordered stream of objects.&nbsp; It relies on the client-side part of the layer to include an \"ack\" as soon as its getDataToSend is called.&nbsp; This implies that, as soon as a long-poll with q&amp;r data returns to the browser, the next AJAX request will include \"ack\" data.\u003C/p>\u003Cp>The data that the client sends to the server is a JSON object with an \"a\" property that contains the highest known packet ID, and a \"d\" property that contains each packet.&nbsp; The \"d\" property is an object where each packet is a property named by the packet's ID, and the value is any valid JSON object.&nbsp; Sent packet IDs must begin with 0, incement by 1, and be unique within the connection.\u003C/p>\u003Cp>The purpose of packet IDs in sent packets it in case a server processes incoming packets, but its response to the originating HTTP POST request is lost.&nbsp; In such a scenario, the client will send duplicate packets and the server needs to know which packets to ignore.\u003Cbr>\u003C/p>\u003Cp>For example:\u003C/p>\u003Cpre style=\"margin-left: 40px;\">{\u003Cbr>   \"a\": 32,\u003Cbr>   \"d\":\u003Cbr>   {\u003Cbr>      \"7\": \"data...\",\u003Cbr>      \"8\": true,\u003Cbr>      \"9\": 123,\u003Cbr>      \"10\": {\"a\": \"property a\", \"b\": \"property b\"}\u003Cbr>   }\u003Cbr>}\u003Cbr>\u003C/pre>\u003Cp>Whenever the server's equivalent of getDataToSend is called, all unacked packets will be sent.&nbsp; This implies that there will be no long-polls outstanding while there are unacked packets.&nbsp; The data sent is as a single object with each packet as a property.&nbsp; Like when the client sends data, each property's name is the packet ID and the value is any valid JSON object.\u003Cbr>\u003C/p>\u003Cp>For example, assuming that the highest acked packet is 32:\u003Cbr>\u003C/p>\u003Cpre style=\"margin-left: 40px;\">{\u003Cbr>   \"33\": \"more data\",\u003Cbr>   \"34\": 456,\u003Cbr>   \"35\": true\u003Cbr>}\u003Cbr>\u003C/pre>\u003Cp>To end a connection, the client side of the q&amp;r layer must wait until it's successfully verified that all data was sent.&nbsp; Once all data is sent, it must send a single object with a property named \"end\" and a value of true.&nbsp; It must include an ack in the end packet, and keep sending the end packet until it gets an end packet from the server.&nbsp; (The server end packet is described next.)&nbsp; The client must continue to process and ack incoming data until it gets an end packet from the server and has a call to its flashSuccess with the same sendId that was used for an end packet.\u003C/p>\u003Cp>The client must never transmit packets containing data with an end packet.\u003Cbr>\u003C/p>For example:\u003Cbr>\u003Cpre style=\"margin-left: 40px;\">{\"a\": 128, \"end\": true}\u003Cbr>\u003C/pre>\u003Cp>\u003Cspan style=\"background-color: rgb(255, 255, 255);\">When the server recieves an \"end\" packet, it must send all unacked packets and continue to send all unacked packets until it recieves an end packet with the appropriate ack ID.\u003C/span>&nbsp; The server indicates that it's ready to end a connection by including a property named \"end\" in the object that it sends.\u003Cbr>\u003C/p>\u003Cpre style=\"margin-left: 40px;\">{\u003Cbr>   \"129\": 6543,\u003Cbr>   \"130\": \"abc\",\u003Cbr>   \"end\": true\u003Cbr>}\u003Cbr>\u003C/pre>\u003Cp>In the above example, the server will continue to re-send packets until it gets a packet from the client that looks like:\u003C/p>\u003Cpre style=\"margin-left: 40px;\">{\u003Cspan style=\"background-color: rgb(255, 255, 0);\">\"a\": 130\u003C/span>, \"end\": true}\u003C/pre>\u003Cp>The server may end a connection by including an end packet.&nbsp; It can not consider the connection complete until it receives an end packet from the client and all sent packets are acked.&nbsp; Due to the unreliable nature of the underlying transport; both the server and client may imply that a connection is closed if no response to an end packet comes after 60 seconds have passed, although an error must be given through the API.\u003C/p>\u003Cp>Neither the client or server may send additional new packets after sending an end packet.&nbsp; Both the client and server must throw an exception if an attempt is made to send data after they send an end packet.\u003Cbr>\u003C/p>\u003Cp>Javascript API:\u003C/p>\u003Cp style=\"margin-left: 40px;\">To initiate a q&amp;r connection over the default multiplexer, call:\u003C/p>\u003Cpre style=\"margin-left: 80px;\">var socket = CP_QualityReliable.connect(\u003Cbr>   \"/the/endpoint\"\u003Cbr>   {\u003Cbr>      handleIncomingData: function(incoming, packetId) { },\u003Cbr>      handleCloseRequested: function() { },\u003Cbr>      handleClosed: function() { },\u003Cbr>      handleError: function(error) { },\u003Cbr>      flashSuccess: function(transport, sendId) { },\u003Cbr>      flashError: function(transport, sendId) { }\u003Cbr>   });\u003Cbr>\u003C/pre>\u003Cp style=\"margin-left: 40px;\">The handleIncomingData is called whenever there is incoming data.&nbsp; The packetId is also included.&nbsp; HandleIncomingData is always called in the proper order as communicated through the packetId.&nbsp; The handleCloseRequest is called whenever the server requests to close the q&amp;r session.&nbsp; The handleClosed callback is used when the q&amp;r transport is completely closed, and is called both when the server requests to close the q&amp;r session and when the client requests to close the q&amp;r session.&nbsp; The handleError callback is called whenever the underlying transport has an unrecoverable error, or if the q&amp;r connection is closed in error.&nbsp; FlashSuccess and FlashFailure behave like all of the other layers and are used to communicate the status of the underlying transport.\u003C/p>\u003Cp style=\"margin-left: 40px;\">All of the client-side callbacks are optional.\u003C/p>\u003Cp style=\"margin-left: 40px;\">The returned q&amp;r connection object has the following functions:\u003C/p>\u003Cpre style=\"margin-left: 80px;\">send(data, maxDelay);\u003Cbr>\u003C/pre>\u003Cp style=\"margin-left: 40px;\">The send function queues the data object to send.&nbsp; The data object must be serializable to valid JSON.&nbsp; MaxDelay is an optional argument and defaults to 50.&nbsp; It is a time span, in milliseconds, of how long to wait for additional data before sending the data to the server.&nbsp; Larger delays are useful when sending many small objects in succession; however, smaller delays are useful when it is known that only a single object will be sent or when all objects can be sent immediately.\u003C/p>\u003Cp style=\"margin-left: 40px;\">Send will throw an exception if either the client or server has initiated closing the connection.\u003Cbr>\u003C/p>\u003Cpre style=\"margin-left: 80px;\">close();\u003Cbr>\u003C/pre>\u003Cp style=\"margin-left: 40px;\">The close function initiates closing the q&amp;r connection.\u003Cbr>\u003C/p>\u003Cp>The server API should attempt to emulate the client API as closely as possible.\u003Cbr>\u003C/p>\u003Ch1>Additional Notes and Functionality\u003C/h1>\u003Cp>Many browsers have varying limits on the amount of open sockets that they allow to a particular web server. &nbsp;A shortcoming in The Comet Protocol is that if too many pages or tabs have an active Comet Transport, the browser may become unresponsive due to all long polls blocking new pages.\u003C/p>\u003Cp>To work around this issue, servers are&nbsp;recommended&nbsp;to close old Comet Transports when a session's number of open comet transports exceeds a configurable number.\u003C/p>\u003Ch1>Future Functionality\u003C/h1>\u003Cp>Future versions of the Comet Protocol may introduce additional optional features at the Transport layer in an attempt to lower latency when transmitting many packets from the server.&nbsp; These features may include:\u003C/p>\u003Cul>\u003Cli>\u003Cspan style=\"font-weight: bold;\">Flash or Java Applet Socket Support\u003C/span>:&nbsp; A potential technique to reduce latency is to utilize Flash or a Java Applet to open a socket on the original server.&nbsp; This would fall back to the original Transport spec if access to a special outgoing socket is limited by a strict network policy.\u003C/li>\u003Cli>\u003Cspan style=\"font-weight: bold;\">\"forever connections\"\u003C/span>:&nbsp; Some browsers may support \"forever connections,\" which allows the server to transmit data with lower latency.&nbsp; If the browser does not support this, fallback to long-polling would occur.\u003Cbr>\u003C/li>\u003Cli>\u003Cb>Connection Sharing through Cookies:\u003C/b>&nbsp;&nbsp;In some browsers, Comet can cause problems when multiple tabs are open. &nbsp;An approach to address this is to use local cookies to share a single long-poll among tabs. &nbsp;The appropriate place to implement this is in the multiplexing layer. &nbsp;(layer 2)\u003C/li>\u003C/ul>\u003Cbr>\u003Cp>\u003Cbr>\u003C/p>\u003Cbr>"}