{"Title":"A Walthrough of the Blogum's Source Code","Contents":"\u003Cp>\u003Ca href=\"about.page\">About ObjectCloud\u003C/a>\u003C/p>\u003Cp>ObjectCloud's blogum functionality is a sample of ObjectCloud's powerful APIs for creating simple social web applications.\u003C/p>\u003Ch1>The Blogum Viewer\u003C/h1>\u003Cp>The blogum viewer is a webcomponent that can be embedded in other files.&nbsp; It's visible at \u003Ca target=\"_blank\" title=\"\" href=\"/Shell/Viewers/BlogumViewer.webcomponent?Method=ReadAll\">/Shell/Viewers/BlogumViewer.webcomponent\u003C/a>.&nbsp; The blogum class is located at \u003Ca target=\"_blank\" title=\"\" href=\"/Classes/blogum\">/Classes/blogum\u003C/a>\u003Cbr>\u003C/p>\u003Cp>Initially, the blogum viewer declares the Javascript files it needs loaded.&nbsp; This includes a JavaScript wrapper for the blogum file named \"Blog.\"\u003C/p>\u003Cpre style=\"margin-left: 40px;\">&lt;? Scripts(/API/Prototype.js, \u003Cspan style=\"background-color: rgb(255, 255, 0);\">&lt;? $_GET[\"FileName\"] ?&gt;?Method=GetJSW&amp;assignToVariable=Blog\u003C/span>, /API/nicEdit.js, /API/Comet/CometProtocol.js) ?&gt;\u003Cbr>\u003C/pre>\u003Cp>The viewer uses the webcomponent system to load the posts and include them when the blogum is displayed.\u003Cbr>\u003C/p>\u003Cpre style=\"margin-left: 40px;\">var posts = &lt;? WebComponent($_GET[\"FileName\"] . \"?Method=GetPostsForDisplay&amp;max=\" . $_GET[\"max\"] . \"&amp;newest=\" . $_GET[\"newest\"]) ?&gt;;\u003Cbr>\u003C/pre>\u003Cp>GetPostsForDisplay is a server-side JavaScript method that uses ObjectCloud's related files API and the \"Preview\" action:\u003C/p>\u003Cpre style=\"margin-left: 40px;\">GetPostsForDisplay.webCallable = \"GET_application_x_www_form_urlencoded\";\u003Cbr>GetPostsForDisplay.minimumWebPermission = \"Read\";\u003Cbr>GetPostsForDisplay.webReturnConvention = \"JSON\";\u003Cbr>GetPostsForDisplay.parser_newest = \"number\";\u003Cbr>GetPostsForDisplay.parser_oldest = \"number\";\u003Cbr>GetPostsForDisplay.parser_max = \"number\";\u003Cbr>function GetPostsForDisplay(newest, oldest, max)\u003Cbr>{\u003Cbr>   \u003Cspan style=\"background-color: rgb(255, 255, 0);\">var replies = base.GetRelatedFiles_Sync(\n      {\n         relationships: [\"post\"],\n         newest: newest,\n         oldest: oldest,\n         maxToReturn: max\n      });\u003C/span>\u003Cbr>\u003Cbr>   var toReturn = [];\u003Cbr>\u003Cbr>   for (var i = 0; i &lt; replies.length; i++)\u003Cbr>      toReturn.push(\u003Cbr>      {\u003Cbr>         File: replies[i],\u003Cbr>         View: \u003Cspan style=\"background-color: rgb(255, 255, 0);\">Shell_GET(replies[i].FullPath + \"?Action=Preview\")\u003C/span>\u003Cbr>      });\u003Cbr>\u003Cbr>   return toReturn;\u003Cbr>}\u003Cbr>\u003C/pre>\u003Ch1>Replying to a Blog Post\u003C/h1>\u003Cp>All blog posts are ordinary .page files, which were not designed to be interactive.&nbsp; Through webcomponents and server-side Javascript mix-ins, .page files support interactive reply functionality needed in a blogum.\u003C/p>\u003Cp>The .page class stored in \u003Ca target=\"_blank\" title=\"\" href=\"/Classes/page\">/Classes/page\u003C/a> ensures that server-side JavaScript allows access to the underlying web methods and adds the Replier mix-in:\u003C/p>\u003Cpre style=\"margin-left: 40px;\">// Scripts: /API/MixIns/Replier.js\u003Cbr>\u003Cbr>var options =\u003Cbr>{\u003Cbr>   BlockWebMethods: false\u003Cbr>};\u003Cbr>\u003C/pre>\u003Cp>The server-side functionality for replies is stored at \u003Ca target=\"_blank\" title=\"\" href=\"/API/MixIns/Replier.js\">/API/MixIns/Replier.js\u003C/a>&nbsp; The Replier_AddReply function requires that the user has a named permission \"reply\" in order to call the function.&nbsp; It uses the AddRelatedFile and Chown functions to ensure that the reply is related to the root of the thread; that the parent message has the reply related to it; and that the user making the reply owns the reply file.\u003Cbr>\u003C/p>\u003Cpre style=\"margin-left: 40px;\">Replier_AddReply.webCallable = \"POST_application_x_www_form_urlencoded\";\u003Cbr>Replier_AddReply.minimumWebPermission = \"Write\";\u003Cbr>\u003Cspan style=\"background-color: rgb(255, 255, 0);\">Replier_AddReply.namedPermissions = \"reply\";\u003C/span>\u003Cbr>Replier_AddReply.webReturnConvention = \"Status\";\u003Cbr>Replier_AddReply.parser_options = \"JSON\";\u003Cbr>function Replier_AddReply(replyText, options)\u003Cbr>{\u003Cbr>   var roots = base.GetRelatedFiles_Sync(\n      {\n         relationships: [\"root\"],\n         maxToReturn: 1\n      });\n\n   var userMetadata = getConnectionMetadata();\n\u003Cbr>\u003C/pre>\u003Cpre style=\"margin-left: 40px;\">   callAsOwner(function()\u003Cbr>   {\u003Cbr>      elevate(function()\u003Cbr>      {\u003Cbr>         var parentDirectoryWrapper = getDefaultRelatedObjectDirectoryWrapper();\u003Cbr>\u003Cbr>         var now = new Date();\u003Cbr>         var replyFilename = fileMetadata.filename + \"_reply\" + now.getTime() + \".reply\";\u003Cbr>\u003Cbr>         var replyFile = parentDirectoryWrapper.CreateFile_Sync(\n            {\n               FileName: replyFilename,\n               FileType: \"text\",\n               ErrorIfExists: true\n            });\u003Cbr>\u003Cbr>         replyFile.WriteAll(sanitize(replyText));\u003Cbr>\u003Cbr>         \u003Cspan style=\"background-color: rgb(255, 255, 0);\">if (0 == roots.length)\u003C/span>\u003Cbr style=\"background-color: rgb(255, 255, 0);\">\u003Cspan style=\"background-color: rgb(255, 255, 0);\">            replyFile.AddRelatedFile(fileMetadata.filename, \"root\");\u003C/span>\u003Cbr style=\"background-color: rgb(255, 255, 0);\">\u003Cspan style=\"background-color: rgb(255, 255, 0);\">         else\u003C/span>\u003Cbr style=\"background-color: rgb(255, 255, 0);\">\u003Cspan style=\"background-color: rgb(255, 255, 0);\">            replyFile.AddRelatedFile(roots[0].FullPath, \"root\");\u003C/span>\u003Cbr style=\"background-color: rgb(255, 255, 0);\">\u003Cbr style=\"background-color: rgb(255, 255, 0);\">\u003Cspan style=\"background-color: rgb(255, 255, 0);\">\n              replyFile.Chown(userMetadata.id);\u003C/span>\u003Cbr style=\"background-color: rgb(255, 255, 0);\">\u003Cbr style=\"background-color: rgb(255, 255, 0);\">\u003Cspan style=\"background-color: rgb(255, 255, 0);\">         base.AddRelatedFile_Sync(\n            {\n               filename: replyFilename,\n               relationship: \"post\"\n            });\n\n         base.AddRelatedFile_Sync(\n            {\n               filename: replyFilename,\n               relationship: \"reply\"\n            });\u003C/span>\u003Cbr>      });\u003Cbr>   });\u003Cbr>}\u003Ca target=\"_blank\" title=\"\" href=\"/API/MixIns/Replier.js\">\u003Cbr>\u003C/a>\u003C/pre>\n\u003Ch1>The Blogum Editor\u003C/h1>\u003Cp>The blogum editor is stored at \u003Ca target=\"_blank\" title=\"\" href=\"/Shell/Editors/BlogumEditor.wchtml?Method=ReadAll\">/Shell/Editors/BlogumEditor.wchtml\u003C/a>.&nbsp; It loads a javascript \"Blogum\" object to wrap all AJAX calls:\n\u003C/p>\u003Cpre style=\"margin-left: 40px;\">&lt;? Scripts(/API/Prototype.js, &lt;? $_GET[\"FileName\"] ?&gt;?Method=GetJSW&amp;assignToVariable=Blogum) ?&gt;\u003Cbr>\u003C/pre>\u003Cp>\nUnlike the viewer, recent posts are loaded, and then sorted, before displaying:\u003C/p>\u003Cpre style=\"margin-left: 40px;\">var posts = &lt;? WebComponent($_GET[\"FileName\"] . \"?Method=GetRelatedFiles&amp;relationship=post\") ?&gt;;\u003Cbr>\u003Cbr>// Sort by creation date\u003Cbr>posts.sort(function(a, b)\u003Cbr>{\u003Cbr>   var aS = a.Created;\u003Cbr>   var bS = b.Created;\u003Cbr>\u003Cbr>   if (aS &lt; bS)\u003Cbr>      return -1;\u003Cbr>   if (aS &gt; bS)\u003Cbr>      return 1;\u003Cbr>\u003Cbr>   return 0;\u003Cbr>});\u003Cbr>\u003Cbr>\u003C/pre>\u003Cp>When the posts are displayed, the various actions that can be performed are implemented by rendering HTML that links to pre-existing ObjectCloud functionality:\u003C/p>\u003Cpre style=\"margin-left: 40px;\">posts.each(function(post, i)\u003Cbr>{\u003Cbr>   document.write(\u003Cbr>      '&lt;a href=\"' + post.Filename + '\"&gt;' + post.Filename + '&lt;/a&gt; (' + new Date(post.Created) + ')' +\u003Cbr>      ' &lt;a href=\"' + post.Filename + '?Action=Edit\"&gt;edit&lt;/a&gt;&lt;br /&gt;');\u003Cbr>});\u003C/pre>\u003Cp>It's possible to \"post\" a pre-existing file by relating it to the blogum:\u003C/p>\u003Cpre style=\"margin-left: 40px;\">function createpost()\u003Cbr>{\u003Cbr>   Blogum.AddPost(\n      {\n         filename: $(\"filename\").value\n      },\n      function()\n      {\n         location.reload(true);\n      });\n}\u003Cbr>\u003C/pre>\u003Cp>This calls server-side JavaScript in the \u003Ca target=\"_blank\" title=\"\" href=\"/Classes/blogum\">/Classes/blogum\u003C/a> class:\u003C/p>\u003Cpre style=\"margin-left: 40px;\">AddPost.webCallable = \"POST_application_x_www_form_urlencoded\";\u003Cbr>AddPost.namedPermissions = \"post\";\u003Cbr>function AddPost(filename)\u003Cbr>{\u003Cbr>   elevate(function()\u003Cbr>   {\u003Cbr>      base.AddRelatedFile(filename, \"post\");\u003Cbr>      base.AddRelatedFile(filename, \"reply\");\u003Cbr>\u003Cbr>      var parentDirectoryWrapper = getDefaultRelatedObjectDirectoryWrapper();\u003Cbr>      var replyFile = parentDirectoryWrapper(filename);\u003Cbr>      replyFile.AddRelatedFile(fileMetadata.filename, \"root\");\u003Cbr>   });\u003Cbr>}\u003Cbr>\u003C/pre>\u003Cp style=\"margin-left: 40px;\">\u003Cspan style=\"font-weight: bold;\">Note\u003C/span>:&nbsp; \u003Cspan style=\"font-style: italic;\">It's possible to tweak the UI to let any user with \"post\" permission to add a pre-existing file to a blogum, although the UI currently does not support it.\u003C/span>\u003Cbr>\u003C/p>\u003Ch2>Permissions\u003C/h2>\u003Cp>The blogum editor allows named permissions to be set by using the \u003Ca target=\"_blank\" title=\"\" href=\"/Shell/Security/NamedPermissions.webcomponent?Method=ReadAll\">/Shell/Security/NamedPermissions.webcomponent\u003C/a> webcomponent.\u003C/p>\u003Cpre style=\"margin-left: 40px;\">\u003Cspan style=\"background-color: rgb(255, 255, 0);\">&lt;? WebComponent(\"/Shell/Security/NamedPermissions.webcomponent?FileName=\" . $_GET[\"FileName\"] . \"&amp;NamedPermission=post\") ?&gt;\u003C/span>\u003Cbr>\u003Cbr>&lt;p&gt;Note:  Giving everyone, authenticated users, local users, ect, permission to post will make the blogum behave like a forum.\u003Cbr>Giving a limited group of people permission to post, such as administrators, or a few well-known people, will make the blogum\u003Cbr>behave like a blog.&lt;/p&gt;\u003Cbr>\u003Cbr>&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\u003Cbr>\u003Cspan style=\"background-color: rgb(255, 255, 0);\">&lt;? WebComponent(\"/Shell/Security/NamedPermissions.webcomponent?FileName=\" . $_GET[\"FileName\"] . \"&amp;NamedPermission=reply\") ?&gt;\u003C/span>\u003Cbr>\u003Cbr>&lt;p&gt;Any user, group, or openId listed above can reply to any post or topic added to the blogum.&lt;/p&gt;\u003Cbr>\u003Cbr>   &lt;? WebComponent(\"/Shell/Security/PermissionInstructions.webcomponent\") ?&gt;\u003Cbr>\u003C/pre>\u003Ch1>Setting up the Actions\u003C/h1>\u003Cp>An action for .blogum must be set up so that ObjectCloud knows how to view and edit these files.&nbsp; These actions are stored in \u003Ca target=\"_blank\" title=\"\" href=\"/Shell/Actions/ByExtension/blogum\">/Shell/Actions/ByExtension/blogum\u003C/a>.\u003C/p>\u003Cp>\u003Ca href=\"about.page\">About ObjectCloud\u003C/a>\u003C/p>"}