<div>A Walthrough of the Blogum's Source Code</div><p><a href="about.page">About ObjectCloud</a></p><p>ObjectCloud's blogum functionality is a sample of ObjectCloud's powerful APIs for creating simple social web applications.</p><h1>The Blogum Viewer</h1><p>The blogum viewer is a webcomponent that can be embedded in other files.&nbsp; It's visible at <a target="_blank" title="" href="/Shell/Viewers/BlogumViewer.webcomponent?Method=ReadAll">/Shell/Viewers/BlogumViewer.webcomponent</a>.&nbsp; The blogum class is located at <a target="_blank" title="" href="/Classes/blogum">/Classes/blogum</a><br></p><p>Initially, the blogum viewer declares the Javascript files it needs loaded.&nbsp; This includes a JavaScript wrapper for the blogum file named "Blog."</p><pre style="margin-left: 40px;">&lt;? Scripts(/API/Prototype.js, <span style="background-color: rgb(255, 255, 0);">&lt;? $_GET["FileName"] ?&gt;?Method=GetJSW&amp;assignToVariable=Blog</span>, /API/nicEdit.js, /API/Comet/CometProtocol.js) ?&gt;<br></pre><p>The viewer uses the webcomponent system to load the posts and include them when the blogum is displayed.<br></p><pre style="margin-left: 40px;">var posts = &lt;? WebComponent($_GET["FileName"] . "?Method=GetPostsForDisplay&amp;max=" . $_GET["max"] . "&amp;newest=" . $_GET["newest"]) ?&gt;;<br></pre><p>GetPostsForDisplay is a server-side JavaScript method that uses ObjectCloud's related files API and the "Preview" action:</p><pre style="margin-left: 40px;">GetPostsForDisplay.webCallable = "GET_application_x_www_form_urlencoded";<br>GetPostsForDisplay.minimumWebPermission = "Read";<br>GetPostsForDisplay.webReturnConvention = "JSON";<br>GetPostsForDisplay.parser_newest = "number";<br>GetPostsForDisplay.parser_oldest = "number";<br>GetPostsForDisplay.parser_max = "number";<br>function GetPostsForDisplay(newest, oldest, max)<br>{<br>   <span style="background-color: rgb(255, 255, 0);">var replies = base.GetRelatedFiles_Sync(
      {
         relationships: ["post"],
         newest: newest,
         oldest: oldest,
         maxToReturn: max
      });</span><br><br>   var toReturn = [];<br><br>   for (var i = 0; i &lt; replies.length; i++)<br>      toReturn.push(<br>      {<br>         File: replies[i],<br>         View: <span style="background-color: rgb(255, 255, 0);">Shell_GET(replies[i].FullPath + "?Action=Preview")</span><br>      });<br><br>   return toReturn;<br>}<br></pre><h1>Replying to a Blog Post</h1><p>All blog posts are ordinary .page files, which were not designed to be interactive.&nbsp; Through webcomponents and server-side Javascript mix-ins, .page files support interactive reply functionality needed in a blogum.</p><p>The .page class stored in <a target="_blank" title="" href="/Classes/page">/Classes/page</a> ensures that server-side JavaScript allows access to the underlying web methods and adds the Replier mix-in:</p><pre style="margin-left: 40px;">// Scripts: /API/MixIns/Replier.js<br><br>var options =<br>{<br>   BlockWebMethods: false<br>};<br></pre><p>The server-side functionality for replies is stored at <a target="_blank" title="" href="/API/MixIns/Replier.js">/API/MixIns/Replier.js</a>&nbsp; The Replier_AddReply function requires that the user has a named permission "reply" in order to call the function.&nbsp; It uses the AddRelatedFile and Chown functions to ensure that the reply is related to the root of the thread; that the parent message has the reply related to it; and that the user making the reply owns the reply file.<br></p><pre style="margin-left: 40px;">Replier_AddReply.webCallable = "POST_application_x_www_form_urlencoded";<br>Replier_AddReply.minimumWebPermission = "Write";<br><span style="background-color: rgb(255, 255, 0);">Replier_AddReply.namedPermissions = "reply";</span><br>Replier_AddReply.webReturnConvention = "Status";<br>Replier_AddReply.parser_options = "JSON";<br>function Replier_AddReply(replyText, options)<br>{<br>   var roots = base.GetRelatedFiles_Sync(
      {
         relationships: ["root"],
         maxToReturn: 1
      });

   var userMetadata = getConnectionMetadata();
<br></pre><pre style="margin-left: 40px;">   callAsOwner(function()<br>   {<br>      elevate(function()<br>      {<br>         var parentDirectoryWrapper = getDefaultRelatedObjectDirectoryWrapper();<br><br>         var now = new Date();<br>         var replyFilename = fileMetadata.filename + "_reply" + now.getTime() + ".reply";<br><br>         var replyFile = parentDirectoryWrapper.CreateFile_Sync(
            {
               FileName: replyFilename,
               FileType: "text",
               ErrorIfExists: true
            });<br><br>         replyFile.WriteAll(sanitize(replyText));<br><br>         <span style="background-color: rgb(255, 255, 0);">if (0 == roots.length)</span><br style="background-color: rgb(255, 255, 0);"><span style="background-color: rgb(255, 255, 0);">            replyFile.AddRelatedFile(fileMetadata.filename, "root");</span><br style="background-color: rgb(255, 255, 0);"><span style="background-color: rgb(255, 255, 0);">         else</span><br style="background-color: rgb(255, 255, 0);"><span style="background-color: rgb(255, 255, 0);">            replyFile.AddRelatedFile(roots[0].FullPath, "root");</span><br style="background-color: rgb(255, 255, 0);"><br style="background-color: rgb(255, 255, 0);"><span style="background-color: rgb(255, 255, 0);">
              replyFile.Chown(userMetadata.id);</span><br style="background-color: rgb(255, 255, 0);"><br style="background-color: rgb(255, 255, 0);"><span style="background-color: rgb(255, 255, 0);">         base.AddRelatedFile_Sync(
            {
               filename: replyFilename,
               relationship: "post"
            });

         base.AddRelatedFile_Sync(
            {
               filename: replyFilename,
               relationship: "reply"
            });</span><br>      });<br>   });<br>}<a target="_blank" title="" href="/API/MixIns/Replier.js"><br></a></pre>
<h1>The Blogum Editor</h1><p>The blogum editor is stored at <a target="_blank" title="" href="/Shell/Editors/BlogumEditor.wchtml?Method=ReadAll">/Shell/Editors/BlogumEditor.wchtml</a>.&nbsp; It loads a javascript "Blogum" object to wrap all AJAX calls:
</p><pre style="margin-left: 40px;">&lt;? Scripts(/API/Prototype.js, &lt;? $_GET["FileName"] ?&gt;?Method=GetJSW&amp;assignToVariable=Blogum) ?&gt;<br></pre><p>
Unlike the viewer, recent posts are loaded, and then sorted, before displaying:</p><pre style="margin-left: 40px;">var posts = &lt;? WebComponent($_GET["FileName"] . "?Method=GetRelatedFiles&amp;relationship=post") ?&gt;;<br><br>// Sort by creation date<br>posts.sort(function(a, b)<br>{<br>   var aS = a.Created;<br>   var bS = b.Created;<br><br>   if (aS &lt; bS)<br>      return -1;<br>   if (aS &gt; bS)<br>      return 1;<br><br>   return 0;<br>});<br><br></pre><p>When the posts are displayed, the various actions that can be performed are implemented by rendering HTML that links to pre-existing ObjectCloud functionality:</p><pre style="margin-left: 40px;">posts.each(function(post, i)<br>{<br>   document.write(<br>      '&lt;a href="' + post.Filename + '"&gt;' + post.Filename + '&lt;/a&gt; (' + new Date(post.Created) + ')' +<br>      ' &lt;a href="' + post.Filename + '?Action=Edit"&gt;edit&lt;/a&gt;&lt;br /&gt;');<br>});</pre><p>It's possible to "post" a pre-existing file by relating it to the blogum:</p><pre style="margin-left: 40px;">function createpost()<br>{<br>   Blogum.AddPost(
      {
         filename: $("filename").value
      },
      function()
      {
         location.reload(true);
      });
}<br></pre><p>This calls server-side JavaScript in the <a target="_blank" title="" href="/Classes/blogum">/Classes/blogum</a> class:</p><pre style="margin-left: 40px;">AddPost.webCallable = "POST_application_x_www_form_urlencoded";<br>AddPost.namedPermissions = "post";<br>function AddPost(filename)<br>{<br>   elevate(function()<br>   {<br>      base.AddRelatedFile(filename, "post");<br>      base.AddRelatedFile(filename, "reply");<br><br>      var parentDirectoryWrapper = getDefaultRelatedObjectDirectoryWrapper();<br>      var replyFile = parentDirectoryWrapper(filename);<br>      replyFile.AddRelatedFile(fileMetadata.filename, "root");<br>   });<br>}<br></pre><p style="margin-left: 40px;"><span style="font-weight: bold;">Note</span>:&nbsp; <span style="font-style: italic;">It's possible to tweak the UI to let any user with "post" permission to add a pre-existing file to a blogum, although the UI currently does not support it.</span><br></p><h2>Permissions</h2><p>The blogum editor allows named permissions to be set by using the <a target="_blank" title="" href="/Shell/Security/NamedPermissions.webcomponent?Method=ReadAll">/Shell/Security/NamedPermissions.webcomponent</a> webcomponent.</p><pre style="margin-left: 40px;"><span style="background-color: rgb(255, 255, 0);">&lt;? WebComponent("/Shell/Security/NamedPermissions.webcomponent?FileName=" . $_GET["FileName"] . "&amp;NamedPermission=post") ?&gt;</span><br><br>&lt;p&gt;Note:  Giving everyone, authenticated users, local users, ect, permission to post will make the blogum behave like a forum.<br>Giving a limited group of people permission to post, such as administrators, or a few well-known people, will make the blogum<br>behave like a blog.&lt;/p&gt;<br><br>&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;<br><span style="background-color: rgb(255, 255, 0);">&lt;? WebComponent("/Shell/Security/NamedPermissions.webcomponent?FileName=" . $_GET["FileName"] . "&amp;NamedPermission=reply") ?&gt;</span><br><br>&lt;p&gt;Any user, group, or openId listed above can reply to any post or topic added to the blogum.&lt;/p&gt;<br><br>   &lt;? WebComponent("/Shell/Security/PermissionInstructions.webcomponent") ?&gt;<br></pre><h1>Setting up the Actions</h1><p>An action for .blogum must be set up so that ObjectCloud knows how to view and edit these files.&nbsp; These actions are stored in <a target="_blank" title="" href="/Shell/Actions/ByExtension/blogum">/Shell/Actions/ByExtension/blogum</a>.</p><p><a href="about.page">About ObjectCloud</a></p>