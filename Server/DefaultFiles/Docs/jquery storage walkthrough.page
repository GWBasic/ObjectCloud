{"Title":"Simple Key Value Pairs from Javascript","Contents":"<p>AppFeeds, and its open-source version ObjectCloud provide some simple techniques for saving and loading data from in-browser Javascript without any server-side programming, scripting, or schema creation. &#160;This allows for rapid prototyping of applications; or implementing simple applications that have basic security requirements.<br/></p><p>This page is a step-by-step walkthrough for creating a page with ObjectCloud and JQuery that loads and saves data without any server-side programming or schema manipulation. &#160;It uses HTML5, Javascript, and jQuery to work with a name-value pairs file stored on the ObjectCloud server. &#160;The completed page will save 4 fields within a name-value pairs file.</p><h1>Initial Setup</h1><p>The first things that will be done are setting up some initial folders and files. &#160;The application will live in the /SampleNVPs folder. &#160;This is created by viewing the root folder at the <a href=\"/?Action=View\" title=\"\" target=\"\">/?Action=View</a> url. &#160;Once viewing the root directory, scroll to \"New File,\" select \"Directory,\" type in \"SampleNVPs,\" and hit the \"Create\" button.</p><p><img src=\"/Docs/jquery%20storage%20walkthrough/Creating%20folder.png\" alt=\"\" align=\"none\"/><br/></p><p>Once in the <a href=\"/SampleNVPs\" title=\"\" target=\"\">/SampleNVPs</a> folder, two more files are needed: &#160;\"myapp.oc\" and \"nvps\". &#160;\"myapp.oc\" is a xml file that's created by selecting \"ObjectCloud Template (HTML5 xml),\" and \"nvps\" is a \"Name-Value pairs\" file.</p><p><img src=\"/Docs/jquery%20storage%20walkthrough/create%20myapp.png\" alt=\"\" align=\"none\"/><br/></p><p><img src=\"/Docs/jquery%20storage%20walkthrough/create%20nvps.png\" alt=\"\" align=\"none\"/><br/></p><p>Once complete,&#160;<a href=\"/SampleNVPs\" title=\"\" target=\"\">/SampleNVPs</a>&#160;should look like:</p><p><img src=\"/Docs/jquery%20storage%20walkthrough/created.png\" alt=\"\" align=\"none\"/><br/></p><h1>Creating the HTML</h1><p>Now that there is the&#160;<a href=\"/SampleNVPs\" title=\"\" target=\"\">/SampleNVPs</a>&#160;folder, <a href=\"/SampleNVPs/myapp.html\" title=\"\" target=\"\">/SampleNVPs/myapp.html</a>, and <a href=\"/SampleNVPs/nvps\" title=\"\" target=\"\">/SampleNVPs/nvps</a>, the HTML and Javascript will be created. &#160;Initially, simple HTML will be created. &#160;Click on the arrow next to myapp.html, and select \"Edit.\"</p><p><img src=\"/Docs/jquery%20storage%20walkthrough/select%20edit.png\" alt=\"\" align=\"none\"/><br/></p><p>In the editor, create a simple page with the following html5 xml, then push \"Save\": &#160;</p><p></p><blockquote class=\"webkit-indent-blockquote\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 40px; border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; border-width: initial; border-color: initial; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><pre>&lt;oc:componentdef xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:oc=\"objectcloud_templating\"&gt;\n&lt;oc:inserthead&gt;\n   &lt;title&gt;Simple Demo Application&lt;/title&gt;\n&lt;/oc:inserthead&gt;\n\n   &lt;h1&gt;Simple Demo Application&lt;/h1&gt;\n   &lt;div&gt;First: &lt;input type=\"text\" id=\"first\" /&gt;&lt;/div&gt;\n   &lt;div&gt;Middle: &lt;input type=\"text\" id=\"middle\" /&gt;&lt;/div&gt;\n   &lt;div&gt;Last: &lt;input type=\"text\" id=\"last\" /&gt;&lt;/div&gt;\n   &lt;div&gt;Age: &lt;input type=\"text\" id=\"age\" /&gt;&lt;/div&gt;\n\n&lt;/oc:componentdef&gt;</pre></blockquote><p></p><p>The above html5 xml takes advantage of ObjectCloud's templating system.&#160;&#160;The templating system has many features which are beyond this walkthrough's scope. &#160; &#160;This example uses the Templating System's ability to give many different pages a common look and feel, yet manipulate the &lt;head&gt;&lt;/head&gt; tag.</p><blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><p><b>Note</b>: &#160;<i>AppFeeds and ObjectCloud use the xml varient of HTML5, as opposed to the SGML varient.</i></p></blockquote><p>After typing in the above HTML and clicking save, return to the <a href=\"/SampleNVPs\" title=\"\" target=\"\">/SampleNVPs</a> folder and click on myapp.oc to see the complete page.</p><p><img src=\"/Docs/jquery%20storage%20walkthrough/static%20html.png\" alt=\"\" align=\"none\"/><br/></p><p>Some things worth noting:</p><p></p><ul><li>The simple application gets all of AppFeeds look and feel from the templating system.</li><li>The templating system allows for &lt;head&gt;&lt;/head&gt; tag manipulation, so the &lt;title&gt;&lt;/title&gt; tag can be set with little effort.</li></ul><p></p><h1>Saving Data with AppFeeds, ObjectCloud and jQuery</h1><p>Saving data uses&#160;<a href=\"/SampleNVPs/nvps\" title=\"\" target=\"\">/SampleNVPs/nvps</a>'s Javascript wrapper and jQuery. &#160;These are with the &lt;oc:script&gt; and &lt;oc:open&gt; tags:</p><blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><pre>&lt;oc:inserthead&gt;\n   &lt;title&gt;Simple Demo Application&lt;/title&gt;\n   <span class=\"Apple-style-span\" style=\"background-color: rgb(255, 255, 0);\">&lt;oc:script src=\"/API/jquery.js\" /&gt;\n   &lt;oc:open filename=\"nvps\" varname=\"nvps\" /&gt;</span>\n&lt;/oc:inserthead&gt;</pre></blockquote><p>The &lt;oc:script&gt; tag is a special XML tag that the server uses to resolve dependancies among many components. &#160;Its used instead of html's &lt;script&gt; tag so that many components in a page can declare dependancies without the resulting html being littered with many duplicate references to the same script. &#160;It also takes advantage of a&#160;dependency&#160;resolution system so that a designer or programmer can add scripts without having to research and reference their dependancies.</p><blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><p><b>Note</b>: &#160;<i>It is strongly&#160;recommended&#160;to develop against a version of jQuery stored on the server, instead of 3rd party versions that are hosted by providers like </i><a href=\"http://code.google.com/apis/ajaxlibs/\" title=\"\" target=\"\"><i>Google's AJAX API</i></a><i>. &#160;This is by design, the templating system includes an agressive caching and minimization system. &#160;Furthermore, AppFeeds and ObjectCloud components are developed against the local versions of jQuery, thus using jQuery from a 3rd party may introduce unexpected behavior. &#160;Future versions of the templating system may introduce additional techniques to accelerate loading Javascript, or may introduce a way to configure the server to use 3rd party scripts without needing to rewrite code. &#160;In general, the templating system is designed to take care of making Javascript load fast.</i></p></blockquote><p>The &lt;oc:open&gt; tag creates an in-browser Javascript object named \"nvps\" that's used to access&#160;<a href=\"/SampleNVPs/nvps\" title=\"\" target=\"\" style=\"color: rgb(68, 68, 170); \">/SampleNVPs/nvps</a>&#160;without needing to write low-level AJAX handlers.</p><p>AppFeeds includes some popular Javascript libraries, including jQuery, in the <a href=\"/API\" title=\"\" target=\"\">/API</a> folder.</p><p>After the references to&#160;<a href=\"/SampleNVPs/nvps\" title=\"\" target=\"\">/SampleNVPs/nvps</a>&#160;and jQuery are added, the change event handlers will be written. &#160;These will update the&#160;<a href=\"/SampleNVPs/nvps\" title=\"\" target=\"\">/SampleNVPs/nvps</a>&#160;file whenever the value changes. &#160;The Javascript uses jQuery's .change event handler on the input tags, and calls the nvps object's Set function.</p><p></p><pre>            $('#first').<span class=\"Apple-style-span\" style=\"background-color: rgb(255, 255, 0); \">change</span>(function()\n            {\n               <span class=\"Apple-style-span\" style=\"background-color: rgb(255, 255, 0);\">nvps.Set(\n               {\n                 Name: 'first',\n                 Value: this.value\n               },\n               function() {alert(\"saved\");});</span>\n            });\n</pre><div>To keep things simple, the above block of code is copied for each input, although in a production environment abstracting out the element's name is&#160;recommended.</div><p></p><p>The complete saving code, which is placed in the &lt;oc:inserthead&gt; tag:</p><blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><font class=\"Apple-style-span\" face=\"monospace\" size=\"3\"><span class=\"Apple-style-span\" style=\"white-space: pre;\">&lt;oc:inserthead&gt;\n   &lt;title&gt;Simple Demo Application&lt;/title&gt;\n   &lt;oc:script src=\"/API/jquery.js\" /&gt;\n   &lt;oc:open filename=\"nvps\" varname=\"nvps\" /&gt;\n   &lt;script&gt;\n\n      $(document).ready(function() \n      {\n         $('#first').change(function()\n         {\n            nvps.Set(\n            {\n              Name: 'first',\n              Value: this.value\n            },\n            function() {alert(\"saved\");});\n         });\n\n         $('#middle').change(function()\n         {\n            nvps.Set(\n            {\n              Name: 'middle',\n              Value: this.value\n            },\n            function() {alert(\"saved\");});\n         });\n\n         $('#last').change(function()\n         {\n            nvps.Set(\n            {\n              Name: 'last',\n              Value: this.value\n            },\n            function() {alert(\"saved\");});\n         });\n\n         $('#age').change(function()\n         {\n            nvps.Set(\n            {\n              Name: 'age',\n              Value: this.value\n            },\n            function() {alert(\"saved\");});\n         });\n      });\n      &lt;/script&gt;\n&lt;/oc:inserthead&gt;</span></font></blockquote><p>Once the text boxes are wired to the name-value pairs file through jQuery, it's possible to test that values are saved. In&#160;<a href=\"/SampleNVPs/myapp.oc\" title=\"\" target=\"\">/SampleNVPs/myapp.o</a>c, type in some values:</p><p><img src=\"/Docs/jquery%20storage%20walkthrough/working%20page%20screenshot.png\" alt=\"\" align=\"none\"/><br/></p><p>Then, visit&#160;<a href=\"/SampleNVPs/nvps\" title=\"\" target=\"\">/SampleNVPs/nvps</a>&#160;to verify that the data was saved.</p><p><img src=\"/Docs/jquery%20storage%20walkthrough/saved%20data.png\" alt=\"\" align=\"none\"/><br/></p><h1>Loading the Data</h1><p>Saving the data from in-browser javascript is great, but when the page is refreshed, it&#160;disappears. &#160;The next step is to load the data when the page loads. &#160;Again, this will use jQuery and AppFeeds javascript API.</p><blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><pre>            nvps.GetAll(\n            {},\n            function(all)\n            {\n               $('#first').val(all.first);\n               $('#middle').val(all.middle);\n               $('#last').val(all.last);\n               $('#age').val(all.age);\n            });</pre></blockquote><p>The above code is placed inside $(document).ready. &#160;It calls the name-value pair's GetAll function, which returns an object that has all of the values stored in the file. &#160;It then uses jQuery to populate the text boxes in the browser.</p><h1>More Information</h1><p>AppFeeds and ObjectCloud are much more powerful then what's demonstrated here.</p><h2>API</h2><p>The complete API for the name-value pairs object is <a href=\"/Docs/API/MethodList.wchtml?objectType=name-value\" title=\"\" target=\"\">/Docs/API/MethodList.wchtml?objectType=name-value</a>. &#160;In addition to name-value pairs, it's possible to create text files and directories. &#160;Visit <a href=\"/Docs/API.page\" title=\"\" target=\"\">/Docs/API.page</a>&#160;for more information about the complete API.</p><h2>Templating</h2><p>The default template pages are stored in&#160;<a href=\"/DefaultTemplate\" title=\"\" target=\"\">/DefaultTemplate</a>. &#160;These files control the look and feel of all applications served on AppFeeds and ObjectCloud.</p><blockquote class=\"webkit-indent-blockquote\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><p><b>Note</b>: &#160;<i>Some older parts of ObjectCloud and AppFeeds were written before the templating system and thus have a different look and feel. &#160;These parts use unmaintained APIs and will eventually be ported to the templating system.&#160;</i></p></blockquote><p>The entire spec for the templating system is available at <a href=\"/Docs/Specs/Templating System.page\" title=\"\" target=\"\">/Docs/Specs/Templating System.page</a>.</p><p>There are some runtime configurations that can ease development with the templating system at <a href=\"/Shell/Developer.oc\" title=\"\" target=\"\">/Shell/Developer.oc</a>. &#160;These include controlling the automatic Javascript minimization system, and pretty-printing generated xml that's delivered to the browser. &#160;Try turning these options on and off, and then viewing the demo's source in the browser. Furthermore, when using 3rd party Javascript libraries, there's no need to use minimized versions because ObjectCloud minimizes it automatically. &#160;The switches at&#160;<a href=\"/Shell/Developer.oc\" title=\"\" target=\"\" style=\"color: rgb(68, 68, 119); \">/Shell/Developer.oc</a>&#160;allow for easy runtime debugging of clear and commented Javascript; and delivery of minimized Javascript to end users.</p><p><span class=\"Apple-style-span\" style=\"font-size: 24px; font-weight: bold; \">Complete myapp.oc</span><br/></p><pre>&lt;oc:componentdef xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:oc=\"objectcloud_templating\"&gt;\n&lt;oc:inserthead&gt;\n   &lt;title&gt;Simple Demo Application&lt;/title&gt;\n   &lt;oc:script src=\"/API/jquery.js\" /&gt;\n   &lt;oc:open filename=\"nvps\" varname=\"nvps\" /&gt;\n   &lt;script&gt;\n\n      $(document).ready(function() \n      {\n         nvps.GetAll(\n            {},\n            function(all)\n            {\n               $('#first').val(all.first);\n               $('#middle').val(all.middle);\n               $('#last').val(all.last);\n               $('#age').val(all.age);\n            });\n\n         $('#first').change(function()\n         {\n            nvps.Set(\n            {\n              Name: 'first',\n              Value: this.value\n            },\n            function() {alert(\"saved\");});\n         });\n\n         $('#middle').change(function()\n         {\n            nvps.Set(\n            {\n              Name: 'middle',\n              Value: this.value\n            },\n            function() {alert(\"saved\");});\n         });\n\n         $('#last').change(function()\n         {\n            nvps.Set(\n            {\n              Name: 'last',\n              Value: this.value\n            },\n            function() {alert(\"saved\");});\n         });\n\n         $('#age').change(function()\n         {\n            nvps.Set(\n            {\n              Name: 'age',\n              Value: this.value\n            },\n            function() {alert(\"saved\");});\n         });\n      });\n      &lt;/script&gt;\n&lt;/oc:inserthead&gt;\n\n   &lt;h1&gt;Simple Demo Application&lt;/h1&gt;\n   &lt;div&gt;First: &lt;input type=\"text\" id=\"first\" /&gt;&lt;/div&gt;\n   &lt;div&gt;Middle: &lt;input type=\"text\" id=\"middle\" /&gt;&lt;/div&gt;\n   &lt;div&gt;Last: &lt;input type=\"text\" id=\"last\" /&gt;&lt;/div&gt;\n   &lt;div&gt;Age: &lt;input type=\"text\" id=\"age\" /&gt;&lt;/div&gt;\n\n&lt;/oc:componentdef&gt;<br/></pre>"}