{"Title":"A Walthrough of the Voting Booth's Source Code","Contents":"\u003Cp>\u003Ca href=\"about.page\">About ObjectCloud\u003C/a>\u003C/p>\u003Cp>ObjectCloud's voting booth system is built on top of an embedded \u003Ca target=\"_blank\" title=\"\" href=\"http://www.sqlite.org/\">SQlite\u003C/a> database. &nbsp;Each .vote file is a unique \u003Ca target=\"_blank\" title=\"\" href=\"http://www.sqlite.org/\">SQlite\u003C/a>&nbsp;file. &nbsp;The voting system uses server-side Javascript to prevent a malicious user from \"stuffing the box.\"\u003C/p>\n\u003Ch1>Server-Side code: \u003Ca target=\"_blank\" title=\"\" href=\"../Classes/vote\">/Classes/vote\u003C/a>\u003C/h1>\n\u003Cp>/Classes/vote contains all server-side code for a voting booth.&nbsp; It is applied to all \u003Cspan style=\"text-decoration: line-through;\">files\u003C/span>\nobjects that have a .vote extension.&nbsp; This section attempts to\nhighlight coding techniques, but doesn't cover the entire source code\nfile.\u003Cbr>\n\u003C/p>\n\u003Ch2>Setting up the embedded database schema\u003C/h2>\n\u003Cp>The first part of the Javascript checks the embedded database's\nversion.&nbsp; If it hasn't been set, it creates the schema.&nbsp; Calls to\nbase.PostQuery() must be called as the .vote file's owner, and must be\ncalled in an elevated security context.&nbsp; Once the schema is created,\nthe version is assigned to 0.\u003Cbr>\n\u003C/p>\n\u003Cpre style=\"margin-left: 40px;\">\u003Cspan class=\"Apple-style-span\" style=\"white-space: pre-wrap; font-size: medium; \">elevate(function()\u003C/span>\u003Cbr>\u003C/pre>\u003Cpre style=\"margin-left: 40px;\">\u003Cspan class=\"Apple-style-span\" style=\"font-family: Times; white-space: normal; font-size: medium; \">\u003Cpre style=\"word-wrap: break-word; white-space: pre-wrap; \">{\n   var version = \u003Cspan class=\"Apple-style-span\" style=\"background-color: rgb(255, 255, 0);\">base.GetVersion_Sync({});\u003C/span>\n\n   // Constructor\n   if (null == version)\n      \u003Cspan class=\"Apple-style-span\" style=\"background-color: rgb(255, 255, 0);\">lockMe(function()\n      {\n         callAsOwner(function()\u003C/span>\n         {\n            // Need to double-check in case someone else built the DB...\n            var version = base.GetVersion_Sync({});\n\n            if (null == version)\n            {\n               \u003Cspan class=\"Apple-style-span\" style=\"background-color: rgb(255, 255, 0);\">base.PostQuery_Sync({query:\"create table Question (qId integer not null primary key AUTOINCREMENT, text not null)\"});\u003C/span>\n               base.PostQuery_Sync({query:\"create table AuthenticatedVotes (qId not null, voterId not null, timestamp integer not null)\"});\n               base.PostQuery_Sync({query:\"create table AnonymousVotes (qId not null, timestamp integer not null)\"});\n               base.PostQuery_Sync({query:\"create table Options (theOptions not null)\"});\n\n               var defaultOptions =\n               {\n                  canChangeVote: false,\n                  canSeeResultsWithoutVoting: false,\n                  title: \"\",\n                  question: \"\"\n               };\n\n               base.PostQuery_Sync({query:\"insert into Options (theOptions) values (@theOptions)\", \"@theOptions\": JSON.stringify(defaultOptions)});\n\n               \u003Cspan class=\"Apple-style-span\" style=\"background-color: rgb(255, 255, 0);\">base.SetVersion_Sync({version:0});\n               version = 0;\u003C/span>\n            }\n         });\n      });\n});\u003C/pre>\u003C/span>\u003C/pre>\n\u003Cp>When constructing the schema, the entire object is locked.&nbsp; The\nversion is checked inside and outside of the lock in case multiple\nrequests attempt to create the schema.\u003Cbr>\n\u003C/p>\n\u003Ch2>Getting Poll Results\u003C/h2>\n\u003Cp>SQL is used to count the results.&nbsp; In this case, when getting the results, we use a compound query that has 3 sub-queries:\u003C/p>\u003Cp>From the getVotes() function:\u003Cbr>\u003C/p>\n\u003Cpre style=\"margin-left: 40px;\">elevate(function()\u003Cbr>{\u003Cbr>   \u003Cspan class=\"Apple-style-span\" style=\"white-space: pre-wrap; font-size: medium;\">resultsFromDB = base.PostQuery_Sync(\n        {\n            query: \"select qId from Question group by qId;\" +\n               \"select distinct qId, count(qId) as numVotes from AuthenticatedVotes group by qId;\" +\n               \"select distinct qId, count(qId) as numVotes from AnonymousVotes group by qId;\"\n        });\u003C/span>\u003C/pre>\u003Cpre style=\"margin-left: 40px;\">\u003Cspan class=\"Apple-style-span\" style=\"white-space: pre-wrap; font-size: medium;\">\u003C/span>});\u003Cbr>\u003Cbr>var resultsToReturn =\u003Cbr>{\u003Cbr>   authenticated: aggregate(resultsFromDB\u003Cspan style=\"background-color: rgb(255, 255, 51);\">[0]\u003C/span>, resultsFromDB\u003Cspan style=\"background-color: rgb(255, 255, 51);\">[1]\u003C/span>),\u003Cbr>   anonymous: aggregate(resultsFromDB\u003Cspan style=\"background-color: rgb(255, 255, 51);\">[0]\u003C/span>, resultsFromDB\u003Cspan style=\"background-color: rgb(255, 255, 51);\">[2]\u003C/span>)\u003Cbr>};\u003Cbr>\u003C/pre>\n\u003Cp>The contents of aggregate are shown for your convenience:\u003C/p>\n\u003Cpre style=\"margin-left: 40px;\">function aggregate(validQIds, results)\u003Cbr>{\u003Cbr>   var toReturn = {};\u003Cbr>\u003Cbr>   for (var ctr = 0; ctr &lt; \u003Cspan style=\"background-color: rgb(255, 255, 51);\">validQIds.length\u003C/span>; ctr++)\u003Cbr>      toReturn[validQIds[ctr].qId] = 0;\u003Cbr>\u003Cbr>   for (var ctr = 0; ctr &lt; \u003Cspan style=\"background-color: rgb(255, 255, 51);\">results.length\u003C/span>; ctr++)\u003Cbr>      if (null != toReturn[results[ctr].qId])\u003Cbr>         \u003Cspan style=\"background-color: rgb(255, 255, 51);\">toReturn[results[ctr].qId] = results[ctr].numVotes\u003C/span>;\u003Cbr>\u003Cbr>   return toReturn;\u003Cbr>}\u003Cbr>\u003C/pre>\n\u003Cp>base.PostQuery() always returns a compound array.&nbsp; For compound\nqueries, the most significant index corresponds with the specific\nquery; for single queries the most significant index is always 0.&nbsp; The\ninner array is always an array of objects returned from the query.&nbsp;\nWhen a query returns a scalar, the scalar is used instead of the inner\narray.\u003C/p>\n\u003Ch2>Getting the Current User's Vote\u003C/h2>\n\u003Cp>A simpler query is to get the current user's vote:\u003C/p>\n\u003Cpre style=\"margin-left: 40px;\">getVote.webCallable = \"GET\";\u003Cbr>getVote.minimumWebPermission = \"Read\";  // In case someone's permission changed!  What if someone closed voting by revoking Write?\u003Cbr>getVote.webReturnConvention = \"JavaScriptObject\";\u003Cbr>function getVote()\u003Cbr>{\u003Cbr>\u003Cmeta charset=\"utf-8\">\u003Cspan class=\"Apple-style-span\" style=\"font-family: Times; white-space: normal; font-size: medium; \">\u003Cpre style=\"word-wrap: break-word; white-space: pre-wrap; \">   var userMetadata = getConnectionMetadata();\n\u003C/pre>\u003C/span>   var qId = null;\u003Cbr>\u003Cbr>   if (userMetadata.name != \"anonymous\")\u003Cbr>      elevate(function()\u003Cbr>      {\u003Cbr>         var votes = \u003Cspan style=\"background-color: rgb(255, 255, 51);\">base.PostQuery_Sync(\n         {\n            query: \"select qId from AuthenticatedVotes where voterId = @voterId\",\n            \"@voterId\": userMetadata.id\n         })\u003C/span>\u003Cspan style=\"background-color: rgb(0, 255, 51);\">[0]\u003C/span>;\u003Cbr>\u003Cbr>         if (votes.length &gt; 0)\u003Cbr>            \u003Cspan style=\"background-color: rgb(255, 255, 51);\">qId = votes[0].qId\u003C/span>;\u003Cbr>      });\u003Cbr>\u003Cbr>   return qId;\u003Cbr>}\u003Cbr>\u003C/pre>\n\u003Cp>The above query still returns an outer array, thus votes is assigned\nto the 0th element of base.PostQuery's results.&nbsp; Another interesting\ndifference is that this query uses symbolic arguments.&nbsp; SQlite replaces\n@voterId with the value passed in to the second argument's array.&nbsp; This\ntechnique avoids \u003Ca target=\"_blank\" title=\"\" href=\"http://en.wikipedia.org/wiki/SQL_injection\">SQL injection attacks\u003C/a>.\u003C/p>\u003Cp>Note that the above function sets the webCallable, minimumWebPermission, and webReturnConvention values for the getVote function.&nbsp; These values are needed in order to expose the getVote function to the web.\u003Cbr>\u003C/p>\n\u003Ch2>Storing Options\u003C/h2>\n\u003Cp>The voting booth's options are stored as a serialized JSON object in\na table with one row.&nbsp; This keeps the schema simple, and allows for\nsimple addition of options without needing to update the schema.\u003C/p>\n\u003Cpre style=\"margin-left: 40px;\">setOptions.webCallable = \"POST_application_x_www_form_urlencoded\";\u003Cbr>setOptions.minimumWebPermission = \"Administer\";\u003Cbr>setOptions.parser_canChangeVote = \"bool\";\u003Cbr>setOptions.parser_canSeeResultsWithoutVoting = \"bool\";\u003Cbr>function setOptions(canChangeVote, canSeeResultsWithoutVoting, question, title)\u003Cbr>{\u003Cbr>   var options = getOptions();\u003Cbr>\u003Cbr>   if (null != canChangeVote)\u003Cbr>      options.canChangeVote = canChangeVote;\u003Cbr>\u003Cbr>   if (null != canSeeResultsWithoutVoting)\u003Cbr>      options.canSeeResultsWithoutVoting = canSeeResultsWithoutVoting;\u003Cbr>\u003Cbr>   if (null != question)\u003Cbr>      options.question = question;\u003Cbr>\u003Cbr>   if (null != title)\u003Cbr>      options.title = title;\u003Cbr>\u003Cbr>   elevate(function()\u003Cbr>   {\u003Cbr>      base.PostQuery_Sync(\n      {\n         query: \"update Options set theOptions=@theOptions\",\n         \"@theOptions\": JSON.stringify(options)\n      });\u003Cbr>   });\u003Cbr>}\u003Cbr>\u003Cbr>\u003C/pre>\n\u003Cpre style=\"margin-left: 40px;\">function getOptions()\u003Cbr>{\u003Cbr>   var options;\u003Cbr>   elevate(function()\u003Cbr>   {\u003Cbr>      callAsOwner(function()\u003Cbr>      {\u003Cbr>         options = base.PostQuery_Sync(\n         {\n            query: \"select theOptions from Options\"\n         })\u003Cspan class=\"Apple-style-span\" style=\"background-color: rgb(255, 255, 0);\">[0][0]\u003C/span>;\u003Cbr>         options = eval('(' + options + ')');\u003Cbr>      });\u003Cbr>   });\u003Cbr>\u003Cbr>   return options;\u003Cbr>}\u003Cbr>\u003C/pre>\n\u003Cp>Because PostQuery always returns a compound array, the single row\nfrom the Options table is element [0][0].&nbsp; theOptions, a serialized\nJSON string, is eval()ed to parse.&nbsp; Because the string comes from\ntrusted sources, we can use eval() instead of JSON.parse().\u003C/p>\n\u003Ch1>The Template .vote File, \u003Ca target=\"_blank\" title=\"\" href=\"../Templates/Voting%20Booth%20Template.vote\">/Templates/Voting Booth Template.vote\u003C/a>\u003Cbr>\n\u003C/h1>\n\u003Cp>The template .vote file, \u003Ca target=\"_blank\" title=\"\" href=\"../Templates/Voting%20Booth%20Template.vote\">/Templates/Voting Booth Template.vote\u003C/a> is copied whenever a new voting booth is created.&nbsp; The file was created with the following steps:\u003C/p>\n\u003Col>\u003Cli>In \u003Ca target=\"_blank\" title=\"\" href=\"../Templates\">/Templates\u003C/a>, a new file was created of type \"Database.\"&nbsp; The name was \"Voting Booth Template.vote\"\u003C/li>\u003Cli>The new file was viewed to stimulate creating its schema\u003C/li>\u003C/ol>\n\u003Cp>The following line was added to \u003Ca target=\"_blank\" title=\"\" href=\"../Shell/Navigation/Directory.json\">/Shell/Navigation/Directory.json\u003C/a> so that users can create a new Voting Booth:\u003C/p>\n\u003Cpre style=\"margin-left: 40px;\">{\"Template\":\"/Templates/Voting Booth Template.vote\",\"Extension\":\".vote\",\"Display\":\"Voting Booth (Experimental)\"}\u003Cbr>\u003C/pre>\n\n\u003Ch1>Viewing a .vote file with SQL\u003C/h1>\n\u003Cp>It's possible to use Whisquil, a simple SQL shell, to view the\ncontents of a .vote file.&nbsp; To do so, use the following URL syntax:\u003C/p>\n\u003Cpre style=\"margin-left: 40px;\">/Shell/Editors/Whisquil.wchtml?FileName=[Path to .vote file]\u003Cbr>\u003C/pre>\n\u003Ch1>Narl, the .vote Editor\u003C/h1>\n\u003Cp>Narl, (pronounced \"nar-eye\",) allows someone to set the valid responses and options for a voting booth.&nbsp; Narl is stored at \u003Ca target=\"_blank\" title=\"\" href=\"../Shell/Editors/Narl.wchtml?Method=ReadAll\">/Shell/Editors/Narl.wchtml\u003C/a>\u003Cbr>\n\u003C/p>\n\u003Cp>Narl loads the Javascript object to access the server-side code with the following &lt;? Scripts... tag:\u003C/p>\n\u003Cpre style=\"margin-left: 40px;\">&lt;? Scripts(/API/Prototype.js, \u003Cspan style=\"background-color: rgb(255, 255, 51);\">&lt;? $_GET[\"FileName\"] ?&gt;?Method=GetJSW&amp;assignToVariable=VotingBooth,\u003Cspan style=\"background-color: rgb(255, 255, 255);\"> /API/nicEdit.js) ?&gt;\u003C/span>\u003C/span>\u003Cbr>\u003C/pre>\n\u003Cp>The options and questions are pre-loaded using WebComponents:\u003C/p>\n\u003Cpre style=\"margin-left: 40px;\">var pollInfo = \u003Cspan style=\"background-color: rgb(255, 255, 51);\">&lt;? WebComponent($_GET[\"FileName\"] . \"?Method=getQuestionsAndOptions\") ?&gt;;\u003C/span>\u003Cbr>var options = pollInfo.options;\u003Cbr>var questions = pollInfo.questions;\u003Cbr>\u003C/pre>\n\u003Cp>Options are written back to the server using the VotingBooth object\nthat wraps all AJAX.&nbsp; (Note:&nbsp; Prototype.js gives the $(\"...\") syntax)\u003Cbr>\n\u003C/p>\n\u003Cpre style=\"margin-left: 40px;\">function updateOptions()\u003Cbr>{\u003Cbr>   $(\"OptionsEditor\").disable();\u003Cbr>\u003Cbr>   var question = $(\"question\").innerHTML;\u003Cbr>\u003Cbr>   VotingBooth.setOptions(\u003Cbr>   {\n      canChangeVote: $(\"canChangeVote\").checked,\n      canSeeResultsWithoutVoting: $(\"canSeeResultsWithoutVoting\").checked,\n      question: question,\n      title: $(\"q_title\").value,\n   },\n   function()\n   {\n      $(\"OptionsEditor\").enable();\n      options.question = question;\n   });\n}\u003Cbr>\u003C/pre>\n\u003Cp>A question is added and updated using the VotingBooth object as well:\u003C/p>\n\u003Cpre style=\"margin-left: 40px;\">function addQuestion()\u003Cbr>{\u003Cbr>   var newQuestion = $(\"AddQuestionInput\").value;\u003Cbr>   $(\"AddQuestionInput\").value = \"\";\u003Cbr>\u003Cbr>   VotingBooth.addQuestion(\u003Cbr>      newQuestion,\u003Cbr>      {},\u003Cbr>      displayQuestion);\u003Cbr>}\u003Cbr>\u003Cbr>function updateQuestion(qId)\u003Cbr>{\u003Cbr>   var text = $(\"q\" + qId).value;\u003Cbr>   VotingBooth.updateQuestion(\u003Cbr>      qId,\u003Cbr>      text,\u003Cbr>      {},\u003Cbr>      function(question)\u003Cbr>      {\u003Cbr>         $(\"q\" + qId).value = question.text;\u003Cbr>      });\u003Cbr>}\u003Cbr>\u003C/pre>\n\u003Ch1>Goreal, the voting booth Program\u003Cbr>\n\u003C/h1>\n\u003Cp>Goreal, (pronounced \"Gore-al,\") allows someone to vote.&nbsp; Goreal is stored at \u003Ca target=\"_blank\" title=\"\" href=\"../Shell/Viewers/Goreal.wchtml?Method=ReadAll\">/Shell/Viewers/Goreal.wchtml\u003C/a>\u003Cbr>\n\u003C/p>\n\u003Cp>Goreal loads the Javascript wrapper, questions, and options just like Narl.\u003C/p>\n\u003Cp>Goreal loads the currently-submitted vote with a WebComponent.&nbsp; If the user hasn't voted, it's set to null.\u003C/p>\n\u003Cpre style=\"margin-left: 40px;\">var vote = &lt;? WebComponent($_GET[\"FileName\"] . \"?Method=getVote\") ?&gt;;\u003Cbr>\u003C/pre>\n\u003Cp>The vote is submitted through AJAX:\u003C/p>\u003Cpre style=\"margin-left: 40px;\">function submitVote()\u003Cbr>{\u003Cbr>   var voteToSubmit = null;\u003Cbr>\u003Cbr>   questions.each(function(question)\u003Cbr>   {\u003Cbr>      if ($(\"q\" + question.qId).checked)\u003Cbr>         voteToSubmit = question.qId;\u003Cbr>   });\u003Cbr>\u003Cbr>   if (null != voteToSubmit)\u003Cbr>      VotingBooth.vote(\u003Cbr>         voteToSubmit,\u003Cbr>         {},\u003Cbr>         function()\u003Cbr>         {\u003Cbr>            window.location.reload(true);\u003Cbr>         });\u003Cbr>      else\u003Cbr>         alert(\"Please select a question\");\u003Cbr>}\u003Cbr>\u003C/pre>\u003Cp>Results are also loaded through AJAX.&nbsp; In the event that the query takes awhile to run, the user will still see a page:\u003C/p>\u003Cpre style=\"margin-left: 40px;\">if (options.canSeeResultsWithoutVoting || null != vote)\u003Cbr>   VotingBooth.getVotes(\u003Cbr>      {},\u003Cbr>      function(votes)\u003Cbr>      {\u003Cbr>         questions.each(function(question)\u003Cbr>         {\u003Cbr>            var qId = question.qId;\u003Cbr>            var qSpan = $(\"s\" + qId);\u003Cbr>\u003Cbr>            qSpan.innerHTML = ': &lt;span style=\"font-size: 1.5em\"&gt;' + (votes.authenticated[qId] + votes.anonymous[qId]) + '&lt;/span&gt;&lt;span style=\"font-size: 0.75em\"&gt; (' + \u003Cbr>               votes.authenticated[qId] + ' authenticated, ' + votes.anonymous[qId] + ' anonymous)&lt;/span&gt;';\u003Cbr>         });\u003Cbr>      });\u003Cbr>\u003C/pre>\u003Cp>\u003Ca href=\"about.page\">About ObjectCloud\u003C/a>\u003C/p>\u003Cp>\u003C/p>"}